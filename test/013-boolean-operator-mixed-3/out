0 2018-Dec-28 12:41:07.470484 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 12:41:07.471063 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 12:41:07.471470 - [INFO] No configuration file is used.
3 2018-Dec-28 12:41:07.471548 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 12:41:07.471648 - [INFO] Check program options for logical errors.
5 2018-Dec-28 12:41:07.471738 - [INFO] Set-up IR database.
6 2018-Dec-28 12:41:07.477027 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 12:41:07.477146 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 12:41:07.477284 - [INFO] 	main.ll
9 2018-Dec-28 12:41:07.477375 - [INFO] Check for chosen entry points.
10 2018-Dec-28 12:41:07.477439 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 12:41:07.477498 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 12:41:07.477608 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 12:41:07.477976 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 12:41:07.478132 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 12:41:07.478569 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 12:41:07.478644 - [INFO] Allocated Types    : 1
17 2018-Dec-28 12:41:07.478710 - [INFO] Allocation Sites   : 3
18 2018-Dec-28 12:41:07.478768 - [INFO] Basic Blocks       : 4
19 2018-Dec-28 12:41:07.478826 - [INFO] Calls Sites        : 5
20 2018-Dec-28 12:41:07.478885 - [INFO] Functions          : 4
21 2018-Dec-28 12:41:07.478943 - [INFO] Globals            : 2
22 2018-Dec-28 12:41:07.479000 - [INFO] Global Pointer     : 2
23 2018-Dec-28 12:41:07.479058 - [INFO] Instructions       : 21
24 2018-Dec-28 12:41:07.479116 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 12:41:07.479174 - [INFO] Store Instructions : 3
26 2018-Dec-28 12:41:07.479231 - [INFO]  
27 2018-Dec-28 12:41:07.479318 - [INFO]   i32
28 2018-Dec-28 12:41:07.479898 - [DEBUG] Analyzing function: main
29 2018-Dec-28 12:41:07.480219 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 12:41:07.480290 - [INFO] Construct type hierarchy
31 2018-Dec-28 12:41:07.480351 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 12:41:07.480517 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 12:41:07.480588 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 12:41:07.480652 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 12:41:07.480772 - [DEBUG] Walking in function: main
36 2018-Dec-28 12:41:07.480859 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2018-Dec-28 12:41:07.481196 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 12:41:07.481257 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 12:41:07.481343 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 12:41:07.481407 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 12:41:07.481470 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
42 2018-Dec-28 12:41:07.481833 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 12:41:07.481933 - [DEBUG] Target name: getenv
44 2018-Dec-28 12:41:07.482016 - [DEBUG] Walking in function: getenv
45 2018-Dec-28 12:41:07.482078 - [DEBUG] Function already visited or only declaration: getenv
46 2018-Dec-28 12:41:07.482142 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
47 2018-Dec-28 12:41:07.482389 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 12:41:07.482448 - [DEBUG] Target name: foo
49 2018-Dec-28 12:41:07.482525 - [DEBUG] Walking in function: foo
50 2018-Dec-28 12:41:07.482586 - [DEBUG] Function already visited or only declaration: foo
51 2018-Dec-28 12:41:07.482649 - [DEBUG] Found static call-site: %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
52 2018-Dec-28 12:41:07.482925 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 12:41:07.482985 - [DEBUG] Target name: getenv
54 2018-Dec-28 12:41:07.483059 - [DEBUG] Walking in function: getenv
55 2018-Dec-28 12:41:07.483121 - [DEBUG] Function already visited or only declaration: getenv
56 2018-Dec-28 12:41:07.483185 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40, ID: 19
57 2018-Dec-28 12:41:07.483464 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-28 12:41:07.483523 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-28 12:41:07.483597 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-28 12:41:07.483727 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-28 12:41:07.483814 - [INFO] Call graph has been constructed
62 2018-Dec-28 12:41:07.483878 - [INFO] Performing analysis: plugin
63 2018-Dec-28 12:41:07.483957 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2018-Dec-28 12:41:07.484507 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 8

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 8
Adding line: 8

flow()
  br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 5
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  br label %lor.end, !dbg !29, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 7
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35
===========================
Got phi node instruction
Adding phi node instruction fact (constant)
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
===========================
Got operands checking instruction (zext)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 9

flow()
  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 11
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 9
Adding line: 9

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 5
New Facts: 3

flow()
  br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 5

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35
===========================
Got phi node instruction
Adding phi node instruction fact (constant)
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  br label %lor.end, !dbg !29, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  %0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35
===========================
Got phi node instruction
Adding phi node instruction fact (constant)
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
===========================
Got operands checking instruction (zext)
Adding fact
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 11
New Facts: 11

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
===========================
Got call instruction

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
===========================
Got operands checking instruction (icmp)
Adding fact

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
===========================

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
===========================
Got call instruction
Adding call instruction fact

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
===========================
Got store instruction

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)

flow()
  br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25
===========================
Got branch instruction
Adding conditional branch instruction fact

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40
===========================
Got call instruction

flow()
  br label %lor.end, !dbg !29, !phasar.instruction.id !34
===========================

flow()
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
===========================

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28
===========================

flow()
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
===========================
Got operands checking instruction (zext)
Adding fact

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
===========================

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33
===========================

flow()
  %0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35
===========================
Got phi node instruction
Adding phi node instruction fact (constant)

flow()
  store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37
===========================
Got store instruction
Adding store instruction

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
===========================
Got operands checking instruction (load)
Adding fact

flow()
  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43
===========================
Got store instruction
Adding store instruction

flow()
  ret i32 0, !dbg !44, !phasar.instruction.id !45worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 17
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40, ID: 19
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 17
%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14
%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16
store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18


Instruction:
br label %lor.end, !dbg !29, !phasar.instruction.id !34, ID: 15
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14


Instruction:
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10


Instruction:
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 17
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14
%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16


Instruction:
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30, ID: 12
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11


Instruction:
%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11


Instruction:
%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
%tobool4 = 65 2018-Dec-28 12:41:07.520403 - [INFO] Write results to file
66 2018-Dec-28 12:41:07.520606 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14


Instruction:
store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 17
%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14
%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42, ID: 20
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 17
%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14
%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16
store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18


Instruction:
store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43, ID: 21
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 17
%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14
%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16
store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42, ID: 20


Instruction:
ret i32 0, !dbg !44, !phasar.instruction.id !45, ID: 22
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 17
%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14
%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16
store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42, ID: 20
store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43, ID: 21


