0 2019-Jan-05 14:31:26.853665 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 14:31:26.854094 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 14:31:26.854452 - [INFO] No configuration file is used.
3 2019-Jan-05 14:31:26.854528 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 14:31:26.854625 - [INFO] Check program options for logical errors.
5 2019-Jan-05 14:31:26.854714 - [INFO] Set-up IR database.
6 2019-Jan-05 14:31:26.859243 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 14:31:26.859355 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 14:31:26.859416 - [INFO] 	main.ll
9 2019-Jan-05 14:31:26.859475 - [INFO] Check for chosen entry points.
10 2019-Jan-05 14:31:26.859536 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 14:31:26.859594 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 14:31:26.859653 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 14:31:26.859988 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 14:31:26.860108 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 14:31:26.860433 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 14:31:26.860497 - [INFO] Allocated Types    : 1
17 2019-Jan-05 14:31:26.860560 - [INFO] Allocation Sites   : 2
18 2019-Jan-05 14:31:26.860642 - [INFO] Basic Blocks       : 6
19 2019-Jan-05 14:31:26.860700 - [INFO] Calls Sites        : 3
20 2019-Jan-05 14:31:26.860758 - [INFO] Functions          : 4
21 2019-Jan-05 14:31:26.860815 - [INFO] Globals            : 1
22 2019-Jan-05 14:31:26.860872 - [INFO] Global Pointer     : 1
23 2019-Jan-05 14:31:26.860929 - [INFO] Instructions       : 17
24 2019-Jan-05 14:31:26.860987 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 14:31:26.861044 - [INFO] Store Instructions : 2
26 2019-Jan-05 14:31:26.861101 - [INFO]  
27 2019-Jan-05 14:31:26.861182 - [INFO]   i32
28 2019-Jan-05 14:31:26.861603 - [DEBUG] Analyzing function: main
29 2019-Jan-05 14:31:26.861834 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 14:31:26.861898 - [INFO] Construct type hierarchy
31 2019-Jan-05 14:31:26.861958 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 14:31:26.862114 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 14:31:26.862184 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 14:31:26.862245 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 14:31:26.862355 - [DEBUG] Walking in function: main
36 2019-Jan-05 14:31:26.862441 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
37 2019-Jan-05 14:31:26.862744 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 14:31:26.862804 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 14:31:26.862890 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 14:31:26.862953 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 14:31:26.863017 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
42 2019-Jan-05 14:31:26.863297 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 14:31:26.863356 - [DEBUG] Target name: getenv
44 2019-Jan-05 14:31:26.863436 - [DEBUG] Walking in function: getenv
45 2019-Jan-05 14:31:26.863498 - [DEBUG] Function already visited or only declaration: getenv
46 2019-Jan-05 14:31:26.863562 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
47 2019-Jan-05 14:31:26.863788 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 14:31:26.863846 - [DEBUG] Target name: foo
49 2019-Jan-05 14:31:26.863923 - [DEBUG] Walking in function: foo
50 2019-Jan-05 14:31:26.864016 - [DEBUG] Function already visited or only declaration: foo
51 2019-Jan-05 14:31:26.864079 - [INFO] Call graph has been constructed
52 2019-Jan-05 14:31:26.864140 - [INFO] Performing analysis: plugin
53 2019-Jan-05 14:31:26.864224 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
54 2019-Jan-05 14:31:26.864725 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction
Dumping facts
=============
=============


  br label %while.cond, !dbg !19, !phasar.instruction.id !20
Got branch instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 9

  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
=============

Added line number: 9
Added line number: 9

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
=============

Added line number: 9
Added line number: 9
Added line number: 9

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
=============

Added line number: 9
Added line number: 9
Added line number: 9

  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
=============

Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
=============

Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br label %land.end, !phasar.instruction.id !29
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
=============

Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br label %while.cond, !dbg !19, !llvm.loop !35, !phasar.instruction.id !37
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %1 = load i32, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !39
Got load instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
=============


  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
=============


  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
=============


  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
=============


  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
=============


  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
=============


  br label %land.end, !phasar.instruction.id !29
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
=============


  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
=============


  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============


  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============


  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============


  %1 = load i32, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !39
Got load instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
=============


  br label %while.cond, !dbg !19, !llvm.loop !35, !phasar.instruction.id !37
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br label %land.end, !phasar.instruction.id !29
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============


  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31
=============


  %1 = load i32, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !39
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27
  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
  %1 = load i32, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !39
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 13

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  br label %while.cond, !dbg !19, !phasar.instruction.id !20
Got branch instruction

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction
Removed 0 memory locations from facts

  br label %while.cond, !dbg !19, !llvm.loop !35, !phasar.instruction.id !37

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25

  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23

  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27

  %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28

  br label %land.end, !phasar.instruction.id !29

  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30
Got phi node instruction
Adding phi node instruction fact (constant)

  %1 = load i32, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !39
Got load instruction
Adding load instruction fact

  br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31

  ret i32 %1, !dbg !40, !phasar.instruction.id !41worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 15
worklist size: 15
worklist size: 15
worklist size: 15
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
br label %while.cond, !dbg !19, !phasar.instruction.id !20, ID: 5
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
br label %while.cond, !dbg !19, !llvm.loop !35, !phasar.instruction.id !37, ID: 15
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
br label %land.end, !phasar.instruction.id !29, ID: 11
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne 55 2019-Jan-05 14:31:26.930213 - [INFO] Write results to file
56 2019-Jan-05 14:31:26.930406 - [INFO] Shutdown llvm and the analysis framework.

i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !39, ID: 16
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13


Instruction:
ret i32 %1, !dbg !40, !phasar.instruction.id !41, ID: 17
Facts:
store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7
%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10
%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12
%1 = load i32, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !39, ID: 16


