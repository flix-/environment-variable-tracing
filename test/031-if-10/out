0 2018-Dec-31 15:54:22.366251 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-31 15:54:22.366674 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-31 15:54:22.367019 - [INFO] No configuration file is used.
3 2018-Dec-31 15:54:22.367096 - [INFO] Program options have been successfully parsed.
4 2018-Dec-31 15:54:22.367188 - [INFO] Check program options for logical errors.
5 2018-Dec-31 15:54:22.367277 - [INFO] Set-up IR database.
6 2018-Dec-31 15:54:22.374755 - [INFO] Constructed the analysis controller.
7 2018-Dec-31 15:54:22.374866 - [INFO] Found the following IR files for this project: 
8 2018-Dec-31 15:54:22.374927 - [INFO] 	main.ll
9 2018-Dec-31 15:54:22.374986 - [INFO] Check for chosen entry points.
10 2018-Dec-31 15:54:22.375047 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-31 15:54:22.375105 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-31 15:54:22.375164 - [INFO] Preprocess module: main.ll
13 2018-Dec-31 15:54:22.375497 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-31 15:54:22.375654 - [INFO] Running ValueAnnotationPass
15 2018-Dec-31 15:54:22.376238 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-31 15:54:22.376304 - [INFO] Allocated Types    : 1
17 2018-Dec-31 15:54:22.376368 - [INFO] Allocation Sites   : 5
18 2018-Dec-31 15:54:22.376425 - [INFO] Basic Blocks       : 13
19 2018-Dec-31 15:54:22.376482 - [INFO] Calls Sites        : 7
20 2018-Dec-31 15:54:22.376540 - [INFO] Functions          : 4
21 2018-Dec-31 15:54:22.376597 - [INFO] Globals            : 1
22 2018-Dec-31 15:54:22.376654 - [INFO] Global Pointer     : 1
23 2018-Dec-31 15:54:22.376712 - [INFO] Instructions       : 41
24 2018-Dec-31 15:54:22.376769 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-31 15:54:22.376826 - [INFO] Store Instructions : 9
26 2018-Dec-31 15:54:22.376884 - [INFO]  
27 2018-Dec-31 15:54:22.376958 - [INFO]   i32
28 2018-Dec-31 15:54:22.377699 - [DEBUG] Analyzing function: main
29 2018-Dec-31 15:54:22.378070 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-31 15:54:22.378140 - [INFO] Construct type hierarchy
31 2018-Dec-31 15:54:22.378200 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-31 15:54:22.378401 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-31 15:54:22.378469 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-31 15:54:22.378531 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-31 15:54:22.378643 - [DEBUG] Walking in function: main
36 2018-Dec-31 15:54:22.378729 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
37 2018-Dec-31 15:54:22.379161 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-31 15:54:22.379221 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-31 15:54:22.379307 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-31 15:54:22.379371 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-31 15:54:22.379435 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %untainted, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
42 2018-Dec-31 15:54:22.379813 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-31 15:54:22.379872 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-31 15:54:22.379946 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-31 15:54:22.380008 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-31 15:54:22.380071 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !19), !dbg !26, !phasar.instruction.id !27, ID: 9
47 2018-Dec-31 15:54:22.380422 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-31 15:54:22.380481 - [DEBUG] Target name: llvm.dbg.declare
49 2018-Dec-31 15:54:22.380555 - [DEBUG] Walking in function: llvm.dbg.declare
50 2018-Dec-31 15:54:22.380617 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2018-Dec-31 15:54:22.380681 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
52 2018-Dec-31 15:54:22.381097 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-31 15:54:22.381156 - [DEBUG] Target name: getenv
54 2018-Dec-31 15:54:22.381237 - [DEBUG] Walking in function: getenv
55 2018-Dec-31 15:54:22.381299 - [DEBUG] Function already visited or only declaration: getenv
56 2018-Dec-31 15:54:22.381363 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
57 2018-Dec-31 15:54:22.381707 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-31 15:54:22.381766 - [DEBUG] Target name: foo
59 2018-Dec-31 15:54:22.381842 - [DEBUG] Walking in function: foo
60 2018-Dec-31 15:54:22.381904 - [DEBUG] Function already visited or only declaration: foo
61 2018-Dec-31 15:54:22.381968 - [DEBUG] Found static call-site: %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
62 2018-Dec-31 15:54:22.382310 - [DEBUG] Found 1 possible target(s)
63 2018-Dec-31 15:54:22.382369 - [DEBUG] Target name: foo
64 2018-Dec-31 15:54:22.382442 - [DEBUG] Walking in function: foo
65 2018-Dec-31 15:54:22.382503 - [DEBUG] Function already visited or only declaration: foo
66 2018-Dec-31 15:54:22.382568 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !72, metadata !19), !dbg !73, !phasar.instruction.id !74, ID: 31
67 2018-Dec-31 15:54:22.382948 - [DEBUG] Found 1 possible target(s)
68 2018-Dec-31 15:54:22.383007 - [DEBUG] Target name: llvm.dbg.declare
69 2018-Dec-31 15:54:22.383081 - [DEBUG] Walking in function: llvm.dbg.declare
70 2018-Dec-31 15:54:22.383143 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
71 2018-Dec-31 15:54:22.383206 - [INFO] Call graph has been constructed
72 2018-Dec-31 15:54:22.383267 - [INFO] Performing analysis: plugin
73 2018-Dec-31 15:54:22.383333 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
74 2018-Dec-31 15:54:22.383813 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %untainted = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removing memory location
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %untainted, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !19), !dbg !26, !phasar.instruction.id !27
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line: 10

  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line: 10
Adding line: 10

  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
=============

Adding line: 10
Adding line: 10
Adding line: 12

  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12

  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12

  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12

  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13

  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13

  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============

Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13

  br label %if.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============

Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13

  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============

Adding line: 16
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13

  br label %if.end, !phasar.instruction.id !52
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13

  br label %if.end10, !dbg !53, !phasar.instruction.id !54
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13

  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 19

  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 19
Adding line: 19

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 19
Adding line: 19

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 19
Adding line: 19

  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 19
Adding line: 19
Adding line: 20

  br label %if.end9, !dbg !65, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 19
Adding line: 19
Adding line: 20

  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 19
Adding line: 19
Adding line: 22

  br label %if.end9, !phasar.instruction.id !70
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  br label %if.end10, !phasar.instruction.id !71
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  call void @llvm.dbg.declare(metadata i32* %a, metadata !72, metadata !19), !dbg !73, !phasar.instruction.id !74
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  store i32 1, i32* %a, align 4, !dbg !73, !phasar.instruction.id !75
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  %1 = load i32, i32* %untainted, align 4, !dbg !76, !phasar.instruction.id !78
Got load instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  %tobool11 = icmp ne i32 %1, 0, !dbg !76, !phasar.instruction.id !79
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  store i32 0, i32* %a, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  br label %if.end14, !dbg !85, !phasar.instruction.id !86
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  store i32 1, i32* %a, align 4, !dbg !87, !phasar.instruction.id !89
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22

  br label %if.end14, !phasar.instruction.id !90
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  %2 = load i32, i32* %rc, align 4, !dbg !91, !phasar.instruction.id !92
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
  %2 = load i32, i32* %rc, align 4, !dbg !91, !phasar.instruction.id !92
=============

Adding line: 16
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 12
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 19
Adding line: 19
Adding line: 20
Adding line: 22
Adding line: 33

  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
=============


  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
=============


  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
=============


  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
=============


  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
=============


  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
=============


  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  br label %if.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  br label %if.end10, !dbg !53, !phasar.instruction.id !54
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  br label %if.end, !phasar.instruction.id !52
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  br label %if.end10, !dbg !53, !phasar.instruction.id !54
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !72, metadata !19), !dbg !73, !phasar.instruction.id !74
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
=============


  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
=============


  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
=============


  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
=============


  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  br label %if.end9, !dbg !65, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
=============


  br label %if.end10, !phasar.instruction.id !71
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  br label %if.end9, !phasar.instruction.id !70
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  br label %if.end10, !phasar.instruction.id !71
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !72, metadata !19), !dbg !73, !phasar.instruction.id !74
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  store i32 1, i32* %a, align 4, !dbg !73, !phasar.instruction.id !75
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  %1 = load i32, i32* %untainted, align 4, !dbg !76, !phasar.instruction.id !78
Got load instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  %tobool11 = icmp ne i32 %1, 0, !dbg !76, !phasar.instruction.id !79
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  store i32 0, i32* %a, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  store i32 1, i32* %a, align 4, !dbg !87, !phasar.instruction.id !89
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  br label %if.end14, !dbg !85, !phasar.instruction.id !86
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  %2 = load i32, i32* %rc, align 4, !dbg !91, !phasar.instruction.id !92
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
  %2 = load i32, i32* %rc, align 4, !dbg !91, !phasar.instruction.id !92
=============


  br label %if.end14, !phasar.instruction.id !90
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51
  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40
  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41
  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %untainted = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51

  store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46

  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
Got store instruction
Removing memory location
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removing memory location

  %a = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %untainted, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !19), !dbg !26, !phasar.instruction.id !27
Got call instruction

  %taint = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33
Got load instruction
Adding load instruction fact

  %tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34
Got operands checking instruction (icmp)
Adding fact

  br label %if.end10, !phasar.instruction.id !71

  br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36
Got branch instruction
Adding conditional branch instruction fact

  %call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40

  %tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41

  %1 = load i32, i32* %untainted, align 4, !dbg !76, !phasar.instruction.id !78
Got load instruction

  br label %if.end, !phasar.instruction.id !52

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !42, !phasar.instruction.id !43

  br label %if.end, !dbg !47, !phasar.instruction.id !48

  br label %if.end10, !dbg !53, !phasar.instruction.id !54

  %call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58

  %tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59

  br label %if.end9, !phasar.instruction.id !70

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !60, !phasar.instruction.id !61

  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64

  br label %if.end9, !dbg !65, !phasar.instruction.id !66

  store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69

  call void @llvm.dbg.declare(metadata i32* %a, metadata !72, metadata !19), !dbg !73, !phasar.instruction.id !74
Got call instruction

  store i32 1, i32* %a, align 4, !dbg !73, !phasar.instruction.id !75
Got store instruction
Removing memory location

  %tobool11 = icmp ne i32 %1, 0, !dbg !76, !phasar.instruction.id !79
Got operands checking instruction (icmp)

  %2 = load i32, i32* %rc, align 4, !dbg !91, !phasar.instruction.id !92
Got load instruction
Adding load instruction fact

  br label %if.end14, !phasar.instruction.id !90
Got branch instruction

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction

  store i32 0, i32* %a, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removing memory location

  br label %if.end14, !dbg !85, !phasar.instruction.id !86
Got branch instruction

  store i32 1, i32* %a, align 4, !dbg !87, !phasar.instruction.id !89
Got store instruction
Removing memory location

  ret i32 %2, !dbg !93, !phasar.instruction.id !94worklist size: 44
worklist size: 43
worklist size: 42
worklist size: 41
worklist size: 40
worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 35
worklist size: 35
worklist size: 35
worklist size: 36
worklist size: 36
worklist size: 36
worklist size: 36
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%untainted = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16


Instruction:
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %untainted, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !19), !dbg !26, !phasar.instruction.id !27, ID: 9
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10


Instruction:
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12


Instruction:
br label %if.end10, !phasar.instruction.id !71, ID: 30
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13


Instruction:
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15


Instruction:
%1 = load i32, i32* %untainted, align 4, !dbg !76, !phasar.instruction.id !78, ID: 33
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
br label %if.end, !phasar.instruction.id !52, ID: 21
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16


Instruction:
br i1 %tobool2, label %if.then3, label %if.else, !dbg !42, !phasar.instruction.id !43, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16


Instruction:
br label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16


Instruction:
br label %if.end10, !dbg !53, !phasar.instruction.id !54, ID: 22
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16


Instruction:
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14


Instruction:
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23


Instruction:
br label %if.end9, !phasar.instruction.id !70, ID: 29
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
br i1 %tobool6, label %if.then7, label %if.else8, !dbg !60, !phasar.instruction.id !61, ID: 25
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24


Instruction:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24


Instruction:
br label %if.end9, !dbg !65, !phasar.instruction.id !66, ID: 27
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26


Instruction:
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !72, metadata !19), !dbg !73, !phasar.instruction.id !74, ID: 31
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
br i1 %tobool, label %if.then, label %if.else4, !dbg !35, !phasar.instruction.id !36, ID: 14
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
store i32 1, i32* %a, align 4, !dbg !73, !phasar.instruction.id !75, ID: 32
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
%tobool11 = icmp ne i32 %1, 0, !dbg !76, !phasar.instruction.id !79, ID: 34
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !91, !phasar.instruction.id !92, ID: 40
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
br label %if.end14, !phasar.instruction.id !90, ID: 39
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81, ID: 35
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
store i32 0, i32* %a, align 4, !dbg !82, !phasar.instruction.id !84, ID: 36
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (75 2018-Dec-31 15:54:22.681080 - [INFO] Write results to file
76 2018-Dec-31 15:54:22.681285 - [INFO] Shutdown llvm and the analysis framework.

...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
br label %if.end14, !dbg !85, !phasar.instruction.id !86, ID: 37
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
store i32 1, i32* %a, align 4, !dbg !87, !phasar.instruction.id !89, ID: 38
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28


Instruction:
ret i32 %2, !dbg !93, !phasar.instruction.id !94, ID: 41
Facts:
store i32 1, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 1, i32* %rc, align 4, !dbg !44, !phasar.instruction.id !46, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 11
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 10
%0 = load i32, i32* %taint, align 4, !dbg !31, !phasar.instruction.id !33, ID: 12
%tobool = icmp ne i32 %0, 0, !dbg !31, !phasar.instruction.id !34, ID: 13
%call1 = call i32 (...) @foo(), !dbg !37, !phasar.instruction.id !40, ID: 15
%tobool2 = icmp ne i32 %call1, 0, !dbg !37, !phasar.instruction.id !41, ID: 16
%call5 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 23
%tobool6 = icmp ne i32 %call5, 0, !dbg !55, !phasar.instruction.id !59, ID: 24
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 26
store i32 1, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !69, ID: 28
%2 = load i32, i32* %rc, align 4, !dbg !91, !phasar.instruction.id !92, ID: 40


