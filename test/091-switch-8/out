0 2018-Dec-31 15:54:39.163742 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-31 15:54:39.164163 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-31 15:54:39.164506 - [INFO] No configuration file is used.
3 2018-Dec-31 15:54:39.164582 - [INFO] Program options have been successfully parsed.
4 2018-Dec-31 15:54:39.164673 - [INFO] Check program options for logical errors.
5 2018-Dec-31 15:54:39.164762 - [INFO] Set-up IR database.
6 2018-Dec-31 15:54:39.171708 - [INFO] Constructed the analysis controller.
7 2018-Dec-31 15:54:39.171823 - [INFO] Found the following IR files for this project: 
8 2018-Dec-31 15:54:39.171884 - [INFO] 	main.ll
9 2018-Dec-31 15:54:39.171943 - [INFO] Check for chosen entry points.
10 2018-Dec-31 15:54:39.172005 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-31 15:54:39.172063 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-31 15:54:39.172124 - [INFO] Preprocess module: main.ll
13 2018-Dec-31 15:54:39.172461 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-31 15:54:39.172621 - [INFO] Running ValueAnnotationPass
15 2018-Dec-31 15:54:39.173129 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-31 15:54:39.173195 - [INFO] Allocated Types    : 1
17 2018-Dec-31 15:54:39.173259 - [INFO] Allocation Sites   : 8
18 2018-Dec-31 15:54:39.173316 - [INFO] Basic Blocks       : 9
19 2018-Dec-31 15:54:39.173373 - [INFO] Calls Sites        : 8
20 2018-Dec-31 15:54:39.173431 - [INFO] Functions          : 3
21 2018-Dec-31 15:54:39.173488 - [INFO] Globals            : 1
22 2018-Dec-31 15:54:39.173545 - [INFO] Global Pointer     : 1
23 2018-Dec-31 15:54:39.173602 - [INFO] Instructions       : 37
24 2018-Dec-31 15:54:39.173659 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-31 15:54:39.173716 - [INFO] Store Instructions : 8
26 2018-Dec-31 15:54:39.173773 - [INFO]  
27 2018-Dec-31 15:54:39.173846 - [INFO]   i32
28 2018-Dec-31 15:54:39.174594 - [DEBUG] Analyzing function: main
29 2018-Dec-31 15:54:39.175070 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-31 15:54:39.175140 - [INFO] Construct type hierarchy
31 2018-Dec-31 15:54:39.175200 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-31 15:54:39.175425 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-31 15:54:39.175498 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-31 15:54:39.175562 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-31 15:54:39.175692 - [DEBUG] Walking in function: main
36 2018-Dec-31 15:54:39.175782 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 10
37 2018-Dec-31 15:54:39.176288 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-31 15:54:39.176349 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-31 15:54:39.176438 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-31 15:54:39.176501 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-31 15:54:39.176565 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %untainted, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27, ID: 11
42 2018-Dec-31 15:54:39.176912 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-31 15:54:39.176971 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-31 15:54:39.177045 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-31 15:54:39.177107 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-31 15:54:39.177170 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30, ID: 12
47 2018-Dec-31 15:54:39.177512 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-31 15:54:39.177570 - [DEBUG] Target name: llvm.dbg.declare
49 2018-Dec-31 15:54:39.177644 - [DEBUG] Walking in function: llvm.dbg.declare
50 2018-Dec-31 15:54:39.177706 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2018-Dec-31 15:54:39.177770 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
52 2018-Dec-31 15:54:39.178178 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-31 15:54:39.178238 - [DEBUG] Target name: getenv
54 2018-Dec-31 15:54:39.178318 - [DEBUG] Walking in function: getenv
55 2018-Dec-31 15:54:39.178380 - [DEBUG] Function already visited or only declaration: getenv
56 2018-Dec-31 15:54:39.178445 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
57 2018-Dec-31 15:54:39.178787 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-31 15:54:39.178846 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-31 15:54:39.178920 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-31 15:54:39.178983 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-31 15:54:39.179047 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
62 2018-Dec-31 15:54:39.179387 - [DEBUG] Found 1 possible target(s)
63 2018-Dec-31 15:54:39.179446 - [DEBUG] Target name: llvm.dbg.declare
64 2018-Dec-31 15:54:39.179537 - [DEBUG] Walking in function: llvm.dbg.declare
65 2018-Dec-31 15:54:39.179600 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2018-Dec-31 15:54:39.179663 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66, ID: 29
67 2018-Dec-31 15:54:39.180004 - [DEBUG] Found 1 possible target(s)
68 2018-Dec-31 15:54:39.180063 - [DEBUG] Target name: llvm.dbg.declare
69 2018-Dec-31 15:54:39.180137 - [DEBUG] Walking in function: llvm.dbg.declare
70 2018-Dec-31 15:54:39.180199 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
71 2018-Dec-31 15:54:39.180263 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75, ID: 33
72 2018-Dec-31 15:54:39.180604 - [DEBUG] Found 1 possible target(s)
73 2018-Dec-31 15:54:39.180663 - [DEBUG] Target name: llvm.dbg.declare
74 2018-Dec-31 15:54:39.180737 - [DEBUG] Walking in function: llvm.dbg.declare
75 2018-Dec-31 15:54:39.180799 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
76 2018-Dec-31 15:54:39.180861 - [INFO] Call graph has been constructed
77 2018-Dec-31 15:54:39.180923 - [INFO] Performing analysis: plugin
78 2018-Dec-31 15:54:39.180990 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
79 2018-Dec-31 15:54:39.181475 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %untainted = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a3 = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a5 = alloca i32, align 4, !phasar.instruction.id !18
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a7 = alloca i32, align 4, !phasar.instruction.id !19
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !20
Got store instruction
Removing memory location
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %untainted, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
=============

Adding line: 10

  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
=============

Adding line: 10
Adding line: 10

  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
=============

Adding line: 10
Adding line: 10
Adding line: 11

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 11

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 11

  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 11

  br label %sw.bb, !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 11

  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

  br label %sw.bb2, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22

  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22

  br label %sw.epilog, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22

  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22
Adding line: 25

  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  br label %sw.epilog4, !dbg !62, !phasar.instruction.id !63
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  store i32 0, i32* %a5, align 4, !dbg !65, !phasar.instruction.id !67
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  %2 = load i32, i32* %untainted, align 4, !dbg !68, !phasar.instruction.id !69
Got load instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
Got switch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
Got switch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  store i32 0, i32* %a7, align 4, !dbg !74, !phasar.instruction.id !76
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

  br label %sw.epilog8, !dbg !77, !phasar.instruction.id !78
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  %3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
  %3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80
=============

Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25
Adding line: 37

  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
=============


  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
=============


  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  br label %sw.bb, !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
=============


  br label %sw.bb2, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
=============


  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
=============


  br label %sw.epilog, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
=============


  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
=============


  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  br label %sw.epilog4, !dbg !62, !phasar.instruction.id !63
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  store i32 0, i32* %a5, align 4, !dbg !65, !phasar.instruction.id !67
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  %2 = load i32, i32* %untainted, align 4, !dbg !68, !phasar.instruction.id !69
Got load instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
Got switch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
Got switch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  %3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
  %3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80
=============


  call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  store i32 0, i32* %a7, align 4, !dbg !74, !phasar.instruction.id !76
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  br label %sw.epilog8, !dbg !77, !phasar.instruction.id !78
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %untainted = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49

  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40

  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
Got store instruction
Removing memory location
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !20
Got store instruction
Removing memory location

  %a7 = alloca i32, align 4, !phasar.instruction.id !19
Got operands checking instruction (alloca)

  %a5 = alloca i32, align 4, !phasar.instruction.id !18
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %a3 = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %untainted, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24
Got call instruction

  %taint = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
Got load instruction
Adding load instruction fact

  br label %sw.bb, !dbg !41, !phasar.instruction.id !42

  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
Got switch instruction
Adding switch instruction fact

  br label %sw.bb2, !dbg !50, !phasar.instruction.id !51

  %2 = load i32, i32* %untainted, align 4, !dbg !68, !phasar.instruction.id !69
Got load instruction

  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46

  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54

  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55

  br label %sw.epilog, !dbg !56, !phasar.instruction.id !57

  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60

  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61

  br label %sw.epilog4, !dbg !62, !phasar.instruction.id !63

  call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66
Got call instruction

  store i32 0, i32* %a5, align 4, !dbg !65, !phasar.instruction.id !67
Got store instruction
Removing memory location

  %3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80
Got load instruction
Adding load instruction fact

  br label %sw.epilog8, !dbg !77, !phasar.instruction.id !78
Got branch instruction

  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
Got switch instruction

  call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75
Got call instruction

  store i32 0, i32* %a7, align 4, !dbg !74, !phasar.instruction.id !76
Got store instruction
Removing memory location

  ret i32 %3, !dbg !81, !phasar.instruction.id !82worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 27
worklist size: 27
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%untainted = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
Facts:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !20, ID: 9
Facts:
	EMPTY


Instruction:
%a7 = alloca i32, align 4, !phasar.instruction.id !19, ID: 8
Facts:
	EMPTY


Instruction:
%a5 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%a3 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30, ID: 12
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %untainted, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27, ID: 11
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 10
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13


Instruction:
br label %sw.bb, !dbg !41, !phasar.instruction.id !42, ID: 18
Facts:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15


Instruction:
br label %sw.bb2, !dbg !50, !phasar.instruction.id !51, ID: 22
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
%2 = load i32, i32* %untainted, align 4, !dbg !68, !phasar.instruction.id !69, ID: 31
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46, ID: 20
Facts:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23


Instruction:
br label %sw.epilog, !dbg !56, !phasar.instruction.id !57, ID: 25
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24


Instruction:
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24


Instruction:
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26


Instruction:
br label %sw.epilog4, !dbg !62, !phasar.instruction.id !63, ID: 28
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66, ID: 29
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
store i32 0, i32* %a5, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
%3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80, ID: 36
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
br label %sw.epilog8, !dbg !77, !phasar.instruction.id !78, ID: 35
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71, ID: 32
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75, ID: 33
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.inst80 2018-Dec-31 15:54:39.392279 - [INFO] Write results to file
81 2018-Dec-31 15:54:39.392478 - [INFO] Shutdown llvm and the analysis framework.

ruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
store i32 0, i32* %a7, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
ret i32 %3, !dbg !81, !phasar.instruction.id !82, ID: 37
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27
%3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80, ID: 36


