0 2018-Dec-28 10:34:00.582973 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 10:34:00.583412 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 10:34:00.583765 - [INFO] No configuration file is used.
3 2018-Dec-28 10:34:00.583842 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 10:34:00.583943 - [INFO] Check program options for logical errors.
5 2018-Dec-28 10:34:00.584065 - [INFO] Set-up IR database.
6 2018-Dec-28 10:34:00.591464 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 10:34:00.591586 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 10:34:00.591647 - [INFO] 	main.ll
9 2018-Dec-28 10:34:00.591707 - [INFO] Check for chosen entry points.
10 2018-Dec-28 10:34:00.591877 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 10:34:00.591936 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 10:34:00.591997 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 10:34:00.592418 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 10:34:00.592589 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 10:34:00.593083 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 10:34:00.593147 - [INFO] Allocated Types    : 1
17 2018-Dec-28 10:34:00.593212 - [INFO] Allocation Sites   : 8
18 2018-Dec-28 10:34:00.593270 - [INFO] Basic Blocks       : 9
19 2018-Dec-28 10:34:00.593328 - [INFO] Calls Sites        : 8
20 2018-Dec-28 10:34:00.593385 - [INFO] Functions          : 3
21 2018-Dec-28 10:34:00.593443 - [INFO] Globals            : 1
22 2018-Dec-28 10:34:00.593501 - [INFO] Global Pointer     : 1
23 2018-Dec-28 10:34:00.593558 - [INFO] Instructions       : 37
24 2018-Dec-28 10:34:00.593616 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 10:34:00.593674 - [INFO] Store Instructions : 8
26 2018-Dec-28 10:34:00.593731 - [INFO]  
27 2018-Dec-28 10:34:00.593807 - [INFO]   i32
28 2018-Dec-28 10:34:00.594618 - [DEBUG] Analyzing function: main
29 2018-Dec-28 10:34:00.595233 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 10:34:00.595301 - [INFO] Construct type hierarchy
31 2018-Dec-28 10:34:00.595364 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 10:34:00.595576 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 10:34:00.595647 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 10:34:00.595709 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 10:34:00.595833 - [DEBUG] Walking in function: main
36 2018-Dec-28 10:34:00.595921 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 10
37 2018-Dec-28 10:34:00.596350 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 10:34:00.596410 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 10:34:00.596497 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 10:34:00.596561 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 10:34:00.596625 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %untainted, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27, ID: 11
42 2018-Dec-28 10:34:00.596970 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 10:34:00.597029 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-28 10:34:00.597103 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-28 10:34:00.597165 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-28 10:34:00.597229 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30, ID: 12
47 2018-Dec-28 10:34:00.597612 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 10:34:00.597671 - [DEBUG] Target name: llvm.dbg.declare
49 2018-Dec-28 10:34:00.597746 - [DEBUG] Walking in function: llvm.dbg.declare
50 2018-Dec-28 10:34:00.597808 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2018-Dec-28 10:34:00.597871 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
52 2018-Dec-28 10:34:00.598362 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 10:34:00.598422 - [DEBUG] Target name: getenv
54 2018-Dec-28 10:34:00.598503 - [DEBUG] Walking in function: getenv
55 2018-Dec-28 10:34:00.598566 - [DEBUG] Function already visited or only declaration: getenv
56 2018-Dec-28 10:34:00.598631 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
57 2018-Dec-28 10:34:00.598975 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-28 10:34:00.599034 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-28 10:34:00.599109 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-28 10:34:00.599172 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-28 10:34:00.599236 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
62 2018-Dec-28 10:34:00.599577 - [DEBUG] Found 1 possible target(s)
63 2018-Dec-28 10:34:00.599637 - [DEBUG] Target name: llvm.dbg.declare
64 2018-Dec-28 10:34:00.599711 - [DEBUG] Walking in function: llvm.dbg.declare
65 2018-Dec-28 10:34:00.599774 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2018-Dec-28 10:34:00.599838 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66, ID: 29
67 2018-Dec-28 10:34:00.600179 - [DEBUG] Found 1 possible target(s)
68 2018-Dec-28 10:34:00.600238 - [DEBUG] Target name: llvm.dbg.declare
69 2018-Dec-28 10:34:00.600313 - [DEBUG] Walking in function: llvm.dbg.declare
70 2018-Dec-28 10:34:00.600375 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
71 2018-Dec-28 10:34:00.600440 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75, ID: 33
72 2018-Dec-28 10:34:00.600806 - [DEBUG] Found 1 possible target(s)
73 2018-Dec-28 10:34:00.600866 - [DEBUG] Target name: llvm.dbg.declare
74 2018-Dec-28 10:34:00.600941 - [DEBUG] Walking in function: llvm.dbg.declare
75 2018-Dec-28 10:34:00.601003 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
76 2018-Dec-28 10:34:00.601065 - [INFO] Call graph has been constructed
77 2018-Dec-28 10:34:00.601127 - [INFO] Performing analysis: plugin
78 2018-Dec-28 10:34:00.601272 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
79 2018-Dec-28 10:34:00.601845 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %untainted = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !16
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a3 = alloca i32, align 4, !phasar.instruction.id !17
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a5 = alloca i32, align 4, !phasar.instruction.id !18
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a7 = alloca i32, align 4, !phasar.instruction.id !19
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !20
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %untainted, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 10

flow()
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 10
Adding line: 10

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 10
Adding line: 10
Adding line: 11

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 11

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 11

flow()
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 11

flow()
  br label %sw.bb, !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 5
join()
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 11

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

flow()
  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

flow()
  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

flow()
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

flow()
  br label %sw.bb2, !dbg !50, !phasar.instruction.id !51
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 7
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22

flow()
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22

flow()
  br label %sw.epilog, !dbg !56, !phasar.instruction.id !57
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22

flow()
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22
Adding line: 25

flow()
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 11
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  br label %sw.epilog4, !dbg !62, !phasar.instruction.id !63
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 11
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 11
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  store i32 0, i32* %a5, align 4, !dbg !65, !phasar.instruction.id !67
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  %2 = load i32, i32* %untainted, align 4, !dbg !68, !phasar.instruction.id !69
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  store i32 0, i32* %a7, align 4, !dbg !74, !phasar.instruction.id !76
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25

flow()
  br label %sw.epilog8, !dbg !77, !phasar.instruction.id !78
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  %3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 11
join()
Adding line: 19
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 16
Adding line: 22
Adding line: 22
Adding line: 25
Adding line: 25
Adding line: 37

flow()
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 5
New Facts: 4

flow()
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br label %sw.bb, !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 6

flow()
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  br label %sw.bb2, !dbg !50, !phasar.instruction.id !51
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  br label %sw.epilog, !dbg !56, !phasar.instruction.id !57
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
===========================
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
===========================
sqSubSetEqual()
Old Facts: 11
New Facts: 11

flow()
  br label %sw.epilog4, !dbg !62, !phasar.instruction.id !63
===========================
sqSubSetEqual()
Old Facts: 11
New Facts: 11

flow()
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  store i32 0, i32* %a5, align 4, !dbg !65, !phasar.instruction.id !67
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  %2 = load i32, i32* %untainted, align 4, !dbg !68, !phasar.instruction.id !69
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  %3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 11
New Facts: 11

flow()
  call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  store i32 0, i32* %a7, align 4, !dbg !74, !phasar.instruction.id !76
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  br label %sw.epilog8, !dbg !77, !phasar.instruction.id !78
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 10
New Facts: 10

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  %untainted = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49
===========================

flow()
  store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40
===========================

flow()
  store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33
===========================
Got store instruction
Adding store instruction

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
===========================
Got call instruction
Adding call instruction fact

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !20
===========================
Got store instruction

flow()
  %a7 = alloca i32, align 4, !phasar.instruction.id !19
===========================
Got operands checking instruction (alloca)

flow()
  %a5 = alloca i32, align 4, !phasar.instruction.id !18
===========================
Got operands checking instruction (alloca)

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !16
===========================
Got operands checking instruction (alloca)

flow()
  %a3 = alloca i32, align 4, !phasar.instruction.id !17
===========================
Got operands checking instruction (alloca)

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30
===========================
Got call instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %untainted, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27
===========================
Got call instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br label %sw.bb, !dbg !41, !phasar.instruction.id !42
===========================

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37
===========================
Got switch instruction
Adding switch instruction fact

flow()
  br label %sw.bb2, !dbg !50, !phasar.instruction.id !51
===========================

flow()
  %2 = load i32, i32* %untainted, align 4, !dbg !68, !phasar.instruction.id !69
===========================
Got operands checking instruction (load)

flow()
  switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46
===========================

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54
===========================

flow()
  store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55
===========================

flow()
  br label %sw.epilog, !dbg !56, !phasar.instruction.id !57
===========================

flow()
  call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60
===========================

flow()
  store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61
===========================

flow()
  br label %sw.epilog4, !dbg !62, !phasar.instruction.id !63
===========================

flow()
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66
===========================
Got call instruction

flow()
  store i32 0, i32* %a5, align 4, !dbg !65, !phasar.instruction.id !67
===========================
Got store instruction

flow()
  %3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br label %sw.epilog8, !dbg !77, !phasar.instruction.id !78
===========================
Got branch instruction

flow()
  switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71
===========================
Got switch instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75
===========================
Got call instruction

flow()
  store i32 0, i32* %a7, align 4, !dbg !74, !phasar.instruction.id !76
===========================
Got store instruction

flow()
  ret i32 %3, !dbg !81, !phasar.instruction.id !82worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 27
worklist size: 27
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%untainted = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
Facts:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !20, ID: 9
Facts:
	EMPTY


Instruction:
%a7 = alloca i32, align 4, !phasar.instruction.id !19, ID: 8
Facts:
	EMPTY


Instruction:
%a5 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%a3 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30, ID: 12
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %untainted, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27, ID: 11
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 10
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13


Instruction:
br label %sw.bb, !dbg !41, !phasar.instruction.id !42, ID: 18
Facts:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15


Instruction:
br label %sw.bb2, !dbg !50, !phasar.instruction.id !51, ID: 22
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
%2 = load i32, i32* %untainted, align 4, !dbg !68, !phasar.instruction.id !69, ID: 31
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !45, !phasar.instruction.id !46, ID: 20
Facts:
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16


Instruction:
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23


Instruction:
br label %sw.epilog, !dbg !56, !phasar.instruction.id !57, ID: 25
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24


Instruction:
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24


Instruction:
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26


Instruction:
br label %sw.epilog4, !dbg !62, !phasar.instruction.id !63, ID: 28
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
call void @llvm.dbg.declare(metadata i32* %a5, metadata !64, metadata !22), !dbg !65, !phasar.instruction.id !66, ID: 29
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !36, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
store i32 0, i32* %a5, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
%3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80, ID: 36
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
br label %sw.epilog8, !dbg !77, !phasar.instruction.id !78, ID: 35
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !70, !phasar.instruction.id !71, ID: 32
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
call void @llvm.dbg.declare(metadata i32* %a7, metadata !72, metadata !22), !dbg !74, !phasar.instruction.id !75, ID: 33
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.inst80 2018-Dec-28 10:34:00.699793 - [INFO] Write results to file
81 2018-Dec-28 10:34:00.699994 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
ruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
store i32 0, i32* %a7, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27


Instruction:
ret i32 %3, !dbg !81, !phasar.instruction.id !82, ID: 37
Facts:
store i32 1, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
store i32 1, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !40, ID: 17
store i32 %call, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !33, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !34, !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 19
call void @llvm.dbg.declare(metadata i32* %a, metadata !52, metadata !22), !dbg !53, !phasar.instruction.id !54, ID: 23
store i32 1, i32* %a, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
call void @llvm.dbg.declare(metadata i32* %a3, metadata !58, metadata !22), !dbg !59, !phasar.instruction.id !60, ID: 26
store i32 1, i32* %a3, align 4, !dbg !59, !phasar.instruction.id !61, ID: 27
%3 = load i32, i32* %rc, align 4, !dbg !79, !phasar.instruction.id !80, ID: 36


