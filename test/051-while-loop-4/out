0 2018-Dec-29 12:16:18.760856 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-29 12:16:18.761286 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-29 12:16:18.761680 - [INFO] No configuration file is used.
3 2018-Dec-29 12:16:18.761758 - [INFO] Program options have been successfully parsed.
4 2018-Dec-29 12:16:18.761859 - [INFO] Check program options for logical errors.
5 2018-Dec-29 12:16:18.761949 - [INFO] Set-up IR database.
6 2018-Dec-29 12:16:18.767093 - [INFO] Constructed the analysis controller.
7 2018-Dec-29 12:16:18.767214 - [INFO] Found the following IR files for this project: 
8 2018-Dec-29 12:16:18.767276 - [INFO] 	main.ll
9 2018-Dec-29 12:16:18.767334 - [INFO] Check for chosen entry points.
10 2018-Dec-29 12:16:18.767395 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-29 12:16:18.767453 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-29 12:16:18.767513 - [INFO] Preprocess module: main.ll
13 2018-Dec-29 12:16:18.767858 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-29 12:16:18.767985 - [INFO] Running ValueAnnotationPass
15 2018-Dec-29 12:16:18.768379 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-29 12:16:18.768446 - [INFO] Allocated Types    : 1
17 2018-Dec-29 12:16:18.768511 - [INFO] Allocation Sites   : 2
18 2018-Dec-29 12:16:18.768568 - [INFO] Basic Blocks       : 7
19 2018-Dec-29 12:16:18.768626 - [INFO] Calls Sites        : 3
20 2018-Dec-29 12:16:18.768684 - [INFO] Functions          : 4
21 2018-Dec-29 12:16:18.768741 - [INFO] Globals            : 1
22 2018-Dec-29 12:16:18.768799 - [INFO] Global Pointer     : 1
23 2018-Dec-29 12:16:18.768856 - [INFO] Instructions       : 19
24 2018-Dec-29 12:16:18.768913 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-29 12:16:18.768970 - [INFO] Store Instructions : 4
26 2018-Dec-29 12:16:18.769027 - [INFO]  
27 2018-Dec-29 12:16:18.769109 - [INFO]   i32
28 2018-Dec-29 12:16:18.769575 - [DEBUG] Analyzing function: main
29 2018-Dec-29 12:16:18.769821 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-29 12:16:18.769885 - [INFO] Construct type hierarchy
31 2018-Dec-29 12:16:18.769945 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-29 12:16:18.770117 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-29 12:16:18.770187 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-29 12:16:18.770249 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-29 12:16:18.770358 - [DEBUG] Walking in function: main
36 2018-Dec-29 12:16:18.770444 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
37 2018-Dec-29 12:16:18.770781 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-29 12:16:18.770841 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-29 12:16:18.770928 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-29 12:16:18.770991 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-29 12:16:18.771055 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
42 2018-Dec-29 12:16:18.771362 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-29 12:16:18.771463 - [DEBUG] Target name: getenv
44 2018-Dec-29 12:16:18.771545 - [DEBUG] Walking in function: getenv
45 2018-Dec-29 12:16:18.771607 - [DEBUG] Function already visited or only declaration: getenv
46 2018-Dec-29 12:16:18.771671 - [DEBUG] Found static call-site: %call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
47 2018-Dec-29 12:16:18.771923 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-29 12:16:18.771982 - [DEBUG] Target name: foo
49 2018-Dec-29 12:16:18.772058 - [DEBUG] Walking in function: foo
50 2018-Dec-29 12:16:18.772120 - [DEBUG] Function already visited or only declaration: foo
51 2018-Dec-29 12:16:18.772183 - [INFO] Call graph has been constructed
52 2018-Dec-29 12:16:18.772245 - [INFO] Performing analysis: plugin
53 2018-Dec-29 12:16:18.772329 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
54 2018-Dec-29 12:16:18.772824 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction

  br label %while.cond, !dbg !19, !phasar.instruction.id !20
Got branch instruction

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
Got call instruction
Adding call instruction fact
Adding line: 9

  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Adding line: 9
Adding line: 9

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Adding line: 9
Adding line: 9
Adding line: 9

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Adding line: 9
Adding line: 9
Adding line: 9

  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9

  br label %while.cond1, !dbg !28, !phasar.instruction.id !29
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9

  %call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Adding line: 14
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44
Adding line: 14
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction
Adding line: 9
Adding line: 9

  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact

  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction

  br label %while.cond1, !dbg !28, !phasar.instruction.id !29

  %call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39

  %call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22

  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction
Adding load instruction fact
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 17
Adding line: 9
Adding line: 11
Adding line: 11

  br label %while.cond1, !dbg !28, !phasar.instruction.id !29
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  %call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41

  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  br label %while.cond, !dbg !19, !phasar.instruction.id !20
Got branch instruction

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36

  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction
Adding load instruction fact

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24

  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23

  br label %while.cond1, !dbg !28, !phasar.instruction.id !29

  %call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32

  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33

  ret i32 %0, !dbg !47, !phasar.instruction.id !48worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 15
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 10
worklist size: 11
worklist size: 11
worklist size: 11
worklist size: 10
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
br label %while.cond, !dbg !19, !phasar.instruction.id !20, ID: 5
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46, ID: 18
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br label %while.cond1, !dbg !28, !phasar.instruction.id !29, ID: 10
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39, ID: 15
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44, ID: 17
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
ret i32 %0, !dbg !47, !phasar.instruction.id !48, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
store i32 42, i32* %rc,55 2018-Dec-29 12:16:18.814694 - [INFO] Write results to file
56 2018-Dec-29 12:16:18.814944 - [INFO] Shutdown llvm and the analysis framework.

 align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6
%0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46, ID: 18
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
%call2 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


