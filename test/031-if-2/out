0 2018-Dec-29 12:16:14.579741 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-29 12:16:14.580153 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-29 12:16:14.580510 - [INFO] No configuration file is used.
3 2018-Dec-29 12:16:14.580586 - [INFO] Program options have been successfully parsed.
4 2018-Dec-29 12:16:14.580685 - [INFO] Check program options for logical errors.
5 2018-Dec-29 12:16:14.580775 - [INFO] Set-up IR database.
6 2018-Dec-29 12:16:14.585932 - [INFO] Constructed the analysis controller.
7 2018-Dec-29 12:16:14.586046 - [INFO] Found the following IR files for this project: 
8 2018-Dec-29 12:16:14.586108 - [INFO] 	main.ll
9 2018-Dec-29 12:16:14.586167 - [INFO] Check for chosen entry points.
10 2018-Dec-29 12:16:14.586228 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-29 12:16:14.586286 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-29 12:16:14.586346 - [INFO] Preprocess module: main.ll
13 2018-Dec-29 12:16:14.586697 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-29 12:16:14.586824 - [INFO] Running ValueAnnotationPass
15 2018-Dec-29 12:16:14.587162 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-29 12:16:14.587226 - [INFO] Allocated Types    : 2
17 2018-Dec-29 12:16:14.587290 - [INFO] Allocation Sites   : 4
18 2018-Dec-29 12:16:14.587347 - [INFO] Basic Blocks       : 3
19 2018-Dec-29 12:16:14.587404 - [INFO] Calls Sites        : 4
20 2018-Dec-29 12:16:14.587462 - [INFO] Functions          : 3
21 2018-Dec-29 12:16:14.587519 - [INFO] Globals            : 1
22 2018-Dec-29 12:16:14.587576 - [INFO] Global Pointer     : 1
23 2018-Dec-29 12:16:14.587633 - [INFO] Instructions       : 19
24 2018-Dec-29 12:16:14.587690 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-29 12:16:14.587748 - [INFO] Store Instructions : 4
26 2018-Dec-29 12:16:14.587805 - [INFO]  
27 2018-Dec-29 12:16:14.587884 - [INFO]   i32
28 2018-Dec-29 12:16:14.587946 - [INFO]   i8*
29 2018-Dec-29 12:16:14.588466 - [DEBUG] Analyzing function: main
30 2018-Dec-29 12:16:14.589307 - [INFO] Reconstruct the class hierarchy.
31 2018-Dec-29 12:16:14.589382 - [INFO] Construct type hierarchy
32 2018-Dec-29 12:16:14.589443 - [DEBUG] Analyse types in module: main.ll
33 2018-Dec-29 12:16:14.589605 - [DEBUG] Reconstruct virtual function table for module: main.ll
34 2018-Dec-29 12:16:14.589673 - [INFO] Reconstruction of class hierarchy completed.
35 2018-Dec-29 12:16:14.589736 - [INFO] Starting CallGraphAnalysisType: OTF
36 2018-Dec-29 12:16:14.589860 - [DEBUG] Walking in function: main
37 2018-Dec-29 12:16:14.589947 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i8** %taint, metadata !17, metadata !20), !dbg !21, !phasar.instruction.id !22, ID: 6
38 2018-Dec-29 12:16:14.590269 - [DEBUG] Found 1 possible target(s)
39 2018-Dec-29 12:16:14.590329 - [DEBUG] Target name: llvm.dbg.declare
40 2018-Dec-29 12:16:14.590411 - [DEBUG] Walking in function: llvm.dbg.declare
41 2018-Dec-29 12:16:14.590474 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
42 2018-Dec-29 12:16:14.590538 - [DEBUG] Found static call-site: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
43 2018-Dec-29 12:16:14.590851 - [DEBUG] Found 1 possible target(s)
44 2018-Dec-29 12:16:14.590910 - [DEBUG] Target name: getenv
45 2018-Dec-29 12:16:14.590993 - [DEBUG] Walking in function: getenv
46 2018-Dec-29 12:16:14.591055 - [DEBUG] Function already visited or only declaration: getenv
47 2018-Dec-29 12:16:14.591118 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %ret, metadata !26, metadata !20), !dbg !27, !phasar.instruction.id !28, ID: 9
48 2018-Dec-29 12:16:14.591378 - [DEBUG] Found 1 possible target(s)
49 2018-Dec-29 12:16:14.591477 - [DEBUG] Target name: llvm.dbg.declare
50 2018-Dec-29 12:16:14.591553 - [DEBUG] Walking in function: llvm.dbg.declare
51 2018-Dec-29 12:16:14.591615 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
52 2018-Dec-29 12:16:14.591697 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38, ID: 13
53 2018-Dec-29 12:16:14.591954 - [DEBUG] Found 1 possible target(s)
54 2018-Dec-29 12:16:14.592013 - [DEBUG] Target name: llvm.dbg.declare
55 2018-Dec-29 12:16:14.592087 - [DEBUG] Walking in function: llvm.dbg.declare
56 2018-Dec-29 12:16:14.592149 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
57 2018-Dec-29 12:16:14.592212 - [INFO] Call graph has been constructed
58 2018-Dec-29 12:16:14.592274 - [INFO] Performing analysis: plugin
59 2018-Dec-29 12:16:14.592340 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
60 2018-Dec-29 12:16:14.592830 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %taint = alloca i8*, align 8, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %ret = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction

  call void @llvm.dbg.declare(metadata i8** %taint, metadata !17, metadata !20), !dbg !21, !phasar.instruction.id !22
Got call instruction

  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24
Got call instruction
Adding call instruction fact
Adding line: 10

  store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25
Got store instruction
Adding store instruction
Adding line: 10
Adding line: 10

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !26, metadata !20), !dbg !27, !phasar.instruction.id !28
Got call instruction
Adding line: 10
Adding line: 10

  %0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact
Adding line: 10
Adding line: 10
Adding line: 13

  %tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13

  br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding conditional branch instruction fact
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 13

  br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding conditional branch instruction fact
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 13

  call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 13

  store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 13

  %1 = load i32, i32* %a, align 4, !dbg !40, !phasar.instruction.id !41
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 15
Adding line: 13

  store i32 %1, i32* %ret, align 4, !dbg !42, !phasar.instruction.id !43
Adding line: 15
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 15
Adding line: 13

  br label %if.end, !dbg !44, !phasar.instruction.id !45
Adding line: 15
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 15
Adding line: 13

  %2 = load i32, i32* %ret, align 4, !dbg !46, !phasar.instruction.id !47
Got load instruction
Adding load instruction fact
Adding line: 15
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 15
Adding line: 18

  store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25
Got store instruction
Adding store instruction

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !26, metadata !20), !dbg !27, !phasar.instruction.id !28
Got call instruction

  %0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact

  %tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact

  br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding conditional branch instruction fact

  br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding conditional branch instruction fact

  call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38

  %2 = load i32, i32* %ret, align 4, !dbg !46, !phasar.instruction.id !47
Got load instruction
Adding load instruction fact

  store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39

  %1 = load i32, i32* %a, align 4, !dbg !40, !phasar.instruction.id !41

  store i32 %1, i32* %ret, align 4, !dbg !42, !phasar.instruction.id !43

  br label %if.end, !dbg !44, !phasar.instruction.id !45

  %2 = load i32, i32* %ret, align 4, !dbg !46, !phasar.instruction.id !47
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i8** %taint, metadata !17, metadata !20), !dbg !21, !phasar.instruction.id !22
Got call instruction

  %taint = alloca i8*, align 8, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %ret = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 %1, i32* %ret, align 4, !dbg !42, !phasar.instruction.id !43

  store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39

  store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25
Got store instruction
Adding store instruction

  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction

  %0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !26, metadata !20), !dbg !27, !phasar.instruction.id !28
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact

  %1 = load i32, i32* %a, align 4, !dbg !40, !phasar.instruction.id !41

  %2 = load i32, i32* %ret, align 4, !dbg !46, !phasar.instruction.id !47
Got load instruction
Adding load instruction fact

  br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding conditional branch instruction fact

  br label %if.end, !dbg !44, !phasar.instruction.id !45

  ret i32 %2, !dbg !48, !phasar.instruction.id !49worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i8** %taint, metadata !17, metadata !20), !dbg !21, !phasar.instruction.id !22, ID: 6
Facts:
	EMPTY


Instruction:
%taint = alloca i8*, align 8, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%ret = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %ret, align 4, !dbg !42, !phasar.instruction.id !43, ID: 16
Facts:
store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11
%1 = load i32, i32* %a, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34, ID: 12


Instruction:
store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
Facts:
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11
br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34, ID: 12


Instruction:
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
Facts:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7


Instruction:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
Facts:
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7


Instruction:
call void @llvm.dbg.declare(metadata i32* %ret, metadata !26, metadata !20), !dbg !27, !phasar.instruction.id !28, ID: 9
Facts:
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38, ID: 13
Facts:
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11
br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34, ID: 12


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11
Facts:
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10


Instruction:
%1 = load i32, i32* %a, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
Facts:
store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11
br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34, ID: 12


Instruction:
%2 = load i32, i32* %ret, align 4, !dbg !46, !phasar.instruction.id !47, ID: 18
Facts:
store i32 %1, i32* %ret, align 4, !dbg !42, !phasar.instruction.id !43, ID: 16
store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11
%1 = load i32, i32* %a, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34, ID: 12


Instruction:
br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34, ID: 12
Facts:
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11


Instruction:
br label %if.end, !dbg !44, !phasar.instruction.id !45, ID: 17
Facts:
store i32 %1, i32* %ret, align 4, !dbg !42, !phasar.instruction.id !43, ID: 16
store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11
%1 = load i32, i32* %a, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
br i1 %tobool, label %if.then, label %if.end, !dbg !33, !phasar.instruction.id !34, ID: 12


Instruction:
ret i32 %2, !dbg !48, !phasar.instruction.id !49, ID: 19
Facts:
store i32 %1, i32* %ret, align 4, !dbg !42, !phas61 2018-Dec-29 12:16:14.620392 - [INFO] Write results to file
62 2018-Dec-29 12:16:14.620575 - [INFO] Shutdown llvm and the analysis framework.

ar.instruction.id !43, ID: 16
store i32 42, i32* %a, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !21, !phasar.instruction.id !25, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !23, !phasar.instruction.id !24, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !31, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !20), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i8* %0, null, !dbg !29, !phasar.instruction.id !32, ID: 11
%1 = load i32, i32* %a, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
%2 = load i32, i32* %ret, align 4, !dbg !46, !phasar.instruction.id !47, ID: 18


