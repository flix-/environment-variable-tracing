0 2018-Dec-28 12:41:17.966719 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 12:41:17.967155 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 12:41:17.967499 - [INFO] No configuration file is used.
3 2018-Dec-28 12:41:17.967576 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 12:41:17.967667 - [INFO] Check program options for logical errors.
5 2018-Dec-28 12:41:17.967757 - [INFO] Set-up IR database.
6 2018-Dec-28 12:41:17.974721 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 12:41:17.974846 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 12:41:17.974906 - [INFO] 	main.ll
9 2018-Dec-28 12:41:17.974964 - [INFO] Check for chosen entry points.
10 2018-Dec-28 12:41:17.975025 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 12:41:17.975083 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 12:41:17.975211 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 12:41:17.975573 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 12:41:17.975725 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 12:41:17.976117 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 12:41:17.976180 - [INFO] Allocated Types    : 3
17 2018-Dec-28 12:41:17.976245 - [INFO] Allocation Sites   : 3
18 2018-Dec-28 12:41:17.976302 - [INFO] Basic Blocks       : 1
19 2018-Dec-28 12:41:17.976359 - [INFO] Calls Sites        : 3
20 2018-Dec-28 12:41:17.976416 - [INFO] Functions          : 3
21 2018-Dec-28 12:41:17.976473 - [INFO] Globals            : 2
22 2018-Dec-28 12:41:17.976530 - [INFO] Global Pointer     : 2
23 2018-Dec-28 12:41:17.976663 - [INFO] Instructions       : 30
24 2018-Dec-28 12:41:17.976720 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 12:41:17.976778 - [INFO] Store Instructions : 6
26 2018-Dec-28 12:41:17.976835 - [INFO]  
27 2018-Dec-28 12:41:17.976909 - [INFO]   i32
28 2018-Dec-28 12:41:17.976976 - [INFO]   %struct.a = type { i8*, %struct.b }
29 2018-Dec-28 12:41:17.977039 - [INFO]   i8*
30 2018-Dec-28 12:41:17.977652 - [DEBUG] Analyzing function: main
31 2018-Dec-28 12:41:17.986702 - [INFO] Reconstruct the class hierarchy.
32 2018-Dec-28 12:41:17.986813 - [INFO] Construct type hierarchy
33 2018-Dec-28 12:41:17.986875 - [DEBUG] Analyse types in module: main.ll
34 2018-Dec-28 12:41:17.987149 - [DEBUG] Reconstruct virtual function table for module: main.ll
35 2018-Dec-28 12:41:17.987322 - [INFO] Reconstruction of class hierarchy completed.
36 2018-Dec-28 12:41:17.987389 - [INFO] Starting CallGraphAnalysisType: OTF
37 2018-Dec-28 12:41:17.987831 - [DEBUG] Walking in function: main
38 2018-Dec-28 12:41:17.987921 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata %struct.a* %foo, metadata !17, metadata !30), !dbg !31, !phasar.instruction.id !32, ID: 6
39 2018-Dec-28 12:41:17.988355 - [DEBUG] Found 1 possible target(s)
40 2018-Dec-28 12:41:17.988415 - [DEBUG] Target name: llvm.dbg.declare
41 2018-Dec-28 12:41:17.988497 - [DEBUG] Walking in function: llvm.dbg.declare
42 2018-Dec-28 12:41:17.988560 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
43 2018-Dec-28 12:41:17.988623 - [DEBUG] Found static call-site: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
44 2018-Dec-28 12:41:17.989003 - [DEBUG] Found 1 possible target(s)
45 2018-Dec-28 12:41:17.989061 - [DEBUG] Target name: getenv
46 2018-Dec-28 12:41:17.989141 - [DEBUG] Walking in function: getenv
47 2018-Dec-28 12:41:17.989203 - [DEBUG] Function already visited or only declaration: getenv
48 2018-Dec-28 12:41:17.989267 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i8** %a4, metadata !50, metadata !30), !dbg !51, !phasar.instruction.id !52, ID: 16
49 2018-Dec-28 12:41:17.989598 - [DEBUG] Found 1 possible target(s)
50 2018-Dec-28 12:41:17.989657 - [DEBUG] Target name: llvm.dbg.declare
51 2018-Dec-28 12:41:17.989732 - [DEBUG] Walking in function: llvm.dbg.declare
52 2018-Dec-28 12:41:17.989794 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
53 2018-Dec-28 12:41:17.989889 - [INFO] Call graph has been constructed
54 2018-Dec-28 12:41:17.989953 - [INFO] Performing analysis: plugin
55 2018-Dec-28 12:41:17.990020 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
56 2018-Dec-28 12:41:17.990514 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %foo = alloca %struct.a, align 8, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a4 = alloca i8*, align 8, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata %struct.a* %foo, metadata !17, metadata !30), !dbg !31, !phasar.instruction.id !32
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 22

flow()
  %a = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !35, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 22

flow()
  store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 22
Adding line: 22

flow()
  %a1 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !39, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 22
Adding line: 22

flow()
  %0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %b = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %a2 = getelementptr inbounds %struct.b, %struct.b* %b, i32 0, i32 0, !dbg !44, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %a3 = getelementptr inbounds %struct.c, %struct.c* %a2, i32 0, i32 0, !dbg !46, !phasar.instruction.id !47
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  call void @llvm.dbg.declare(metadata i8** %a4, metadata !50, metadata !30), !dbg !51, !phasar.instruction.id !52
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %b5 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %a6 = getelementptr inbounds %struct.b, %struct.b* %b5, i32 0, i32 0, !dbg !55, !phasar.instruction.id !56
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %a7 = getelementptr inbounds %struct.c, %struct.c* %a6, i32 0, i32 0, !dbg !57, !phasar.instruction.id !58
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25

flow()
  store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  %b8 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !61, !phasar.instruction.id !62
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  %a9 = getelementptr inbounds %struct.b, %struct.b* %b8, i32 0, i32 0, !dbg !63, !phasar.instruction.id !64
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  %a10 = getelementptr inbounds %struct.c, %struct.c* %a9, i32 0, i32 0, !dbg !65, !phasar.instruction.id !66
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a10, align 8, !dbg !67, !phasar.instruction.id !68
===========================
Got store instruction
Removing store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  %b11 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !69, !phasar.instruction.id !70
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  %a12 = getelementptr inbounds %struct.b, %struct.b* %b11, i32 0, i32 0, !dbg !71, !phasar.instruction.id !72
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  %a13 = getelementptr inbounds %struct.c, %struct.c* %a12, i32 0, i32 0, !dbg !73, !phasar.instruction.id !74
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  %2 = load i8*, i8** %a13, align 8, !dbg !73, !phasar.instruction.id !75
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25
Adding line: 25

flow()
  store i8* %2, i8** %a4, align 8, !dbg !76, !phasar.instruction.id !77
===========================
Got store instruction
Removing store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 22
Adding line: 22
Adding line: 23
Adding line: 25

flow()
  %a = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !35, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 1
New Facts: 1

flow()
  store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %a1 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !39, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  %b = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  %a2 = getelementptr inbounds %struct.b, %struct.b* %b, i32 0, i32 0, !dbg !44, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  %a3 = getelementptr inbounds %struct.c, %struct.c* %a2, i32 0, i32 0, !dbg !46, !phasar.instruction.id !47
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  call void @llvm.dbg.declare(metadata i8** %a4, metadata !50, metadata !30), !dbg !51, !phasar.instruction.id !52
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %b5 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %a6 = getelementptr inbounds %struct.b, %struct.b* %b5, i32 0, i32 0, !dbg !55, !phasar.instruction.id !56
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %a7 = getelementptr inbounds %struct.c, %struct.c* %a6, i32 0, i32 0, !dbg !57, !phasar.instruction.id !58
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  %b8 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !61, !phasar.instruction.id !62
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  %a9 = getelementptr inbounds %struct.b, %struct.b* %b8, i32 0, i32 0, !dbg !63, !phasar.instruction.id !64
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  %a10 = getelementptr inbounds %struct.c, %struct.c* %a9, i32 0, i32 0, !dbg !65, !phasar.instruction.id !66
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a10, align 8, !dbg !67, !phasar.instruction.id !68
===========================
Got store instruction
Removing store instruction
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %b11 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !69, !phasar.instruction.id !70
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %a12 = getelementptr inbounds %struct.b, %struct.b* %b11, i32 0, i32 0, !dbg !71, !phasar.instruction.id !72
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %a13 = getelementptr inbounds %struct.c, %struct.c* %a12, i32 0, i32 0, !dbg !73, !phasar.instruction.id !74
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %2 = load i8*, i8** %a13, align 8, !dbg !73, !phasar.instruction.id !75
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  store i8* %2, i8** %a4, align 8, !dbg !76, !phasar.instruction.id !77
===========================
Got store instruction
Removing store instruction
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  call void @llvm.dbg.declare(metadata %struct.a* %foo, metadata !17, metadata !30), !dbg !31, !phasar.instruction.id !32
===========================
Got call instruction

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49
===========================
Got store instruction
Adding store instruction

flow()
  store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38
===========================
Got store instruction
Adding store instruction

flow()
  %a1 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !39, !phasar.instruction.id !40
===========================

flow()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34
===========================
Got call instruction
Adding call instruction fact

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
===========================
Got store instruction

flow()
  %b = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !42, !phasar.instruction.id !43
===========================

flow()
  %a = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !35, !phasar.instruction.id !36
===========================

flow()
  %foo = alloca %struct.a, align 8, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %a4 = alloca i8*, align 8, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)

flow()
  call void @llvm.dbg.declare(metadata i8** %a4, metadata !50, metadata !30), !dbg !51, !phasar.instruction.id !52
===========================
Got call instruction

flow()
  %0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41
===========================
Got operands checking instruction (load)
Adding fact

flow()
  %a2 = getelementptr inbounds %struct.b, %struct.b* %b, i32 0, i32 0, !dbg !44, !phasar.instruction.id !45
===========================

flow()
  %a3 = getelementptr inbounds %struct.c, %struct.c* %a2, i32 0, i32 0, !dbg !46, !phasar.instruction.id !47
===========================

flow()
  %b5 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !53, !phasar.instruction.id !54
===========================

flow()
  %a6 = getelementptr inbounds %struct.b, %struct.b* %b5, i32 0, i32 0, !dbg !55, !phasar.instruction.id !56
===========================

flow()
  %a7 = getelementptr inbounds %struct.c, %struct.c* %a6, i32 0, i32 0, !dbg !57, !phasar.instruction.id !58
===========================

flow()
  %1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59
===========================
Got operands checking instruction (load)
Adding fact

flow()
  store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60
===========================
Got store instruction
Adding store instruction

flow()
  %b8 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !61, !phasar.instruction.id !62
===========================

flow()
  %a9 = getelementptr inbounds %struct.b, %struct.b* %b8, i32 0, i32 0, !dbg !63, !phasar.instruction.id !64
===========================

flow()
  %a10 = getelementptr inbounds %struct.c, %struct.c* %a9, i32 0, i32 0, !dbg !65, !phasar.instruction.id !66
===========================

flow()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a10, align 8, !dbg !67, !phasar.instruction.id !68
===========================
Got store instruction
Removing store instruction

flow()
  %b11 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !69, !phasar.instruction.id !70
===========================

flow()
  %a12 = getelementptr inbounds %struct.b, %struct.b* %b11, i32 0, i32 0, !dbg !71, !phasar.instruction.id !72
===========================

flow()
  %a13 = getelementptr inbounds %struct.c, %struct.c* %a12, i32 0, i32 0, !dbg !73, !phasar.instruction.id !74
===========================

flow()
  %2 = load i8*, i8** %a13, align 8, !dbg !73, !phasar.instruction.id !75
===========================
Got operands checking instruction (load)

flow()
  store i8* %2, i8** %a4, align 8, !dbg !76, !phasar.instruction.id !77
===========================
Got store instruction
Removing store instruction

flow()
  ret i32 0, !dbg !78, !phasar.instruction.id !79worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata %struct.a* %foo, metadata !17, metadata !30), !dbg !31, !phasar.instruction.id !32, ID: 6
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
Facts:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7


Instruction:
%a1 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !39, !phasar.instruction.id !40, ID: 10
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7


Instruction:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%b = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !42, !phasar.instruction.id !43, ID: 12
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
%a = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !35, !phasar.instruction.id !36, ID: 8
Facts:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7


Instruction:
%foo = alloca %struct.a, align 8, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%a4 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i8** %a4, metadata !50, metadata !30), !dbg !51, !phasar.instruction.id !52, ID: 16
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7


Instruction:
%a2 = getelementptr inbounds %struct.b, %struct.b* %b, i32 0, i32 0, !dbg !44, !phasar.instruction.id !45, ID: 13
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
%a3 = getelementptr inbounds %struct.c, %struct.c* %a2, i32 0, i32 0, !dbg !46, !phasar.instruction.id !47, ID: 14
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
%b5 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !53, !phasar.instruction.id !54, ID: 17
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
%a6 = getelementptr inbounds %struct.b, %struct.b* %b5, i32 0, i32 0, !dbg !55, !phasar.instruction.id !56, ID: 18
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
%a7 = getelementptr inbounds %struct.c, %struct.c* %a6, i32 0, i32 0, !dbg !57, !phasar.instruction.id !58, ID: 19
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11


Instruction:
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20


Instruction:
%b8 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !61, !phasar.instruction.id !62, ID: 22
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
%a9 = getelementptr inbounds %struct.b, %struct.b* %b8, i32 0, i32 0, !dbg !63, !phasar.instruction.id !64, ID: 23
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
%a10 = getelementptr inbounds %struct.c, %struct.c* %a9, i32 0, i32 0, !dbg !65, !phasar.instruction.id !66, ID: 24
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8** %a10, align 8, !dbg !67, !phasar.instruction.id !68, ID: 25
Facts:
store i8* %0, i8** %a3, align 8, !dbg !48, !phasar.instruction.id !49, ID: 15
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
%b11 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !69, !phasar.instruction.id !70, ID: 26
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
%a12 = getelementptr inbounds %struct.b, %struct.b* %b11, i32 0, i32 0, !dbg !71, !phasar.instruction.id !72, ID: 27
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
%a13 = getelementptr inbounds %struct.c, %struct.c* %a12, i32 0, i32 0, !dbg !73, !phasar.instruction.id !74, ID: 28
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
%2 = load i8*, i8** %a13, align 8, !dbg !73, !phasar.instruction.id !75, ID: 29
Facts:
store57 2018-Dec-28 12:41:18.050083 - [INFO] Write results to file
58 2018-Dec-28 12:41:18.050294 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
 i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
store i8* %2, i8** %a4, align 8, !dbg !76, !phasar.instruction.id !77, ID: 30
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20
store i8* %1, i8** %a4, align 8, !dbg !51, !phasar.instruction.id !60, ID: 21


Instruction:
ret i32 0, !dbg !78, !phasar.instruction.id !79, ID: 31
Facts:
store i8* %call, i8** %a, align 8, !dbg !37, !phasar.instruction.id !38, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !33, !phasar.instruction.id !34, ID: 7
%0 = load i8*, i8** %a1, align 8, !dbg !39, !phasar.instruction.id !41, ID: 11
%1 = load i8*, i8** %a7, align 8, !dbg !57, !phasar.instruction.id !59, ID: 20


