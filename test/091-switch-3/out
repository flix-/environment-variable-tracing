0 2018-Dec-28 12:41:18.900429 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 12:41:18.900860 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 12:41:18.901212 - [INFO] No configuration file is used.
3 2018-Dec-28 12:41:18.901289 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 12:41:18.901389 - [INFO] Check program options for logical errors.
5 2018-Dec-28 12:41:18.901610 - [INFO] Set-up IR database.
6 2018-Dec-28 12:41:18.908906 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 12:41:18.909028 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 12:41:18.909090 - [INFO] 	main.ll
9 2018-Dec-28 12:41:18.909150 - [INFO] Check for chosen entry points.
10 2018-Dec-28 12:41:18.909211 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 12:41:18.909270 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 12:41:18.909331 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 12:41:18.909680 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 12:41:18.909841 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 12:41:18.910348 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 12:41:18.910412 - [INFO] Allocated Types    : 1
17 2018-Dec-28 12:41:18.910477 - [INFO] Allocation Sites   : 8
18 2018-Dec-28 12:41:18.910535 - [INFO] Basic Blocks       : 9
19 2018-Dec-28 12:41:18.910593 - [INFO] Calls Sites        : 8
20 2018-Dec-28 12:41:18.910651 - [INFO] Functions          : 3
21 2018-Dec-28 12:41:18.910708 - [INFO] Globals            : 1
22 2018-Dec-28 12:41:18.910766 - [INFO] Global Pointer     : 1
23 2018-Dec-28 12:41:18.910824 - [INFO] Instructions       : 36
24 2018-Dec-28 12:41:18.910881 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 12:41:18.911029 - [INFO] Store Instructions : 8
26 2018-Dec-28 12:41:18.911088 - [INFO]  
27 2018-Dec-28 12:41:18.911171 - [INFO]   i32
28 2018-Dec-28 12:41:18.911924 - [DEBUG] Analyzing function: main
29 2018-Dec-28 12:41:18.912401 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 12:41:18.912465 - [INFO] Construct type hierarchy
31 2018-Dec-28 12:41:18.912526 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 12:41:18.912732 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 12:41:18.912802 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 12:41:18.912865 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 12:41:18.912985 - [DEBUG] Walking in function: main
36 2018-Dec-28 12:41:18.913072 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 10
37 2018-Dec-28 12:41:18.913528 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 12:41:18.913589 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 12:41:18.913677 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 12:41:18.913740 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 12:41:18.913805 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27, ID: 11
42 2018-Dec-28 12:41:18.914254 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 12:41:18.914315 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-28 12:41:18.914396 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-28 12:41:18.914461 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-28 12:41:18.914575 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
47 2018-Dec-28 12:41:18.915004 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 12:41:18.915064 - [DEBUG] Target name: getenv
49 2018-Dec-28 12:41:18.915149 - [DEBUG] Walking in function: getenv
50 2018-Dec-28 12:41:18.915212 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-28 12:41:18.915277 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
52 2018-Dec-28 12:41:18.915633 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 12:41:18.915693 - [DEBUG] Target name: llvm.dbg.declare
54 2018-Dec-28 12:41:18.915769 - [DEBUG] Walking in function: llvm.dbg.declare
55 2018-Dec-28 12:41:18.915832 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2018-Dec-28 12:41:18.915896 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
57 2018-Dec-28 12:41:18.916234 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-28 12:41:18.916293 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-28 12:41:18.916368 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-28 12:41:18.916431 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-28 12:41:18.916496 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %f, metadata !57, metadata !22), !dbg !58, !phasar.instruction.id !59, ID: 26
62 2018-Dec-28 12:41:18.916856 - [DEBUG] Found 1 possible target(s)
63 2018-Dec-28 12:41:18.916915 - [DEBUG] Target name: llvm.dbg.declare
64 2018-Dec-28 12:41:18.916990 - [DEBUG] Walking in function: llvm.dbg.declare
65 2018-Dec-28 12:41:18.917054 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2018-Dec-28 12:41:18.917118 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65, ID: 29
67 2018-Dec-28 12:41:18.917530 - [DEBUG] Found 1 possible target(s)
68 2018-Dec-28 12:41:18.917590 - [DEBUG] Target name: llvm.dbg.declare
69 2018-Dec-28 12:41:18.917665 - [DEBUG] Walking in function: llvm.dbg.declare
70 2018-Dec-28 12:41:18.917728 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
71 2018-Dec-28 12:41:18.917793 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71, ID: 32
72 2018-Dec-28 12:41:18.918130 - [DEBUG] Found 1 possible target(s)
73 2018-Dec-28 12:41:18.918190 - [DEBUG] Target name: llvm.dbg.declare
74 2018-Dec-28 12:41:18.918264 - [DEBUG] Walking in function: llvm.dbg.declare
75 2018-Dec-28 12:41:18.918327 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
76 2018-Dec-28 12:41:18.918390 - [INFO] Call graph has been constructed
77 2018-Dec-28 12:41:18.918453 - [INFO] Performing analysis: plugin
78 2018-Dec-28 12:41:18.918521 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
79 2018-Dec-28 12:41:18.919015 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %b = alloca i32, align 4, !phasar.instruction.id !16
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %f = alloca i32, align 4, !phasar.instruction.id !17
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a4 = alloca i32, align 4, !phasar.instruction.id !18
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %b6 = alloca i32, align 4, !phasar.instruction.id !19
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !20
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 9

flow()
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  %0 = load i32, i32* %rc, align 4, !dbg !31, !phasar.instruction.id !32
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 9
Adding line: 9
Adding line: 12

flow()
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12

flow()
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12

flow()
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12
Adding line: 15

flow()
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12
Adding line: 15

flow()
  br label %sw.epilog, !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12
Adding line: 15

flow()
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12
Adding line: 19

flow()
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 19
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12
Adding line: 19

flow()
  br label %sw.epilog, !dbg !51, !phasar.instruction.id !52
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6
join()
Adding line: 19
Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12
Adding line: 15
Adding line: 19

flow()
  store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12
Adding line: 23

flow()
  br label %sw.epilog, !dbg !55, !phasar.instruction.id !56
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 5
join()
Adding line: 19
Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 12
Adding line: 15
Adding line: 19
Adding line: 23

flow()
  call void @llvm.dbg.declare(metadata i32* %f, metadata !57, metadata !22), !dbg !58, !phasar.instruction.id !59
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 19
Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 15
Adding line: 19
Adding line: 23

flow()
  store i32 1, i32* %f, align 4, !dbg !58, !phasar.instruction.id !60
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 19
Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 15
Adding line: 19
Adding line: 23

flow()
  br label %sw.epilog7, !dbg !61, !phasar.instruction.id !62
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 19
Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 15
Adding line: 19
Adding line: 23

flow()
  call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  store i32 1, i32* %a4, align 4, !dbg !64, !phasar.instruction.id !66
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  br label %sw.epilog7, !dbg !67, !phasar.instruction.id !68
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 2

flow()
  call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  store i32 2, i32* %b6, align 4, !dbg !70, !phasar.instruction.id !72
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  br label %sw.epilog7, !dbg !73, !phasar.instruction.id !74
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 2

flow()
  %2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 19
Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 12
Adding line: 36
Adding line: 15
Adding line: 19
Adding line: 23

flow()
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %0 = load i32, i32* %rc, align 4, !dbg !31, !phasar.instruction.id !32
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
===========================
Got switch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br label %sw.epilog, !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 6

flow()
  call void @llvm.dbg.declare(metadata i32* %f, metadata !57, metadata !22), !dbg !58, !phasar.instruction.id !59
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br label %sw.epilog, !dbg !51, !phasar.instruction.id !52
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 6

flow()
  call void @llvm.dbg.declare(metadata i32* %f, metadata !57, metadata !22), !dbg !58, !phasar.instruction.id !59
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  br label %sw.epilog, !dbg !55, !phasar.instruction.id !56
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 5

flow()
  call void @llvm.dbg.declare(metadata i32* %f, metadata !57, metadata !22), !dbg !58, !phasar.instruction.id !59
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  store i32 1, i32* %f, align 4, !dbg !58, !phasar.instruction.id !60
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  br label %sw.epilog7, !dbg !61, !phasar.instruction.id !62
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  %2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  store i32 1, i32* %a4, align 4, !dbg !64, !phasar.instruction.id !66
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br label %sw.epilog7, !dbg !67, !phasar.instruction.id !68
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 2

flow()
  store i32 2, i32* %b6, align 4, !dbg !70, !phasar.instruction.id !72
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br label %sw.epilog7, !dbg !73, !phasar.instruction.id !74
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 2

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
===========================

flow()
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
===========================

flow()
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
===========================
Got store instruction
Adding store instruction

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
===========================
Got call instruction
Adding call instruction fact

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !20
===========================
Got store instruction

flow()
  %b6 = alloca i32, align 4, !phasar.instruction.id !19
===========================
Got operands checking instruction (alloca)

flow()
  %a4 = alloca i32, align 4, !phasar.instruction.id !18
===========================
Got operands checking instruction (alloca)

flow()
  %b = alloca i32, align 4, !phasar.instruction.id !16
===========================
Got operands checking instruction (alloca)

flow()
  %f = alloca i32, align 4, !phasar.instruction.id !17
===========================
Got operands checking instruction (alloca)

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27
===========================
Got call instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)

flow()
  %0 = load i32, i32* %rc, align 4, !dbg !31, !phasar.instruction.id !32
===========================
Got operands checking instruction (load)

flow()
  br label %sw.epilog7, !dbg !73, !phasar.instruction.id !74
===========================
Got branch instruction

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br label %sw.epilog7, !dbg !67, !phasar.instruction.id !68
===========================
Got branch instruction

flow()
  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
===========================
Got switch instruction

flow()
  br label %sw.epilog, !dbg !55, !phasar.instruction.id !56
===========================

flow()
  %2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br label %sw.epilog, !dbg !51, !phasar.instruction.id !52
===========================

flow()
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
===========================
Got switch instruction
Adding switch instruction fact

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
===========================

flow()
  br label %sw.epilog, !dbg !45, !phasar.instruction.id !46
===========================

flow()
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
===========================

flow()
  store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54
===========================

flow()
  call void @llvm.dbg.declare(metadata i32* %f, metadata !57, metadata !22), !dbg !58, !phasar.instruction.id !59
===========================
Got call instruction

flow()
  store i32 1, i32* %f, align 4, !dbg !58, !phasar.instruction.id !60
===========================
Got store instruction

flow()
  br label %sw.epilog7, !dbg !61, !phasar.instruction.id !62
===========================
Got branch instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65
===========================
Got call instruction

flow()
  store i32 1, i32* %a4, align 4, !dbg !64, !phasar.instruction.id !66
===========================
Got store instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71
===========================
Got call instruction

flow()
  store i32 2, i32* %b6, align 4, !dbg !70, !phasar.instruction.id !72
===========================
Got store instruction

flow()
  ret i32 %2, !dbg !77, !phasar.instruction.id !78worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21


Instruction:
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !20, ID: 9
Facts:
	EMPTY


Instruction:
%b6 = alloca i32, align 4, !phasar.instruction.id !19, ID: 8
Facts:
	EMPTY


Instruction:
%a4 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7
Facts:
	EMPTY


Instruction:
%b = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%f = alloca i32, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27, ID: 11
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 10
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !31, !phasar.instruction.id !32, ID: 14
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
br label %sw.epilog7, !dbg !73, !phasar.instruction.id !74, ID: 34
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
br label %sw.epilog7, !dbg !67, !phasar.instruction.id !68, ID: 31
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
br label %sw.epilog, !dbg !55, !phasar.instruction.id !56, ID: 25
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54, ID: 24


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76, ID: 35
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54, ID: 24


Instruction:
br label %sw.epilog, !dbg !51, !phasar.instruction.id !52, ID: 23
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21


Instruction:
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17


Instruction:
br label %sw.epilog, !dbg !45, !phasar.instruction.id !46, ID: 20
Facts:
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18


Instruction:
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17


Instruction:
store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54, ID: 24
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17


Instruction:
call void @llvm.dbg.declare(metadata i32* %f, metadata !57, metadata !22), !dbg !58, !phasar.instruction.id !59, ID: 26
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54, ID: 24


Instruction:
store i32 1, i32* %f, align 4, !dbg !58, !phasar.instruction.id !60, ID: 27
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instru80 2018-Dec-28 12:41:18.991519 - [INFO] Write results to file
81 2018-Dec-28 12:41:18.991718 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
ction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54, ID: 24


Instruction:
br label %sw.epilog7, !dbg !61, !phasar.instruction.id !62, ID: 28
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54, ID: 24


Instruction:
call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65, ID: 29
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
store i32 1, i32* %a4, align 4, !dbg !64, !phasar.instruction.id !66, ID: 30
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71, ID: 32
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
store i32 2, i32* %b6, align 4, !dbg !70, !phasar.instruction.id !72, ID: 33
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
ret i32 %2, !dbg !77, !phasar.instruction.id !78, ID: 36
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
%2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76, ID: 35
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
store i32 3, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !54, ID: 24


