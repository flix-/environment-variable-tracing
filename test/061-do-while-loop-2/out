0 2018-Dec-28 11:42:58.113040 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 11:42:58.113464 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 11:42:58.113854 - [INFO] No configuration file is used.
3 2018-Dec-28 11:42:58.114063 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 11:42:58.114170 - [INFO] Check program options for logical errors.
5 2018-Dec-28 11:42:58.114263 - [INFO] Set-up IR database.
6 2018-Dec-28 11:42:58.120031 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 11:42:58.120155 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 11:42:58.120216 - [INFO] 	main.ll
9 2018-Dec-28 11:42:58.120309 - [INFO] Check for chosen entry points.
10 2018-Dec-28 11:42:58.120371 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 11:42:58.120562 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 11:42:58.120625 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 11:42:58.121041 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 11:42:58.121185 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 11:42:58.121554 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 11:42:58.121617 - [INFO] Allocated Types    : 1
17 2018-Dec-28 11:42:58.121691 - [INFO] Allocation Sites   : 3
18 2018-Dec-28 11:42:58.121749 - [INFO] Basic Blocks       : 7
19 2018-Dec-28 11:42:58.121806 - [INFO] Calls Sites        : 4
20 2018-Dec-28 11:42:58.121863 - [INFO] Functions          : 4
21 2018-Dec-28 11:42:58.121920 - [INFO] Globals            : 1
22 2018-Dec-28 11:42:58.121977 - [INFO] Global Pointer     : 1
23 2018-Dec-28 11:42:58.122035 - [INFO] Instructions       : 20
24 2018-Dec-28 11:42:58.122092 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 11:42:58.122149 - [INFO] Store Instructions : 3
26 2018-Dec-28 11:42:58.122206 - [INFO]  
27 2018-Dec-28 11:42:58.122287 - [INFO]   i32
28 2018-Dec-28 11:42:58.122796 - [DEBUG] Analyzing function: main
29 2018-Dec-28 11:42:58.123055 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 11:42:58.123117 - [INFO] Construct type hierarchy
31 2018-Dec-28 11:42:58.123178 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 11:42:58.123347 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 11:42:58.123415 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 11:42:58.123612 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 11:42:58.123736 - [DEBUG] Walking in function: main
36 2018-Dec-28 11:42:58.123827 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-28 11:42:58.124266 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 11:42:58.124327 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 11:42:58.124417 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 11:42:58.124482 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 11:42:58.124548 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
42 2018-Dec-28 11:42:58.124832 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 11:42:58.124891 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-28 11:42:58.124966 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-28 11:42:58.125028 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-28 11:42:58.125092 - [DEBUG] Found static call-site: %call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
47 2018-Dec-28 11:42:58.125350 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 11:42:58.125409 - [DEBUG] Target name: foo
49 2018-Dec-28 11:42:58.125489 - [DEBUG] Walking in function: foo
50 2018-Dec-28 11:42:58.125551 - [DEBUG] Function already visited or only declaration: foo
51 2018-Dec-28 11:42:58.125615 - [DEBUG] Found static call-site: %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
52 2018-Dec-28 11:42:58.125948 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 11:42:58.126007 - [DEBUG] Target name: getenv
54 2018-Dec-28 11:42:58.126083 - [DEBUG] Walking in function: getenv
55 2018-Dec-28 11:42:58.126145 - [DEBUG] Function already visited or only declaration: getenv
56 2018-Dec-28 11:42:58.126208 - [INFO] Call graph has been constructed
57 2018-Dec-28 11:42:58.126271 - [INFO] Performing analysis: plugin
58 2018-Dec-28 11:42:58.126338 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2018-Dec-28 11:42:58.126991 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %do.cond, !dbg !36, !phasar.instruction.id !37
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
===========================
Got operands checking instruction (icmp)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %do.cond2, !dbg !42, !phasar.instruction.id !43
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 14

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 14
Adding line: 14

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 14
Adding line: 14
Adding line: 14

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 14
Adding line: 14
Adding line: 14

flow()
  %0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 14
Adding line: 14

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 14
Adding line: 10
Adding line: 14
Adding line: 14

flow()
  %0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 14
Adding line: 10
Adding line: 14
Adding line: 14

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 14
Adding line: 10
Adding line: 12
Adding line: 14
Adding line: 14

flow()
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 14
Adding line: 14

flow()
  br label %do.cond, !dbg !36, !phasar.instruction.id !37
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 14
Adding line: 14

flow()
  %call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 14
Adding line: 14

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  br label %do.cond2, !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 1
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  br label %do.cond, !dbg !36, !phasar.instruction.id !37
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 2
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  %call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 14

flow()
  %0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 8
join()
Adding line: 13
Adding line: 14
Adding line: 12
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 14
Adding line: 16

flow()
  br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
===========================
Got call instruction

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23
===========================
Got branch instruction

flow()
  %call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39
===========================

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45
===========================

flow()
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
===========================

flow()
  store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26
===========================

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
===========================
Got store instruction

flow()
  br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30
===========================

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
===========================

flow()
  br label %do.cond, !dbg !36, !phasar.instruction.id !37
===========================

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
===========================

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
===========================

flow()
  br label %do.cond2, !dbg !42, !phasar.instruction.id !43
===========================

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46
===========================

flow()
  %0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
===========================

flow()
  ret i32 %0, !dbg !50, !phasar.instruction.id !51worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 5
worklist size: 6
worklist size: 6
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23, ID: 6
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30, ID: 8
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
br label %do.cond, !dbg !36, !phasar.instruction.id !37, ID: 11
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
br label %do.cond2, !dbg !42, !phasar.instruction.id !43, ID: 15
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 19
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id60 2018-Dec-28 11:42:58.171050 - [INFO] Write results to file
61 2018-Dec-28 11:42:58.171266 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
 !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18


Instruction:
ret i32 %0, !dbg !50, !phasar.instruction.id !51, ID: 20
Facts:
%call = call i32 (...) @foo(), !dbg !38, !phasar.instruction.id !39, ID: 12
%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !44, !phasar.instruction.id !45, ID: 16
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
%0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 19


