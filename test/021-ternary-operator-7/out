0 2019-Jan-05 14:31:19.528486 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 14:31:19.528904 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 14:31:19.529253 - [INFO] No configuration file is used.
3 2019-Jan-05 14:31:19.529329 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 14:31:19.529427 - [INFO] Check program options for logical errors.
5 2019-Jan-05 14:31:19.529516 - [INFO] Set-up IR database.
6 2019-Jan-05 14:31:19.534806 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 14:31:19.534917 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 14:31:19.534979 - [INFO] 	main.ll
9 2019-Jan-05 14:31:19.535038 - [INFO] Check for chosen entry points.
10 2019-Jan-05 14:31:19.535099 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 14:31:19.535157 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 14:31:19.535218 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 14:31:19.535551 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 14:31:19.535693 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 14:31:19.536056 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 14:31:19.536120 - [INFO] Allocated Types    : 1
17 2019-Jan-05 14:31:19.536184 - [INFO] Allocation Sites   : 4
18 2019-Jan-05 14:31:19.536243 - [INFO] Basic Blocks       : 4
19 2019-Jan-05 14:31:19.536301 - [INFO] Calls Sites        : 6
20 2019-Jan-05 14:31:19.536358 - [INFO] Functions          : 5
21 2019-Jan-05 14:31:19.536416 - [INFO] Globals            : 1
22 2019-Jan-05 14:31:19.536474 - [INFO] Global Pointer     : 1
23 2019-Jan-05 14:31:19.536532 - [INFO] Instructions       : 24
24 2019-Jan-05 14:31:19.536590 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 14:31:19.536648 - [INFO] Store Instructions : 4
26 2019-Jan-05 14:31:19.536706 - [INFO]  
27 2019-Jan-05 14:31:19.536780 - [INFO]   i32
28 2019-Jan-05 14:31:19.537316 - [DEBUG] Analyzing function: main
29 2019-Jan-05 14:31:19.538314 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 14:31:19.538382 - [INFO] Construct type hierarchy
31 2019-Jan-05 14:31:19.538443 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 14:31:19.538601 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 14:31:19.538670 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 14:31:19.538732 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 14:31:19.538857 - [DEBUG] Walking in function: main
36 2019-Jan-05 14:31:19.538944 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %tainted, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2019-Jan-05 14:31:19.539276 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 14:31:19.539336 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 14:31:19.539418 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 14:31:19.539480 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 14:31:19.539544 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
42 2019-Jan-05 14:31:19.539847 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 14:31:19.539906 - [DEBUG] Target name: getenv
44 2019-Jan-05 14:31:19.539987 - [DEBUG] Walking in function: getenv
45 2019-Jan-05 14:31:19.540049 - [DEBUG] Function already visited or only declaration: getenv
46 2019-Jan-05 14:31:19.540112 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2019-Jan-05 14:31:19.540377 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 14:31:19.540435 - [DEBUG] Target name: llvm.dbg.declare
49 2019-Jan-05 14:31:19.540509 - [DEBUG] Walking in function: llvm.dbg.declare
50 2019-Jan-05 14:31:19.540572 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2019-Jan-05 14:31:19.540654 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !27, !phasar.instruction.id !28, ID: 10
52 2019-Jan-05 14:31:19.540938 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 14:31:19.540999 - [DEBUG] Target name: foo
54 2019-Jan-05 14:31:19.541078 - [DEBUG] Walking in function: foo
55 2019-Jan-05 14:31:19.541141 - [DEBUG] Function already visited or only declaration: foo
56 2019-Jan-05 14:31:19.541206 - [DEBUG] Found static call-site: %call2 = call i32 (...) @bar(), !dbg !32, !phasar.instruction.id !33, ID: 13
57 2019-Jan-05 14:31:19.541606 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-05 14:31:19.541667 - [DEBUG] Target name: bar
59 2019-Jan-05 14:31:19.541755 - [DEBUG] Walking in function: bar
60 2019-Jan-05 14:31:19.541817 - [DEBUG] Function already visited or only declaration: bar
61 2019-Jan-05 14:31:19.541884 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !41, metadata !18), !dbg !42, !phasar.instruction.id !43, ID: 21
62 2019-Jan-05 14:31:19.542191 - [DEBUG] Found 1 possible target(s)
63 2019-Jan-05 14:31:19.542250 - [DEBUG] Target name: llvm.dbg.declare
64 2019-Jan-05 14:31:19.542332 - [DEBUG] Walking in function: llvm.dbg.declare
65 2019-Jan-05 14:31:19.542395 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2019-Jan-05 14:31:19.542458 - [INFO] Call graph has been constructed
67 2019-Jan-05 14:31:19.542522 - [INFO] Performing analysis: plugin
68 2019-Jan-05 14:31:19.542593 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
69 2019-Jan-05 14:31:19.543265 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %tainted = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %tainted, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8

  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  %call1 = call i32 (...) @foo(), !dbg !27, !phasar.instruction.id !28
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  %cmp = icmp eq i32 %call1, 0, !dbg !29, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  br i1 %cmp, label %cond.true, label %cond.false, !dbg !27, !phasar.instruction.id !31
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  br i1 %cmp, label %cond.true, label %cond.false, !dbg !27, !phasar.instruction.id !31
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  %call2 = call i32 (...) @bar(), !dbg !32, !phasar.instruction.id !33
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  %conv = sext i32 %call2 to i64, !dbg !32, !phasar.instruction.id !34
Got operands checking instruction (sext)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  %0 = inttoptr i64 %conv to i32*, !dbg !32, !phasar.instruction.id !35
Got operands checking instruction (inttoptr)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  br label %cond.end, !dbg !27, !phasar.instruction.id !36
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  br label %cond.end, !dbg !27, !phasar.instruction.id !37
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
Got phi node instruction
Adding phi node instruction fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
=============

Added line number: 8
Added line number: 8
Added line number: 9

  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
Got operands checking instruction (ptrtoint)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
=============

Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9

  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
=============

Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9

  call void @llvm.dbg.declare(metadata i32* %a, metadata !41, metadata !18), !dbg !42, !phasar.instruction.id !43
Got call instruction
Dumping facts
=============
  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
=============

Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9

  %2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
  %2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45
=============

Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 10

  store i32 %2, i32* %a, align 4, !dbg !42, !phasar.instruction.id !46
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %2, i32* %a, align 4, !dbg !42, !phasar.instruction.id !46
  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
  %2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45
=============

Added line number: 10
Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 10

  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  %call1 = call i32 (...) @foo(), !dbg !27, !phasar.instruction.id !28
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  %cmp = icmp eq i32 %call1, 0, !dbg !29, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  br i1 %cmp, label %cond.true, label %cond.false, !dbg !27, !phasar.instruction.id !31
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  br i1 %cmp, label %cond.true, label %cond.false, !dbg !27, !phasar.instruction.id !31
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  %call2 = call i32 (...) @bar(), !dbg !32, !phasar.instruction.id !33
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  br label %cond.end, !dbg !27, !phasar.instruction.id !37
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  %conv = sext i32 %call2 to i64, !dbg !32, !phasar.instruction.id !34
Got operands checking instruction (sext)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  %0 = inttoptr i64 %conv to i32*, !dbg !32, !phasar.instruction.id !35
Got operands checking instruction (inttoptr)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  br label %cond.end, !dbg !27, !phasar.instruction.id !36
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
Got phi node instruction
Adding phi node instruction fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
=============


  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
Got operands checking instruction (ptrtoint)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
=============


  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !41, metadata !18), !dbg !42, !phasar.instruction.id !43
Got call instruction
Dumping facts
=============
  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
=============


  %2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
  %2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45
=============


  store i32 %2, i32* %a, align 4, !dbg !42, !phasar.instruction.id !46
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %2, i32* %a, align 4, !dbg !42, !phasar.instruction.id !46
  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
  %2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45
=============


  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %tainted, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction

  %tainted = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 %2, i32* %a, align 4, !dbg !42, !phasar.instruction.id !46
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !41, metadata !18), !dbg !42, !phasar.instruction.id !43
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %call1 = call i32 (...) @foo(), !dbg !27, !phasar.instruction.id !28
Got call instruction

  %cmp = icmp eq i32 %call1, 0, !dbg !29, !phasar.instruction.id !30
Got operands checking instruction (icmp)

  br label %cond.end, !dbg !27, !phasar.instruction.id !37
Got branch instruction

  br i1 %cmp, label %cond.true, label %cond.false, !dbg !27, !phasar.instruction.id !31
Got branch instruction

  %call2 = call i32 (...) @bar(), !dbg !32, !phasar.instruction.id !33
Got call instruction

  %conv = sext i32 %call2 to i64, !dbg !32, !phasar.instruction.id !34
Got operands checking instruction (sext)

  %0 = inttoptr i64 %conv to i32*, !dbg !32, !phasar.instruction.id !35
Got operands checking instruction (inttoptr)

  %1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39
Got operands checking instruction (ptrtoint)
Adding fact

  br label %cond.end, !dbg !27, !phasar.instruction.id !36
Got branch instruction

  %cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38
Got phi node instruction
Adding phi node instruction fact

  %2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45
Got load instruction
Adding load instruction fact

  ret i32 0, !dbg !47, !phasar.instruction.id !48worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %tainted, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%tainted = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
store i32 %2, i32* %a, align 4, !dbg !42, !phasar.instruction.id !46, ID: 23
Facts:
store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40, ID: 20
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39, ID: 19
%cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38, ID: 18
%2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45, ID: 22


Instruction:
store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40, ID: 20
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39, ID: 19
%cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38, ID: 18


Instruction:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !41, metadata !18), !dbg !42, !phasar.instruction.id !43, ID: 21
Facts:
store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40, ID: 20
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39, ID: 19
%cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38, ID: 18


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%call1 = call i32 (...) @foo(), !dbg !27, !phasar.instruction.id !28, ID: 10
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%cmp = icmp eq i32 %call1, 0, !dbg !29, !phasar.instruction.id !30, ID: 11
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
br label %cond.end, !dbg !27, !phasar.instruction.id !37, ID: 17
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
br i1 %cmp, label %cond.true, label %cond.false, !dbg !27, !phasar.instruction.id !31, ID: 12
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%call2 = call i32 (...) @bar(), !dbg !32, !phasar.instruction.id !33, ID: 13
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%conv = sext i32 %call2 to i64, !dbg !32, !phasar.instruction.id !34, ID: 14
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%0 = inttoptr i64 %conv to i32*, !dbg !32, !phasar.instruction.id !35, ID: 15
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39, ID: 19
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38, ID: 18


Instruction:
br label %cond.end, !dbg !27, !phasar.instruction.id !36, ID: 16
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38, ID: 18
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45, ID: 22
Facts:
store i32 %1, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !40, ID: 20
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39, ID: 19
%cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38, ID: 18


Instruction:
ret i32 0, !dbg !47, !phasar.instruction.id !48, ID: 24
Facts:
store i32 %2, i32* %a, align 4, !dbg !42, !phasar.instruction.id !46, ID: 23
store i32 %1, i32* %taint, align 70 2019-Jan-05 14:31:19.594534 - [INFO] Write results to file
71 2019-Jan-05 14:31:19.594713 - [INFO] Shutdown llvm and the analysis framework.

4, !dbg !25, !phasar.instruction.id !40, ID: 20
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%1 = ptrtoint i32* %cond to i32, !dbg !27, !phasar.instruction.id !39, ID: 19
%cond = phi i32* [ %0, %cond.true ], [ %tainted, %cond.false ], !dbg !27, !phasar.instruction.id !38, ID: 18
%2 = load i32, i32* %taint, align 4, !dbg !44, !phasar.instruction.id !45, ID: 22


