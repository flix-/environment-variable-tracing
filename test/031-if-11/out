0 2019-Jan-05 20:21:26.116204 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 20:21:26.116612 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 20:21:26.116961 - [INFO] No configuration file is used.
3 2019-Jan-05 20:21:26.117037 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 20:21:26.117134 - [INFO] Check program options for logical errors.
5 2019-Jan-05 20:21:26.117224 - [INFO] Set-up IR database.
6 2019-Jan-05 20:21:26.124281 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 20:21:26.124392 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 20:21:26.124453 - [INFO] 	main.ll
9 2019-Jan-05 20:21:26.124512 - [INFO] Check for chosen entry points.
10 2019-Jan-05 20:21:26.124573 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 20:21:26.124631 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 20:21:26.124692 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 20:21:26.125029 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 20:21:26.125194 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 20:21:26.125719 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 20:21:26.125782 - [INFO] Allocated Types    : 1
17 2019-Jan-05 20:21:26.125846 - [INFO] Allocation Sites   : 4
18 2019-Jan-05 20:21:26.125903 - [INFO] Basic Blocks       : 13
19 2019-Jan-05 20:21:26.125961 - [INFO] Calls Sites        : 6
20 2019-Jan-05 20:21:26.126018 - [INFO] Functions          : 4
21 2019-Jan-05 20:21:26.126075 - [INFO] Globals            : 1
22 2019-Jan-05 20:21:26.126133 - [INFO] Global Pointer     : 1
23 2019-Jan-05 20:21:26.126190 - [INFO] Instructions       : 39
24 2019-Jan-05 20:21:26.126247 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 20:21:26.126305 - [INFO] Store Instructions : 9
26 2019-Jan-05 20:21:26.126362 - [INFO]  
27 2019-Jan-05 20:21:26.126441 - [INFO]   i32
28 2019-Jan-05 20:21:26.127139 - [DEBUG] Analyzing function: main
29 2019-Jan-05 20:21:26.127475 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 20:21:26.127544 - [INFO] Construct type hierarchy
31 2019-Jan-05 20:21:26.127605 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 20:21:26.127795 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 20:21:26.127864 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 20:21:26.127926 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 20:21:26.128039 - [DEBUG] Walking in function: main
36 2019-Jan-05 20:21:26.128125 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2019-Jan-05 20:21:26.128556 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 20:21:26.128616 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 20:21:26.128703 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 20:21:26.128766 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 20:21:26.128831 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23, ID: 7
42 2019-Jan-05 20:21:26.129169 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 20:21:26.129229 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 20:21:26.129303 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 20:21:26.129366 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 20:21:26.129429 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
47 2019-Jan-05 20:21:26.129808 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 20:21:26.129867 - [DEBUG] Target name: getenv
49 2019-Jan-05 20:21:26.129948 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 20:21:26.130010 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 20:21:26.130074 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
52 2019-Jan-05 20:21:26.130420 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 20:21:26.130479 - [DEBUG] Target name: foo
54 2019-Jan-05 20:21:26.130556 - [DEBUG] Walking in function: foo
55 2019-Jan-05 20:21:26.130618 - [DEBUG] Function already visited or only declaration: foo
56 2019-Jan-05 20:21:26.130683 - [DEBUG] Found static call-site: %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
57 2019-Jan-05 20:21:26.131011 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-05 20:21:26.131070 - [DEBUG] Target name: foo
59 2019-Jan-05 20:21:26.131144 - [DEBUG] Walking in function: foo
60 2019-Jan-05 20:21:26.131206 - [DEBUG] Function already visited or only declaration: foo
61 2019-Jan-05 20:21:26.131270 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70, ID: 29
62 2019-Jan-05 20:21:26.131605 - [DEBUG] Found 1 possible target(s)
63 2019-Jan-05 20:21:26.131664 - [DEBUG] Target name: llvm.dbg.declare
64 2019-Jan-05 20:21:26.131739 - [DEBUG] Walking in function: llvm.dbg.declare
65 2019-Jan-05 20:21:26.131801 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2019-Jan-05 20:21:26.131894 - [INFO] Call graph has been constructed
67 2019-Jan-05 20:21:26.131955 - [INFO] Performing analysis: plugin
68 2019-Jan-05 20:21:26.132022 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
69 2019-Jan-05 20:21:26.132517 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
=============

Added line number: 9

  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
=============

Added line number: 9
Added line number: 9

  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
=============

Added line number: 9
Added line number: 9
Added line number: 11

  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11

  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11

  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11

  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12

  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12

  br label %if.end, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12

  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Added line number: 15
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12

  br label %if.end, !phasar.instruction.id !48
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12

  br label %if.end10, !dbg !49, !phasar.instruction.id !50
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12

  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 18

  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 18
Added line number: 18

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 18
Added line number: 18

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 18
Added line number: 18

  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 18
Added line number: 18
Added line number: 19

  br label %if.end9, !dbg !61, !phasar.instruction.id !62
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 18
Added line number: 18
Added line number: 19

  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 18
Added line number: 18
Added line number: 21

  br label %if.end9, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21

  br label %if.end10, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21

  call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21

  store i32 1, i32* %a, align 4, !dbg !69, !phasar.instruction.id !71
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21

  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21

  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21
Added line number: 26

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21
Added line number: 26
Added line number: 26

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21
Added line number: 26
Added line number: 26

  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21
Added line number: 26
Added line number: 26
Added line number: 27

  br label %if.end14, !dbg !81, !phasar.instruction.id !82
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21
Added line number: 26
Added line number: 26
Added line number: 27

  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21
Added line number: 26
Added line number: 26
Added line number: 29

  br label %if.end14, !phasar.instruction.id !86
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21
Added line number: 26
Added line number: 26
Added line number: 27
Added line number: 29

  %2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  %2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88
  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
=============

Added line number: 15
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 11
Added line number: 11
Added line number: 12
Added line number: 12
Added line number: 26
Added line number: 18
Added line number: 18
Added line number: 19
Added line number: 21
Added line number: 26
Added line number: 32
Added line number: 27
Added line number: 29

  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
=============


  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
=============


  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
=============


  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
=============


  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
=============


  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
=============


  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
=============


  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br label %if.end, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br label %if.end10, !dbg !49, !phasar.instruction.id !50
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br label %if.end, !phasar.instruction.id !48
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br label %if.end10, !dbg !49, !phasar.instruction.id !50
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============


  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============


  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============


  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
=============


  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  br label %if.end9, !dbg !61, !phasar.instruction.id !62
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
=============


  br label %if.end10, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  br label %if.end9, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  br label %if.end10, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  store i32 1, i32* %a, align 4, !dbg !69, !phasar.instruction.id !71
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
=============


  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
=============


  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
=============


  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
=============


  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
=============


  br label %if.end14, !dbg !81, !phasar.instruction.id !82
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
=============


  %2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  %2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88
  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
=============


  br label %if.end14, !phasar.instruction.id !86
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
=============


  %2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
  %2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88
  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80
  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42

  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts

  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact

  br label %if.end10, !phasar.instruction.id !67

  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36

  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37

  %1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74
Got load instruction
Adding load instruction fact

  br label %if.end, !phasar.instruction.id !48

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39

  br label %if.end, !dbg !43, !phasar.instruction.id !44

  br label %if.end10, !dbg !49, !phasar.instruction.id !50

  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54

  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55

  br label %if.end9, !phasar.instruction.id !66

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57

  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60

  br label %if.end9, !dbg !61, !phasar.instruction.id !62

  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65

  store i32 1, i32* %a, align 4, !dbg !69, !phasar.instruction.id !71
Got store instruction
Removed 0 memory locations from facts

  %tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75
Got operands checking instruction (icmp)
Adding fact

  %2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88
Got load instruction
Adding load instruction fact

  br label %if.end14, !phasar.instruction.id !86

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77
Got branch instruction
Adding conditional branch instruction fact

  store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80

  br label %if.end14, !dbg !81, !phasar.instruction.id !82

  store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85

  ret i32 %2, !dbg !89, !phasar.instruction.id !90worklist size: 42
worklist size: 41
worklist size: 40
worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 35
worklist size: 35
worklist size: 35
worklist size: 36
worklist size: 36
worklist size: 36
worklist size: 36
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 37
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 38
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23, ID: 7
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70, ID: 29
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10


Instruction:
br label %if.end10, !phasar.instruction.id !67, ID: 28
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11


Instruction:
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
br label %if.end, !phasar.instruction.id !48, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
br label %if.end, !dbg !43, !phasar.instruction.id !44, ID: 17
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
br label %if.end10, !dbg !49, !phasar.instruction.id !50, ID: 20
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12


Instruction:
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21


Instruction:
br label %if.end9, !phasar.instruction.id !66, ID: 27
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57, ID: 23
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22


Instruction:
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22


Instruction:
br label %if.end9, !dbg !61, !phasar.instruction.id !62, ID: 25
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24


Instruction:
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22


Instruction:
store i32 1, i32* %a, align 4, !dbg !69, !phasar.instruction.id !71, ID: 30
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
%tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75, ID: 32
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88, ID: 38
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
%tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75, ID: 32
br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77, ID: 33
store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80, ID: 34
store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85, ID: 36


Instruction:
br label %if.end14, !phasar.instruction.id !86, ID: 37
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
%tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75, ID: 32
br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77, ID: 33
store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85, ID: 36


Instruction:
br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77, ID: 33
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
%tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75, ID: 32


Instruction:
store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80, ID: 34
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
%tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75, ID: 32
br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77, ID: 33


Instruction:
br label %if.end14, !dbg !81, !phasar.instruction.id !82, ID: 35
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
%tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75, ID: 32
br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77, ID: 33
store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80, ID: 34


Instruction:
store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85, ID: 36
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
%tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75, ID: 32
br i1 %tobool11, label %if.then12, label %if.else13, !dbg !76, !phasar.instruction.id !77, ID: 33


Instruction:
ret i32 %2, !dbg !89, !phasar.instruction.id !90, ID: 39
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.i70 2019-Jan-05 20:21:26.441771 - [INFO] Write results to file
71 2019-Jan-05 20:21:26.442006 - [INFO] Shutdown llvm and the analysis framework.

nstruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !72, !phasar.instruction.id !74, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
%tobool11 = icmp ne i32 %1, 0, !dbg !72, !phasar.instruction.id !75, ID: 32
%2 = load i32, i32* %rc, align 4, !dbg !87, !phasar.instruction.id !88, ID: 38
store i32 0, i32* %a, align 4, !dbg !78, !phasar.instruction.id !80, ID: 34
store i32 1, i32* %a, align 4, !dbg !83, !phasar.instruction.id !85, ID: 36


