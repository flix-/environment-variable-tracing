0 2019-Jan-05 20:21:28.074847 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 20:21:28.075306 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 20:21:28.075654 - [INFO] No configuration file is used.
3 2019-Jan-05 20:21:28.075733 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 20:21:28.075830 - [INFO] Check program options for logical errors.
5 2019-Jan-05 20:21:28.075919 - [INFO] Set-up IR database.
6 2019-Jan-05 20:21:28.082520 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 20:21:28.082626 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 20:21:28.082687 - [INFO] 	main.ll
9 2019-Jan-05 20:21:28.082746 - [INFO] Check for chosen entry points.
10 2019-Jan-05 20:21:28.082808 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 20:21:28.082866 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 20:21:28.082926 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 20:21:28.083260 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 20:21:28.083407 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 20:21:28.083886 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 20:21:28.083949 - [INFO] Allocated Types    : 1
17 2019-Jan-05 20:21:28.084014 - [INFO] Allocation Sites   : 3
18 2019-Jan-05 20:21:28.084071 - [INFO] Basic Blocks       : 12
19 2019-Jan-05 20:21:28.084128 - [INFO] Calls Sites        : 6
20 2019-Jan-05 20:21:28.084186 - [INFO] Functions          : 5
21 2019-Jan-05 20:21:28.084243 - [INFO] Globals            : 1
22 2019-Jan-05 20:21:28.084300 - [INFO] Global Pointer     : 1
23 2019-Jan-05 20:21:28.084357 - [INFO] Instructions       : 34
24 2019-Jan-05 20:21:28.084414 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 20:21:28.084472 - [INFO] Store Instructions : 7
26 2019-Jan-05 20:21:28.084529 - [INFO]  
27 2019-Jan-05 20:21:28.084608 - [INFO]   i32
28 2019-Jan-05 20:21:28.085263 - [DEBUG] Analyzing function: main
29 2019-Jan-05 20:21:28.085563 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 20:21:28.085627 - [INFO] Construct type hierarchy
31 2019-Jan-05 20:21:28.085688 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 20:21:28.085877 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 20:21:28.085946 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 20:21:28.086009 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 20:21:28.086120 - [DEBUG] Walking in function: main
36 2019-Jan-05 20:21:28.086206 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2019-Jan-05 20:21:28.086599 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 20:21:28.086659 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 20:21:28.086747 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 20:21:28.086810 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 20:21:28.086874 - [DEBUG] Found static call-site: %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22, ID: 6
42 2019-Jan-05 20:21:28.087213 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 20:21:28.087273 - [DEBUG] Target name: foo
44 2019-Jan-05 20:21:28.087357 - [DEBUG] Walking in function: foo
45 2019-Jan-05 20:21:28.087420 - [DEBUG] Function already visited or only declaration: foo
46 2019-Jan-05 20:21:28.087486 - [DEBUG] Found static call-site: %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
47 2019-Jan-05 20:21:28.087873 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 20:21:28.087932 - [DEBUG] Target name: getenv
49 2019-Jan-05 20:21:28.088010 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 20:21:28.088072 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 20:21:28.088136 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
52 2019-Jan-05 20:21:28.088473 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 20:21:28.088569 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-05 20:21:28.088644 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-05 20:21:28.088706 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-05 20:21:28.088770 - [DEBUG] Found static call-site: %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
57 2019-Jan-05 20:21:28.089081 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-05 20:21:28.089140 - [DEBUG] Target name: bar
59 2019-Jan-05 20:21:28.089219 - [DEBUG] Walking in function: bar
60 2019-Jan-05 20:21:28.089281 - [DEBUG] Function already visited or only declaration: bar
61 2019-Jan-05 20:21:28.089345 - [DEBUG] Found static call-site: %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
62 2019-Jan-05 20:21:28.089654 - [DEBUG] Found 1 possible target(s)
63 2019-Jan-05 20:21:28.089713 - [DEBUG] Target name: foo
64 2019-Jan-05 20:21:28.089786 - [DEBUG] Walking in function: foo
65 2019-Jan-05 20:21:28.089847 - [DEBUG] Function already visited or only declaration: foo
66 2019-Jan-05 20:21:28.089912 - [INFO] Call graph has been constructed
67 2019-Jan-05 20:21:28.089974 - [INFO] Performing analysis: plugin
68 2019-Jan-05 20:21:28.090040 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
69 2019-Jan-05 20:21:28.090554 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %ret = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22
Got call instruction
Dumping facts
=============
=============


  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Dumping facts
=============
=============


  br i1 %tobool, label %if.then, label %if.else13, !dbg !24, !phasar.instruction.id !25
Got branch instruction
Dumping facts
=============
=============


  br i1 %tobool, label %if.then, label %if.else13, !dbg !24, !phasar.instruction.id !25
Got branch instruction
Dumping facts
=============
=============


  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
=============

Added line number: 10

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
=============

Added line number: 10
Added line number: 10

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 10
Added line number: 10
Added line number: 10

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 10
Added line number: 10
Added line number: 10

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10

  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10

  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 10

  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 12
Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 10

  br label %if.end12, !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 12
Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 10

  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13

  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13

  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13

  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13

  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============

Added line number: 14
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13

  br label %if.end11, !dbg !53, !phasar.instruction.id !54
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============

Added line number: 14
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13

  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 16

  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16

  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16

  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16

  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16
Added line number: 17

  br label %if.end, !dbg !65, !phasar.instruction.id !66
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============

Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16
Added line number: 17

  br label %if.end11, !phasar.instruction.id !67
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============

Added line number: 14
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16
Added line number: 17

  br label %if.end12, !phasar.instruction.id !68
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============

Added line number: 14
Added line number: 12
Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16
Added line number: 17

  store i32 100, i32* %ret, align 4, !dbg !69, !phasar.instruction.id !70
Got store instruction
Removed 3 memory locations from facts
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16

  br label %if.end14, !dbg !71, !phasar.instruction.id !72
Got branch instruction
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16

  store i32 100, i32* %ret, align 4, !dbg !73, !phasar.instruction.id !75
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  br label %if.end14, !phasar.instruction.id !76
Got branch instruction
Dumping facts
=============
=============


  %1 = load i32, i32* %ret, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 16
Added line number: 16

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
=============


  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  br label %if.end12, !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  store i32 100, i32* %ret, align 4, !dbg !69, !phasar.instruction.id !70
Got store instruction
Removed 3 memory locations from facts
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============


  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============


  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============


  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============


  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============


  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
=============


  br label %if.end11, !dbg !53, !phasar.instruction.id !54
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
=============


  br label %if.end12, !phasar.instruction.id !68
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============


  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============


  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============


  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============


  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============


  br label %if.end11, !phasar.instruction.id !67
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============


  br label %if.end, !dbg !65, !phasar.instruction.id !66
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============


  br label %if.end11, !phasar.instruction.id !67
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============


  br label %if.end12, !phasar.instruction.id !68
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
=============


  store i32 100, i32* %ret, align 4, !dbg !69, !phasar.instruction.id !70
Got store instruction
Removed 3 memory locations from facts
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============


  br label %if.end14, !dbg !71, !phasar.instruction.id !72
Got branch instruction
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============


  %1 = load i32, i32* %ret, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
=============


  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %ret = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52

  br label %if.end14, !phasar.instruction.id !76
Got branch instruction

  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41

  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23
Got operands checking instruction (icmp)

  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts

  br i1 %tobool, label %if.then, label %if.else13, !dbg !24, !phasar.instruction.id !25
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact

  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  %1 = load i32, i32* %ret, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction

  br label %if.end12, !dbg !42, !phasar.instruction.id !43

  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46

  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47

  br label %if.end12, !phasar.instruction.id !68

  br label %if.end, !dbg !65, !phasar.instruction.id !66

  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49

  br label %if.end11, !dbg !53, !phasar.instruction.id !54

  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58

  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59

  br label %if.end11, !phasar.instruction.id !67

  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61

  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64

  store i32 100, i32* %ret, align 4, !dbg !69, !phasar.instruction.id !70
Got store instruction
Removed 3 memory locations from facts

  br label %if.end14, !dbg !71, !phasar.instruction.id !72
Got branch instruction

  store i32 100, i32* %ret, align 4, !dbg !73, !phasar.instruction.id !75
Got store instruction
Removed 0 memory locations from facts

  ret i32 %1, !dbg !79, !phasar.instruction.id !80worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 28
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%ret = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22, ID: 6
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18


Instruction:
br label %if.end14, !phasar.instruction.id !76, ID: 32
Facts:
	EMPTY


Instruction:
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23, ID: 7
Facts:
	EMPTY


Instruction:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %if.then, label %if.else13, !dbg !24, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9


Instruction:
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10


Instruction:
%1 = load i32, i32* %ret, align 4, !dbg !77, !phasar.instruction.id !78, ID: 33
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23


Instruction:
br label %if.end12, !dbg !42, !phasar.instruction.id !43, ID: 16
Facts:
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17


Instruction:
br label %if.end12, !phasar.instruction.id !68, ID: 28
Facts:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
br label %if.end, !dbg !65, !phasar.instruction.id !66, ID: 26
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49, ID: 19
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18


Instruction:
br label %if.end11, !dbg !53, !phasar.instruction.id !54, ID: 21
Facts:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18


Instruction:
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18


Instruction:
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22


Instruction:
br label %if.end11, !phasar.instruction.id !67, ID: 27
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61, ID: 24
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23


Instruction:
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23


Instruction:
store i32 100, i32* %ret, align 4, !dbg !69, !phasar.instruction.id !70, ID: 29
Facts:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
br label %if.end14, !dbg !71, !phasar.instruction.id !72, ID: 30
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icm70 2019-Jan-05 20:21:28.248319 - [INFO] Write results to file
71 2019-Jan-05 20:21:28.248539 - [INFO] Shutdown llvm and the analysis framework.

p ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23


Instruction:
store i32 100, i32* %ret, align 4, !dbg !73, !phasar.instruction.id !75, ID: 31
Facts:
	EMPTY


Instruction:
ret i32 %1, !dbg !79, !phasar.instruction.id !80, ID: 34
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23


