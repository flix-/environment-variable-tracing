0 2018-Dec-30 13:54:43.369003 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-30 13:54:43.369431 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-30 13:54:43.369781 - [INFO] No configuration file is used.
3 2018-Dec-30 13:54:43.369858 - [INFO] Program options have been successfully parsed.
4 2018-Dec-30 13:54:43.369958 - [INFO] Check program options for logical errors.
5 2018-Dec-30 13:54:43.370048 - [INFO] Set-up IR database.
6 2018-Dec-30 13:54:43.375658 - [INFO] Constructed the analysis controller.
7 2018-Dec-30 13:54:43.375773 - [INFO] Found the following IR files for this project: 
8 2018-Dec-30 13:54:43.375835 - [INFO] 	main.ll
9 2018-Dec-30 13:54:43.375895 - [INFO] Check for chosen entry points.
10 2018-Dec-30 13:54:43.375956 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-30 13:54:43.376015 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-30 13:54:43.376075 - [INFO] Preprocess module: main.ll
13 2018-Dec-30 13:54:43.376442 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-30 13:54:43.376583 - [INFO] Running ValueAnnotationPass
15 2018-Dec-30 13:54:43.376967 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-30 13:54:43.377031 - [INFO] Allocated Types    : 1
17 2018-Dec-30 13:54:43.377096 - [INFO] Allocation Sites   : 3
18 2018-Dec-30 13:54:43.377155 - [INFO] Basic Blocks       : 7
19 2018-Dec-30 13:54:43.377213 - [INFO] Calls Sites        : 4
20 2018-Dec-30 13:54:43.377271 - [INFO] Functions          : 4
21 2018-Dec-30 13:54:43.377328 - [INFO] Globals            : 1
22 2018-Dec-30 13:54:43.377386 - [INFO] Global Pointer     : 1
23 2018-Dec-30 13:54:43.377444 - [INFO] Instructions       : 25
24 2018-Dec-30 13:54:43.377502 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-30 13:54:43.377560 - [INFO] Store Instructions : 4
26 2018-Dec-30 13:54:43.377617 - [INFO]  
27 2018-Dec-30 13:54:43.377692 - [INFO]   i32
28 2018-Dec-30 13:54:43.378214 - [DEBUG] Analyzing function: main
29 2018-Dec-30 13:54:43.378485 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-30 13:54:43.378548 - [INFO] Construct type hierarchy
31 2018-Dec-30 13:54:43.378609 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-30 13:54:43.378778 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-30 13:54:43.378882 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-30 13:54:43.378946 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-30 13:54:43.379057 - [DEBUG] Walking in function: main
36 2018-Dec-30 13:54:43.379144 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-30 13:54:43.379500 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-30 13:54:43.379559 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-30 13:54:43.379646 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-30 13:54:43.379710 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-30 13:54:43.379774 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !17), !dbg !22, !phasar.instruction.id !23, ID: 6
42 2018-Dec-30 13:54:43.380050 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-30 13:54:43.380109 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-30 13:54:43.380184 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-30 13:54:43.380246 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-30 13:54:43.380310 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
47 2018-Dec-30 13:54:43.380628 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-30 13:54:43.380687 - [DEBUG] Target name: getenv
49 2018-Dec-30 13:54:43.380768 - [DEBUG] Walking in function: getenv
50 2018-Dec-30 13:54:43.380830 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-30 13:54:43.380894 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
52 2018-Dec-30 13:54:43.381178 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-30 13:54:43.381238 - [DEBUG] Target name: foo
54 2018-Dec-30 13:54:43.381315 - [DEBUG] Walking in function: foo
55 2018-Dec-30 13:54:43.381377 - [DEBUG] Function already visited or only declaration: foo
56 2018-Dec-30 13:54:43.381441 - [INFO] Call graph has been constructed
57 2018-Dec-30 13:54:43.381502 - [INFO] Performing analysis: plugin
58 2018-Dec-30 13:54:43.381569 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2018-Dec-30 13:54:43.382055 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %i = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !17), !dbg !22, !phasar.instruction.id !23
Got call instruction

  store i32 0, i32* %i, align 4, !dbg !22, !phasar.instruction.id !24
Got store instruction

  br label %for.cond, !dbg !25, !phasar.instruction.id !26
Got branch instruction

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact
Adding line: 9

  %tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Adding line: 9
Adding line: 9

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Adding line: 9
Adding line: 9
Adding line: 9

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Adding line: 9
Adding line: 9
Adding line: 9

  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br label %land.end, !phasar.instruction.id !36
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37
Got phi node instruction
Adding phi node instruction fact (constant)
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39
Got branch instruction
Adding conditional branch instruction fact
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39
Got branch instruction
Adding conditional branch instruction fact
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9

  store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9

  br label %for.inc, !dbg !45, !phasar.instruction.id !46
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9

  %2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br label %for.cond, !dbg !51, !llvm.loop !52, !phasar.instruction.id !54
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %3 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Got load instruction
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34

  %0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37
Got phi node instruction
Adding phi node instruction fact (constant)

  %tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35

  br label %land.end, !phasar.instruction.id !36

  %0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37
Got phi node instruction
Adding phi node instruction fact (constant)

  br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39
Got branch instruction
Adding conditional branch instruction fact

  br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39
Got branch instruction
Adding conditional branch instruction fact

  %1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42

  %3 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Got load instruction

  store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44

  br label %for.inc, !dbg !45, !phasar.instruction.id !46

  %2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48

  %inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49

  store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50

  br label %for.cond, !dbg !51, !llvm.loop !52, !phasar.instruction.id !54

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37
Got phi node instruction
Adding phi node instruction fact (constant)
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br label %land.end, !phasar.instruction.id !36

  %1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %3 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Got load instruction
Adding load instruction fact
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 13
Adding line: 9
Adding line: 9

  store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  br label %for.inc, !dbg !45, !phasar.instruction.id !46
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  %inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9
Adding line: 9

  store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %i = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50

  store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29

  store i32 0, i32* %i, align 4, !dbg !22, !phasar.instruction.id !24
Got store instruction

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction

  call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !17), !dbg !22, !phasar.instruction.id !23
Got call instruction

  br label %for.cond, !dbg !25, !phasar.instruction.id !26
Got branch instruction

  %tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30

  %1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32

  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34

  %tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35

  br label %land.end, !phasar.instruction.id !36

  %0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37
Got phi node instruction
Adding phi node instruction fact (constant)

  %3 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Got load instruction
Adding load instruction fact

  br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39

  %2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48

  br label %for.inc, !dbg !45, !phasar.instruction.id !46

  %inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49

  br label %for.cond, !dbg !51, !llvm.loop !52, !phasar.instruction.id !54

  ret i32 %3, !dbg !57, !phasar.instruction.id !58worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 18
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 20
worklist size: 20
worklist size: 20
worklist size: 20
worklist size: 20
worklist size: 20
worklist size: 20
worklist size: 20
worklist size: 20
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
store i32 0, i32* %i, align 4, !dbg !22, !phasar.instruction.id !24, ID: 7
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !17), !dbg !22, !phasar.instruction.id !23, ID: 6
Facts:
	EMPTY


Instruction:
br label %for.cond, !dbg !25, !phasar.instruction.id !26, ID: 8
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
br label %land.end, !phasar.instruction.id !36, ID: 14
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
%3 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
br label %for.inc, !dbg !45, !phasar.instruction.id !46, ID: 19
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call60 2018-Dec-30 13:54:43.447105 - [INFO] Write results to file
61 2018-Dec-30 13:54:43.447295 - [INFO] Shutdown llvm and the analysis framework.

, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
br label %for.cond, !dbg !51, !llvm.loop !52, !phasar.instruction.id !54, ID: 23
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


Instruction:
ret i32 %3, !dbg !57, !phasar.instruction.id !58, ID: 25
Facts:
store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9
%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10
%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13
%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15
%3 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24
%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21


