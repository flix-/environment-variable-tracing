0 2019-Jan-05 14:31:17.322152 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 14:31:17.322558 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 14:31:17.322903 - [INFO] No configuration file is used.
3 2019-Jan-05 14:31:17.322980 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 14:31:17.323077 - [INFO] Check program options for logical errors.
5 2019-Jan-05 14:31:17.323167 - [INFO] Set-up IR database.
6 2019-Jan-05 14:31:17.327840 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 14:31:17.327947 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 14:31:17.328009 - [INFO] 	main.ll
9 2019-Jan-05 14:31:17.328067 - [INFO] Check for chosen entry points.
10 2019-Jan-05 14:31:17.328129 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 14:31:17.328187 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 14:31:17.328247 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 14:31:17.328585 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 14:31:17.328718 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 14:31:17.329065 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 14:31:17.329128 - [INFO] Allocated Types    : 1
17 2019-Jan-05 14:31:17.329192 - [INFO] Allocation Sites   : 4
18 2019-Jan-05 14:31:17.329250 - [INFO] Basic Blocks       : 3
19 2019-Jan-05 14:31:17.329307 - [INFO] Calls Sites        : 4
20 2019-Jan-05 14:31:17.329364 - [INFO] Functions          : 3
21 2019-Jan-05 14:31:17.329421 - [INFO] Globals            : 1
22 2019-Jan-05 14:31:17.329478 - [INFO] Global Pointer     : 1
23 2019-Jan-05 14:31:17.329536 - [INFO] Instructions       : 21
24 2019-Jan-05 14:31:17.329593 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 14:31:17.329650 - [INFO] Store Instructions : 4
26 2019-Jan-05 14:31:17.329707 - [INFO]  
27 2019-Jan-05 14:31:17.329780 - [INFO]   i32
28 2019-Jan-05 14:31:17.330248 - [DEBUG] Analyzing function: main
29 2019-Jan-05 14:31:17.330522 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 14:31:17.330586 - [INFO] Construct type hierarchy
31 2019-Jan-05 14:31:17.330668 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 14:31:17.330831 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 14:31:17.330900 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 14:31:17.330963 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 14:31:17.331076 - [DEBUG] Walking in function: main
36 2019-Jan-05 14:31:17.331161 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %tainted, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2019-Jan-05 14:31:17.331490 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 14:31:17.331550 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 14:31:17.331636 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 14:31:17.331699 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 14:31:17.331763 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
42 2019-Jan-05 14:31:17.332058 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 14:31:17.332117 - [DEBUG] Target name: getenv
44 2019-Jan-05 14:31:17.332197 - [DEBUG] Walking in function: getenv
45 2019-Jan-05 14:31:17.332260 - [DEBUG] Function already visited or only declaration: getenv
46 2019-Jan-05 14:31:17.332323 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2019-Jan-05 14:31:17.332569 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 14:31:17.332628 - [DEBUG] Target name: llvm.dbg.declare
49 2019-Jan-05 14:31:17.332702 - [DEBUG] Walking in function: llvm.dbg.declare
50 2019-Jan-05 14:31:17.332763 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2019-Jan-05 14:31:17.332828 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40, ID: 18
52 2019-Jan-05 14:31:17.333089 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 14:31:17.333149 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-05 14:31:17.333223 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-05 14:31:17.333285 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-05 14:31:17.333346 - [INFO] Call graph has been constructed
57 2019-Jan-05 14:31:17.333407 - [INFO] Performing analysis: plugin
58 2019-Jan-05 14:31:17.333473 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2019-Jan-05 14:31:17.334000 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %tainted = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %tainted, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8

  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============

Added line number: 8
Added line number: 8

  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
=============

Added line number: 8
Added line number: 8
Added line number: 9

  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
=============

Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9

  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
=============

Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9

  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9

  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
=============

Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  br label %lor.end, !dbg !29, !phasar.instruction.id !34
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
=============

Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============

Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9

  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============

Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============

Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40
Got call instruction
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============

Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9

  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
=============

Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 10

  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43
  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
=============

Added line number: 10
Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 10

  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
=============


  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
=============


  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
=============


  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
=============


  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============


  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
=============


  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
=============


  br label %lor.end, !dbg !29, !phasar.instruction.id !34
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
=============


  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============


  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============


  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40
Got call instruction
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
=============


  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
=============


  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43
  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32
  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33
  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
=============


  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %tainted, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction

  %tainted = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28
Got operands checking instruction (icmp)
Adding fact

  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36
Got operands checking instruction (zext)
Adding fact

  br label %lor.end, !dbg !29, !phasar.instruction.id !34

  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30
Got branch instruction
Adding conditional branch instruction fact

  %tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32

  %lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33

  %0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35
Got phi node instruction
Adding phi node instruction fact (constant)

  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42
Got load instruction
Adding load instruction fact

  ret i32 0, !dbg !44, !phasar.instruction.id !45worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 15
worklist size: 15
worklist size: 15
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %tainted, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%tainted = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43, ID: 20
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37, ID: 17
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 16
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13
%0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42, ID: 19


Instruction:
store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37, ID: 17
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 16
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13
%0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35, ID: 15


Instruction:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !18), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40, ID: 18
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37, ID: 17
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 16
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13
%0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35, ID: 15


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7


Instruction:
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 16
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13
%0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35, ID: 15


Instruction:
br label %lor.end, !dbg !29, !phasar.instruction.id !34, ID: 14
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30, ID: 11
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13


Instruction:
br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30, ID: 11
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10


Instruction:
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30, ID: 11


Instruction:
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30, ID: 11
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12


Instruction:
%0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35, ID: 15
Facts:
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
br i1 %tob60 2019-Jan-05 14:31:17.394559 - [INFO] Write results to file
61 2019-Jan-05 14:31:17.394744 - [INFO] Shutdown llvm and the analysis framework.

ool, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30, ID: 11
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42, ID: 19
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37, ID: 17
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 16
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13
%0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35, ID: 15


Instruction:
ret i32 0, !dbg !44, !phasar.instruction.id !45, ID: 21
Facts:
store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43, ID: 20
store i32 %lor.ext, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !37, ID: 17
store i32 %call, i32* %tainted, align 4, !dbg !19, !phasar.instruction.id !23, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7
%tobool = icmp ne i32* %tainted, null, !dbg !27, !phasar.instruction.id !28, ID: 10
%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 16
%tobool1 = icmp ne i32* %tainted, null, !dbg !31, !phasar.instruction.id !32, ID: 12
%lnot = xor i1 %tobool1, true, !dbg !31, !phasar.instruction.id !33, ID: 13
%0 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ], !phasar.instruction.id !35, ID: 15
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42, ID: 19


