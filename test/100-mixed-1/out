0 2019-Jan-05 20:21:43.139055 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 20:21:43.139464 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 20:21:43.139815 - [INFO] No configuration file is used.
3 2019-Jan-05 20:21:43.139891 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 20:21:43.139981 - [INFO] Check program options for logical errors.
5 2019-Jan-05 20:21:43.140070 - [INFO] Set-up IR database.
6 2019-Jan-05 20:21:43.148753 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 20:21:43.148864 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 20:21:43.148925 - [INFO] 	main.ll
9 2019-Jan-05 20:21:43.148984 - [INFO] Check for chosen entry points.
10 2019-Jan-05 20:21:43.149046 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 20:21:43.149104 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 20:21:43.149164 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 20:21:43.149494 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 20:21:43.149666 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 20:21:43.150345 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 20:21:43.150410 - [INFO] Allocated Types    : 1
17 2019-Jan-05 20:21:43.150474 - [INFO] Allocation Sites   : 9
18 2019-Jan-05 20:21:43.150532 - [INFO] Basic Blocks       : 16
19 2019-Jan-05 20:21:43.150589 - [INFO] Calls Sites        : 9
20 2019-Jan-05 20:21:43.150646 - [INFO] Functions          : 3
21 2019-Jan-05 20:21:43.150704 - [INFO] Globals            : 1
22 2019-Jan-05 20:21:43.150761 - [INFO] Global Pointer     : 1
23 2019-Jan-05 20:21:43.150818 - [INFO] Instructions       : 55
24 2019-Jan-05 20:21:43.150875 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 20:21:43.150933 - [INFO] Store Instructions : 11
26 2019-Jan-05 20:21:43.150990 - [INFO]  
27 2019-Jan-05 20:21:43.151065 - [INFO]   i32
28 2019-Jan-05 20:21:43.152081 - [DEBUG] Analyzing function: main
29 2019-Jan-05 20:21:43.152656 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 20:21:43.152725 - [INFO] Construct type hierarchy
31 2019-Jan-05 20:21:43.152786 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 20:21:43.153024 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 20:21:43.153093 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 20:21:43.153156 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 20:21:43.153279 - [DEBUG] Walking in function: main
36 2019-Jan-05 20:21:43.153367 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25, ID: 11
37 2019-Jan-05 20:21:43.153876 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 20:21:43.153936 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 20:21:43.154022 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 20:21:43.154085 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 20:21:43.154149 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %untainted, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28, ID: 12
42 2019-Jan-05 20:21:43.154580 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 20:21:43.154639 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 20:21:43.154713 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 20:21:43.154775 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 20:21:43.154838 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !29, metadata !23), !dbg !30, !phasar.instruction.id !31, ID: 13
47 2019-Jan-05 20:21:43.155307 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 20:21:43.155366 - [DEBUG] Target name: llvm.dbg.declare
49 2019-Jan-05 20:21:43.155441 - [DEBUG] Walking in function: llvm.dbg.declare
50 2019-Jan-05 20:21:43.155503 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2019-Jan-05 20:21:43.155566 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
52 2019-Jan-05 20:21:43.156067 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 20:21:43.156127 - [DEBUG] Target name: getenv
54 2019-Jan-05 20:21:43.156208 - [DEBUG] Walking in function: getenv
55 2019-Jan-05 20:21:43.156270 - [DEBUG] Function already visited or only declaration: getenv
56 2019-Jan-05 20:21:43.156337 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
57 2019-Jan-05 20:21:43.156768 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-05 20:21:43.156827 - [DEBUG] Target name: llvm.dbg.declare
59 2019-Jan-05 20:21:43.156901 - [DEBUG] Walking in function: llvm.dbg.declare
60 2019-Jan-05 20:21:43.156964 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2019-Jan-05 20:21:43.157028 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
62 2019-Jan-05 20:21:43.157455 - [DEBUG] Found 1 possible target(s)
63 2019-Jan-05 20:21:43.157514 - [DEBUG] Target name: llvm.dbg.declare
64 2019-Jan-05 20:21:43.157589 - [DEBUG] Walking in function: llvm.dbg.declare
65 2019-Jan-05 20:21:43.157651 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2019-Jan-05 20:21:43.157715 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %u, metadata !81, metadata !23), !dbg !82, !phasar.instruction.id !83, ID: 37
67 2019-Jan-05 20:21:43.158142 - [DEBUG] Found 1 possible target(s)
68 2019-Jan-05 20:21:43.158201 - [DEBUG] Target name: llvm.dbg.declare
69 2019-Jan-05 20:21:43.158275 - [DEBUG] Walking in function: llvm.dbg.declare
70 2019-Jan-05 20:21:43.158338 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
71 2019-Jan-05 20:21:43.158401 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a8, metadata !87, metadata !23), !dbg !88, !phasar.instruction.id !89, ID: 40
72 2019-Jan-05 20:21:43.158848 - [DEBUG] Found 1 possible target(s)
73 2019-Jan-05 20:21:43.158906 - [DEBUG] Target name: llvm.dbg.declare
74 2019-Jan-05 20:21:43.158981 - [DEBUG] Walking in function: llvm.dbg.declare
75 2019-Jan-05 20:21:43.159043 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
76 2019-Jan-05 20:21:43.159108 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a13, metadata !110, metadata !23), !dbg !112, !phasar.instruction.id !113, ID: 51
77 2019-Jan-05 20:21:43.159536 - [DEBUG] Found 1 possible target(s)
78 2019-Jan-05 20:21:43.159595 - [DEBUG] Target name: llvm.dbg.declare
79 2019-Jan-05 20:21:43.159670 - [DEBUG] Walking in function: llvm.dbg.declare
80 2019-Jan-05 20:21:43.159732 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
81 2019-Jan-05 20:21:43.159794 - [INFO] Call graph has been constructed
82 2019-Jan-05 20:21:43.159856 - [INFO] Performing analysis: plugin
83 2019-Jan-05 20:21:43.159921 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
84 2019-Jan-05 20:21:43.160422 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %untainted = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a5 = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %u = alloca i32, align 4, !phasar.instruction.id !18
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a8 = alloca i32, align 4, !phasar.instruction.id !19
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a13 = alloca i32, align 4, !phasar.instruction.id !20
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !21
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %untainted, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !29, metadata !23), !dbg !30, !phasar.instruction.id !31
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============

Added line number: 10

  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============

Added line number: 10
Added line number: 10

  %0 = load i32, i32* %rc, align 4, !dbg !35, !phasar.instruction.id !37
Got load instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============

Added line number: 10
Added line number: 10

  %tobool = icmp ne i32 %0, 0, !dbg !35, !phasar.instruction.id !38
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============

Added line number: 10
Added line number: 10

  br i1 %tobool, label %if.then, label %if.end7, !dbg !39, !phasar.instruction.id !40
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============

Added line number: 10
Added line number: 10

  br i1 %tobool, label %if.then, label %if.end7, !dbg !39, !phasar.instruction.id !40
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============

Added line number: 10
Added line number: 10

  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
=============

Added line number: 10
Added line number: 10
Added line number: 13

  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
=============

Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13

  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============

Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 13

  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============

Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 13

  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============

Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13

  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============

Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13

  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============

Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13

  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============

Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13

  br label %sw.bb, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============

Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13

  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============

Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19

  switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============

Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19

  switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============

Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19

  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19

  br label %sw.bb4, !dbg !65, !phasar.instruction.id !66
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19

  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19
Added line number: 25

  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19
Added line number: 25
Added line number: 25

  br label %sw.epilog, !dbg !71, !phasar.instruction.id !72
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19
Added line number: 25
Added line number: 25

  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28

  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  br label %sw.epilog6, !dbg !77, !phasar.instruction.id !78
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  br label %if.end, !dbg !79, !phasar.instruction.id !80
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 13
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  call void @llvm.dbg.declare(metadata i32* %u, metadata !81, metadata !23), !dbg !82, !phasar.instruction.id !83
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  store i32 0, i32* %u, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  br label %if.end7, !dbg !85, !phasar.instruction.id !86
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  call void @llvm.dbg.declare(metadata i32* %a8, metadata !87, metadata !23), !dbg !88, !phasar.instruction.id !89
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  store i32 0, i32* %a8, align 4, !dbg !88, !phasar.instruction.id !90
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  %4 = load i32, i32* %untainted, align 4, !dbg !91, !phasar.instruction.id !93
Got load instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  %tobool9 = icmp ne i32 %4, 0, !dbg !91, !phasar.instruction.id !94
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  br i1 %tobool9, label %if.then10, label %if.else, !dbg !95, !phasar.instruction.id !96
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  br i1 %tobool9, label %if.then10, label %if.else, !dbg !95, !phasar.instruction.id !96
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  store i32 1, i32* %a8, align 4, !dbg !97, !phasar.instruction.id !99
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  br label %if.end11, !dbg !100, !phasar.instruction.id !101
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  store i32 2, i32* %a8, align 4, !dbg !102, !phasar.instruction.id !104
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  br label %if.end11, !phasar.instruction.id !105
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  %5 = load i32, i32* %untainted, align 4, !dbg !106, !phasar.instruction.id !107
Got load instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  switch i32 %5, label %sw.epilog14 [
    i32 0, label %sw.bb12
  ], !dbg !108, !phasar.instruction.id !109
Got switch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  switch i32 %5, label %sw.epilog14 [
    i32 0, label %sw.bb12
  ], !dbg !108, !phasar.instruction.id !109
Got switch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  call void @llvm.dbg.declare(metadata i32* %a13, metadata !110, metadata !23), !dbg !112, !phasar.instruction.id !113
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  store i32 0, i32* %a13, align 4, !dbg !112, !phasar.instruction.id !114
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28

  br label %sw.epilog14, !dbg !115, !phasar.instruction.id !116
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  %6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
  %6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118
=============

Added line number: 22
Added line number: 17
Added line number: 10
Added line number: 10
Added line number: 13
Added line number: 13
Added line number: 14
Added line number: 19
Added line number: 25
Added line number: 25
Added line number: 28
Added line number: 28
Added line number: 49

  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============


  %0 = load i32, i32* %rc, align 4, !dbg !35, !phasar.instruction.id !37
Got load instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============


  %tobool = icmp ne i32 %0, 0, !dbg !35, !phasar.instruction.id !38
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============


  br i1 %tobool, label %if.then, label %if.end7, !dbg !39, !phasar.instruction.id !40
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============


  br i1 %tobool, label %if.then, label %if.end7, !dbg !39, !phasar.instruction.id !40
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
=============


  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
=============


  call void @llvm.dbg.declare(metadata i32* %a8, metadata !87, metadata !23), !dbg !88, !phasar.instruction.id !89
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
=============


  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============


  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============


  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============


  call void @llvm.dbg.declare(metadata i32* %u, metadata !81, metadata !23), !dbg !82, !phasar.instruction.id !83
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============


  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============


  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============


  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============


  br label %sw.bb, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
=============


  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============


  switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============


  switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============


  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
=============


  br label %sw.bb4, !dbg !65, !phasar.instruction.id !66
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
=============


  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
=============


  br label %sw.epilog, !dbg !71, !phasar.instruction.id !72
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
=============


  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
=============


  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  br label %sw.epilog6, !dbg !77, !phasar.instruction.id !78
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  br label %if.end, !dbg !79, !phasar.instruction.id !80
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  call void @llvm.dbg.declare(metadata i32* %u, metadata !81, metadata !23), !dbg !82, !phasar.instruction.id !83
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  store i32 0, i32* %u, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  br label %if.end7, !dbg !85, !phasar.instruction.id !86
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  call void @llvm.dbg.declare(metadata i32* %a8, metadata !87, metadata !23), !dbg !88, !phasar.instruction.id !89
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  store i32 0, i32* %a8, align 4, !dbg !88, !phasar.instruction.id !90
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  %4 = load i32, i32* %untainted, align 4, !dbg !91, !phasar.instruction.id !93
Got load instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  %tobool9 = icmp ne i32 %4, 0, !dbg !91, !phasar.instruction.id !94
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  br i1 %tobool9, label %if.then10, label %if.else, !dbg !95, !phasar.instruction.id !96
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  br i1 %tobool9, label %if.then10, label %if.else, !dbg !95, !phasar.instruction.id !96
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  store i32 1, i32* %a8, align 4, !dbg !97, !phasar.instruction.id !99
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  store i32 2, i32* %a8, align 4, !dbg !102, !phasar.instruction.id !104
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  br label %if.end11, !dbg !100, !phasar.instruction.id !101
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  %5 = load i32, i32* %untainted, align 4, !dbg !106, !phasar.instruction.id !107
Got load instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  br label %if.end11, !phasar.instruction.id !105
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  switch i32 %5, label %sw.epilog14 [
    i32 0, label %sw.bb12
  ], !dbg !108, !phasar.instruction.id !109
Got switch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  switch i32 %5, label %sw.epilog14 [
    i32 0, label %sw.bb12
  ], !dbg !108, !phasar.instruction.id !109
Got switch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  %6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
  %6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118
=============


  call void @llvm.dbg.declare(metadata i32* %a13, metadata !110, metadata !23), !dbg !112, !phasar.instruction.id !113
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  store i32 0, i32* %a13, align 4, !dbg !112, !phasar.instruction.id !114
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  br label %sw.epilog14, !dbg !115, !phasar.instruction.id !116
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64
  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55
  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50
  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69
  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75
  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %untainted = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64

  store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55

  store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !21
Got store instruction
Removed 0 memory locations from facts

  %a8 = alloca i32, align 4, !phasar.instruction.id !19
Got operands checking instruction (alloca)

  %u = alloca i32, align 4, !phasar.instruction.id !18
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %a5 = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %untainted, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25
Got call instruction

  %a13 = alloca i32, align 4, !phasar.instruction.id !20
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !29, metadata !23), !dbg !30, !phasar.instruction.id !31
Got call instruction

  %0 = load i32, i32* %rc, align 4, !dbg !35, !phasar.instruction.id !37
Got load instruction

  %tobool = icmp ne i32 %0, 0, !dbg !35, !phasar.instruction.id !38
Got operands checking instruction (icmp)

  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44
Got load instruction
Adding load instruction fact

  %4 = load i32, i32* %untainted, align 4, !dbg !91, !phasar.instruction.id !93
Got load instruction

  br i1 %tobool, label %if.then, label %if.end7, !dbg !39, !phasar.instruction.id !40
Got branch instruction

  %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45
Got operands checking instruction (icmp)
Adding fact

  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50

  br label %if.end7, !dbg !85, !phasar.instruction.id !86
Got branch instruction

  br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47
Got branch instruction
Adding conditional branch instruction fact

  br label %sw.bb, !dbg !56, !phasar.instruction.id !57

  %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59

  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52

  br label %sw.bb4, !dbg !65, !phasar.instruction.id !66

  br label %if.end, !dbg !79, !phasar.instruction.id !80

  switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61

  call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69

  store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70

  br label %sw.epilog, !dbg !71, !phasar.instruction.id !72

  call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75

  store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76

  br label %sw.epilog6, !dbg !77, !phasar.instruction.id !78

  call void @llvm.dbg.declare(metadata i32* %u, metadata !81, metadata !23), !dbg !82, !phasar.instruction.id !83
Got call instruction

  store i32 0, i32* %u, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removed 0 memory locations from facts

  call void @llvm.dbg.declare(metadata i32* %a8, metadata !87, metadata !23), !dbg !88, !phasar.instruction.id !89
Got call instruction

  store i32 0, i32* %a8, align 4, !dbg !88, !phasar.instruction.id !90
Got store instruction
Removed 0 memory locations from facts

  %tobool9 = icmp ne i32 %4, 0, !dbg !91, !phasar.instruction.id !94
Got operands checking instruction (icmp)

  %5 = load i32, i32* %untainted, align 4, !dbg !106, !phasar.instruction.id !107
Got load instruction

  br label %if.end11, !phasar.instruction.id !105
Got branch instruction

  br i1 %tobool9, label %if.then10, label %if.else, !dbg !95, !phasar.instruction.id !96
Got branch instruction

  store i32 1, i32* %a8, align 4, !dbg !97, !phasar.instruction.id !99
Got store instruction
Removed 0 memory locations from facts

  br label %if.end11, !dbg !100, !phasar.instruction.id !101
Got branch instruction

  store i32 2, i32* %a8, align 4, !dbg !102, !phasar.instruction.id !104
Got store instruction
Removed 0 memory locations from facts

  %6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118
Got load instruction
Adding load instruction fact

  br label %sw.epilog14, !dbg !115, !phasar.instruction.id !116
Got branch instruction

  switch i32 %5, label %sw.epilog14 [
    i32 0, label %sw.bb12
  ], !dbg !108, !phasar.instruction.id !109
Got switch instruction

  call void @llvm.dbg.declare(metadata i32* %a13, metadata !110, metadata !23), !dbg !112, !phasar.instruction.id !113
Got call instruction

  store i32 0, i32* %a13, align 4, !dbg !112, !phasar.instruction.id !114
Got store instruction
Removed 0 memory locations from facts

  ret i32 %6, !dbg !119, !phasar.instruction.id !120worklist size: 60
worklist size: 59
worklist size: 58
worklist size: 57
worklist size: 56
worklist size: 55
worklist size: 54
worklist size: 53
worklist size: 52
worklist size: 51
worklist size: 50
worklist size: 49
worklist size: 48
worklist size: 47
worklist size: 47
worklist size: 47
worklist size: 47
worklist size: 48
worklist size: 48
worklist size: 48
worklist size: 48
worklist size: 49
worklist size: 49
worklist size: 49
worklist size: 50
worklist size: 50
worklist size: 50
worklist size: 50
worklist size: 50
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 51
worklist size: 52
worklist size: 52
worklist size: 52
worklist size: 52
worklist size: 52
worklist size: 52
worklist size: 51
worklist size: 52
worklist size: 52
worklist size: 52
worklist size: 52
worklist size: 52
worklist size: 51
worklist size: 50
worklist size: 49
worklist size: 48
worklist size: 47
worklist size: 46
worklist size: 45
worklist size: 44
worklist size: 43
worklist size: 42
worklist size: 41
worklist size: 40
worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%untainted = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
Facts:
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26


Instruction:
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !21, ID: 10
Facts:
	EMPTY


Instruction:
%a8 = alloca i32, align 4, !phasar.instruction.id !19, ID: 8
Facts:
	EMPTY


Instruction:
%u = alloca i32, align 4, !phasar.instruction.id !18, ID: 7
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %untainted, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28, ID: 12
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25, ID: 11
Facts:
	EMPTY


Instruction:
%a13 = alloca i32, align 4, !phasar.instruction.id !20, ID: 9
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !29, metadata !23), !dbg !30, !phasar.instruction.id !31, ID: 13
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14


Instruction:
%tobool = icmp ne i32 %0, 0, !dbg !35, !phasar.instruction.id !38, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14


Instruction:
%4 = load i32, i32* %untainted, align 4, !dbg !91, !phasar.instruction.id !93, ID: 42
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
br i1 %tobool, label %if.then, label %if.end7, !dbg !39, !phasar.instruction.id !40, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14


Instruction:
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21


Instruction:
br label %if.end7, !dbg !85, !phasar.instruction.id !86, ID: 39
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20


Instruction:
br label %sw.bb, !dbg !56, !phasar.instruction.id !57, ID: 25
Facts:
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21


Instruction:
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
Facts:
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21


Instruction:
switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
Facts:
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21


Instruction:
br label %sw.bb4, !dbg !65, !phasar.instruction.id !66, ID: 29
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26


Instruction:
br label %if.end, !dbg !79, !phasar.instruction.id !80, ID: 36
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61, ID: 27
Facts:
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26


Instruction:
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30


Instruction:
br label %sw.epilog, !dbg !71, !phasar.instruction.id !72, ID: 32
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31


Instruction:
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31


Instruction:
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33


Instruction:
br label %sw.epilog6, !dbg !77, !phasar.instruction.id !78, ID: 35
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
call void @llvm.dbg.declare(metadata i32* %u, metadata !81, metadata !23), !dbg !82, !phasar.instruction.id !83, ID: 37
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
store i32 0, i32* %u, align 4, !dbg !82, !phasar.instruction.id !84, ID: 38
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
call void @llvm.dbg.declare(metadata i32* %a8, metadata !87, metadata !23), !dbg !88, !phasar.instruction.id !89, ID: 40
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
store i32 0, i32* %a8, align 4, !dbg !88, !phasar.instruction.id !90, ID: 41
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
%tobool9 = icmp ne i32 %4, 0, !dbg !91, !phasar.instruction.id !94, ID: 43
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
%5 = load i32, i32* %untainted, align 4, !dbg !106, !phasar.instruction.id !107, ID: 49
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
br label %if.end11, !phasar.instruction.id !105, ID: 48
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
br i1 %tobool9, label %if.then10, label %if.else, !dbg !95, !phasar.instruction.id !96, ID: 44
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
store i32 1, i32* %a8, align 4, !dbg !97, !phasar.instruction.id !99, ID: 45
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
br label %if.end11, !dbg !100, !phasar.instruction.id !101, ID: 46
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
store i32 2, i32* %a8, align 4, !dbg !102, !phasar.instruction.id !104, ID: 47
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
%6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118, ID: 54
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
br label %sw.epilog14, !dbg !115, !phasar.instruction.id !116, ID: 53
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
switch i32 %5, label %sw.epilog14 [
    i32 0, label %sw.bb12
  ], !dbg !108, !phasar.instruction.id !109, ID: 50
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
call void @llvm.dbg.declare(metadata i32* %a13, metadata !110, metadata !23), !dbg !112, !phasar.instruction.id !113, ID: 51
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
store i32 0, i32* %a13, align 4, !dbg !112, !phasar.instruction.id !114, ID: 52
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 85 2019-Jan-05 20:21:43.710093 - [INFO] Write results to file
86 2019-Jan-05 20:21:43.710299 - [INFO] Shutdown llvm and the analysis framework.

22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34


Instruction:
ret i32 %6, !dbg !119, !phasar.instruction.id !120, ID: 55
Facts:
store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14
%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19
%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20
%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26
call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30
store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33
store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
%6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118, ID: 54


