0 2018-Dec-28 10:33:56.543054 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 10:33:56.543470 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 10:33:56.543824 - [INFO] No configuration file is used.
3 2018-Dec-28 10:33:56.543900 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 10:33:56.544032 - [INFO] Check program options for logical errors.
5 2018-Dec-28 10:33:56.544125 - [INFO] Set-up IR database.
6 2018-Dec-28 10:33:56.549729 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 10:33:56.549848 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 10:33:56.549910 - [INFO] 	main.ll
9 2018-Dec-28 10:33:56.549968 - [INFO] Check for chosen entry points.
10 2018-Dec-28 10:33:56.550029 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 10:33:56.550088 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 10:33:56.550148 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 10:33:56.550480 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 10:33:56.550605 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 10:33:56.551074 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 10:33:56.551150 - [INFO] Allocated Types    : 1
17 2018-Dec-28 10:33:56.551258 - [INFO] Allocation Sites   : 3
18 2018-Dec-28 10:33:56.551317 - [INFO] Basic Blocks       : 7
19 2018-Dec-28 10:33:56.551374 - [INFO] Calls Sites        : 4
20 2018-Dec-28 10:33:56.551431 - [INFO] Functions          : 4
21 2018-Dec-28 10:33:56.551488 - [INFO] Globals            : 1
22 2018-Dec-28 10:33:56.551546 - [INFO] Global Pointer     : 1
23 2018-Dec-28 10:33:56.551602 - [INFO] Instructions       : 21
24 2018-Dec-28 10:33:56.551659 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 10:33:56.551717 - [INFO] Store Instructions : 3
26 2018-Dec-28 10:33:56.551774 - [INFO]  
27 2018-Dec-28 10:33:56.551856 - [INFO]   i32
28 2018-Dec-28 10:33:56.552393 - [DEBUG] Analyzing function: main
29 2018-Dec-28 10:33:56.552659 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 10:33:56.552722 - [INFO] Construct type hierarchy
31 2018-Dec-28 10:33:56.552783 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 10:33:56.552951 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 10:33:56.553025 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 10:33:56.553089 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 10:33:56.553206 - [DEBUG] Walking in function: main
36 2018-Dec-28 10:33:56.553297 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-28 10:33:56.553664 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 10:33:56.553725 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 10:33:56.553813 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 10:33:56.553877 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 10:33:56.553941 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27, ID: 7
42 2018-Dec-28 10:33:56.554318 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 10:33:56.554378 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-28 10:33:56.554454 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-28 10:33:56.554516 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-28 10:33:56.554580 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
47 2018-Dec-28 10:33:56.554901 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 10:33:56.554960 - [DEBUG] Target name: getenv
49 2018-Dec-28 10:33:56.555041 - [DEBUG] Walking in function: getenv
50 2018-Dec-28 10:33:56.555103 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-28 10:33:56.555167 - [DEBUG] Found static call-site: %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48, ID: 17
52 2018-Dec-28 10:33:56.555445 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 10:33:56.555504 - [DEBUG] Target name: foo
54 2018-Dec-28 10:33:56.555581 - [DEBUG] Walking in function: foo
55 2018-Dec-28 10:33:56.555642 - [DEBUG] Function already visited or only declaration: foo
56 2018-Dec-28 10:33:56.555704 - [INFO] Call graph has been constructed
57 2018-Dec-28 10:33:56.555766 - [INFO] Performing analysis: plugin
58 2018-Dec-28 10:33:56.555831 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2018-Dec-28 10:33:56.556325 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %do.cond, !dbg !35, !phasar.instruction.id !36
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 13

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 13
Adding line: 13
Adding line: 13

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 13
Adding line: 13
Adding line: 13

flow()
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  br label %do.cond2, !dbg !45, !phasar.instruction.id !46
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49
===========================
Got operands checking instruction (icmp)
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

flow()
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br label %do.cond2, !dbg !45, !phasar.instruction.id !46
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49
===========================
Got operands checking instruction (icmp)
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 13
Adding line: 13

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br label %do.cond, !dbg !35, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

flow()
  br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 3
New Facts: 2

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 1
New Facts: 4
join()
Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 2
New Facts: 4
join()
Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 4
join()
Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 4
join()
Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

flow()
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 4
join()
Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  br label %do.cond2, !dbg !45, !phasar.instruction.id !46
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49
===========================
Got operands checking instruction (icmp)
sqSubSetEqual()
Old Facts: 2
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 6
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 17

flow()
  br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 4
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

flow()
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 6
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

flow()
  br label %do.cond, !dbg !35, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 6
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 6
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 6
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 6
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

flow()
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 4
New Facts: 5
join()
Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

flow()
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================
Got store instruction
Removing store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
===========================
Got call instruction

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23
===========================
Got branch instruction

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
===========================

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
===========================
Got store instruction
Removing store instruction
Adding store instruction

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
===========================

flow()
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
===========================

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
===========================
Got store instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27
===========================
Got call instruction

flow()
  br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31
===========================
Got branch instruction

flow()
  br label %do.cond, !dbg !35, !phasar.instruction.id !36
===========================

flow()
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
===========================

flow()
  br label %do.cond2, !dbg !45, !phasar.instruction.id !46
===========================
Got branch instruction

flow()
  %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48
===========================
Got call instruction

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49
===========================
Got operands checking instruction (icmp)

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
===========================
Got branch instruction

flow()
  ret i32 %1, !dbg !53, !phasar.instruction.id !54worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 12
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23, ID: 6
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27, ID: 7
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31, ID: 8
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
br label %do.cond, !dbg !35, !phasar.instruction.id !36, ID: 10
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
br label %do.cond2, !dbg !45, !phasar.instruction.id !46, ID: 16
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
%call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48, ID: 17
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, ali60 2018-Dec-28 10:33:56.597294 - [INFO] Write results to file
61 2018-Dec-28 10:33:56.597521 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
gn 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
%tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49, ID: 18
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52, ID: 20
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50, ID: 19
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
ret i32 %1, !dbg !53, !phasar.instruction.id !54, ID: 21
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
%1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52, ID: 20


