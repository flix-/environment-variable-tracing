0 2018-Dec-31 15:54:31.001957 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-31 15:54:31.002392 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-31 15:54:31.002737 - [INFO] No configuration file is used.
3 2018-Dec-31 15:54:31.002842 - [INFO] Program options have been successfully parsed.
4 2018-Dec-31 15:54:31.002940 - [INFO] Check program options for logical errors.
5 2018-Dec-31 15:54:31.003030 - [INFO] Set-up IR database.
6 2018-Dec-31 15:54:31.008481 - [INFO] Constructed the analysis controller.
7 2018-Dec-31 15:54:31.008596 - [INFO] Found the following IR files for this project: 
8 2018-Dec-31 15:54:31.008657 - [INFO] 	main.ll
9 2018-Dec-31 15:54:31.008717 - [INFO] Check for chosen entry points.
10 2018-Dec-31 15:54:31.008778 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-31 15:54:31.008836 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-31 15:54:31.008897 - [INFO] Preprocess module: main.ll
13 2018-Dec-31 15:54:31.009241 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-31 15:54:31.009368 - [INFO] Running ValueAnnotationPass
15 2018-Dec-31 15:54:31.009760 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-31 15:54:31.009825 - [INFO] Allocated Types    : 1
17 2018-Dec-31 15:54:31.009890 - [INFO] Allocation Sites   : 3
18 2018-Dec-31 15:54:31.009948 - [INFO] Basic Blocks       : 7
19 2018-Dec-31 15:54:31.010005 - [INFO] Calls Sites        : 4
20 2018-Dec-31 15:54:31.010063 - [INFO] Functions          : 4
21 2018-Dec-31 15:54:31.010120 - [INFO] Globals            : 1
22 2018-Dec-31 15:54:31.010178 - [INFO] Global Pointer     : 1
23 2018-Dec-31 15:54:31.010235 - [INFO] Instructions       : 21
24 2018-Dec-31 15:54:31.010293 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-31 15:54:31.010350 - [INFO] Store Instructions : 3
26 2018-Dec-31 15:54:31.010407 - [INFO]  
27 2018-Dec-31 15:54:31.010482 - [INFO]   i32
28 2018-Dec-31 15:54:31.010963 - [DEBUG] Analyzing function: main
29 2018-Dec-31 15:54:31.011238 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-31 15:54:31.011302 - [INFO] Construct type hierarchy
31 2018-Dec-31 15:54:31.011363 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-31 15:54:31.011535 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-31 15:54:31.011605 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-31 15:54:31.011667 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-31 15:54:31.011775 - [DEBUG] Walking in function: main
36 2018-Dec-31 15:54:31.011861 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-31 15:54:31.012198 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-31 15:54:31.012258 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-31 15:54:31.012343 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-31 15:54:31.012407 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-31 15:54:31.012472 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27, ID: 7
42 2018-Dec-31 15:54:31.012737 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-31 15:54:31.012816 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-31 15:54:31.012893 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-31 15:54:31.012956 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-31 15:54:31.013020 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
47 2018-Dec-31 15:54:31.013336 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-31 15:54:31.013395 - [DEBUG] Target name: getenv
49 2018-Dec-31 15:54:31.013476 - [DEBUG] Walking in function: getenv
50 2018-Dec-31 15:54:31.013538 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-31 15:54:31.013602 - [DEBUG] Found static call-site: %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48, ID: 17
52 2018-Dec-31 15:54:31.013878 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-31 15:54:31.013938 - [DEBUG] Target name: foo
54 2018-Dec-31 15:54:31.014015 - [DEBUG] Walking in function: foo
55 2018-Dec-31 15:54:31.014076 - [DEBUG] Function already visited or only declaration: foo
56 2018-Dec-31 15:54:31.014138 - [INFO] Call graph has been constructed
57 2018-Dec-31 15:54:31.014199 - [INFO] Performing analysis: plugin
58 2018-Dec-31 15:54:31.014265 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2018-Dec-31 15:54:31.014751 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removing memory location
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23
Got branch instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27
Got call instruction
Dumping facts
=============
=============


  br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31
Got branch instruction
Dumping facts
=============
=============


  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
Got store instruction
Removing memory location
Dumping facts
=============
=============


  br label %do.cond, !dbg !35, !phasar.instruction.id !36
Got branch instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13

  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 13
Adding line: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 13
Adding line: 13

  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
Got load instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Got store instruction
Removing memory location
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  br label %do.cond2, !dbg !45, !phasar.instruction.id !46
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48
Got call instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  %tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49
Got operands checking instruction (icmp)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
Got load instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============


  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============


  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
Got load instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Got store instruction
Removing memory location
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  br label %do.cond2, !dbg !45, !phasar.instruction.id !46
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48
Got call instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  %tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49
Got operands checking instruction (icmp)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27
Got call instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============

Adding line: 13
Adding line: 13

  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
Got load instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  br label %do.cond, !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

  br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 13

  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============


  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
Got load instruction
Adding load instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 13
Adding line: 12
Adding line: 14

  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

  br label %do.cond2, !dbg !45, !phasar.instruction.id !46
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

  %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48
Got call instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

  %tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49
Got operands checking instruction (icmp)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

  call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27
Got call instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
Got load instruction
Adding load instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 17

  br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

  br label %do.cond, !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============


  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14
Adding line: 13

  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
Got load instruction
Adding load instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============

Adding line: 13
Adding line: 14
Adding line: 13
Adding line: 12
Adding line: 14

  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39
  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38
  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34
  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23
Got branch instruction

  %tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44
Got store instruction
Removing memory location
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38

  store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removing memory location

  call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27
Got call instruction

  br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31
Got branch instruction

  br label %do.cond, !dbg !35, !phasar.instruction.id !36

  %0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
Got load instruction
Adding load instruction fact

  br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40

  br label %do.cond2, !dbg !45, !phasar.instruction.id !46
Got branch instruction

  %call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48
Got call instruction

  %tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49
Got operands checking instruction (icmp)

  %1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52
Got load instruction
Adding load instruction fact

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50
Got branch instruction

  ret i32 %1, !dbg !53, !phasar.instruction.id !54worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 12
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23, ID: 6
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !24, metadata !17), !dbg !26, !phasar.instruction.id !27, ID: 7
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
br label %do.body1, !dbg !28, !llvm.loop !29, !phasar.instruction.id !31, ID: 8
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
br label %do.cond, !dbg !35, !phasar.instruction.id !36, ID: 10
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
br i1 %tobool, label %do.body1, label %do.end, !dbg !35, !llvm.loop !29, !phasar.instruction.id !40, ID: 13


Instruction:
br label %do.cond2, !dbg !45, !phasar.instruction.id !46, ID: 16
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
%call3 = call i32 (...) @foo(), !dbg !47, !phasar.instruction.id !48, ID: 17
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, ali60 2018-Dec-31 15:54:31.091020 - [INFO] Write results to file
61 2018-Dec-31 15:54:31.091227 - [INFO] Shutdown llvm and the analysis framework.

gn 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
%tobool4 = icmp ne i32 %call3, 0, !dbg !45, !phasar.instruction.id !49, ID: 18
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52, ID: 20
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
br i1 %tobool4, label %do.body, label %do.end5, !dbg !45, !llvm.loop !21, !phasar.instruction.id !50, ID: 19
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14


Instruction:
ret i32 %1, !dbg !53, !phasar.instruction.id !54, ID: 21
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !35, !phasar.instruction.id !39, ID: 12
store i32 %0, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !37, !phasar.instruction.id !38, ID: 11
store i32 1, i32* %a, align 4, !dbg !32, !phasar.instruction.id !34, ID: 9
%0 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 14
%1 = load i32, i32* %rc, align 4, !dbg !51, !phasar.instruction.id !52, ID: 20


