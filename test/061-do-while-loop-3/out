0 2019-Jan-05 14:31:28.329870 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 14:31:28.330278 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 14:31:28.330650 - [INFO] No configuration file is used.
3 2019-Jan-05 14:31:28.330728 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 14:31:28.330825 - [INFO] Check program options for logical errors.
5 2019-Jan-05 14:31:28.330914 - [INFO] Set-up IR database.
6 2019-Jan-05 14:31:28.335996 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 14:31:28.336106 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 14:31:28.336167 - [INFO] 	main.ll
9 2019-Jan-05 14:31:28.336225 - [INFO] Check for chosen entry points.
10 2019-Jan-05 14:31:28.336287 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 14:31:28.336345 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 14:31:28.336406 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 14:31:28.336732 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 14:31:28.336865 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 14:31:28.337213 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 14:31:28.337316 - [INFO] Allocated Types    : 1
17 2019-Jan-05 14:31:28.337382 - [INFO] Allocation Sites   : 3
18 2019-Jan-05 14:31:28.337441 - [INFO] Basic Blocks       : 7
19 2019-Jan-05 14:31:28.337499 - [INFO] Calls Sites        : 4
20 2019-Jan-05 14:31:28.337557 - [INFO] Functions          : 4
21 2019-Jan-05 14:31:28.337615 - [INFO] Globals            : 1
22 2019-Jan-05 14:31:28.337673 - [INFO] Global Pointer     : 1
23 2019-Jan-05 14:31:28.337731 - [INFO] Instructions       : 20
24 2019-Jan-05 14:31:28.337789 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 14:31:28.337847 - [INFO] Store Instructions : 3
26 2019-Jan-05 14:31:28.337905 - [INFO]  
27 2019-Jan-05 14:31:28.337985 - [INFO]   i32
28 2019-Jan-05 14:31:28.338454 - [DEBUG] Analyzing function: main
29 2019-Jan-05 14:31:28.338713 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 14:31:28.338778 - [INFO] Construct type hierarchy
31 2019-Jan-05 14:31:28.338838 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 14:31:28.339002 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 14:31:28.339071 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 14:31:28.339133 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 14:31:28.339243 - [DEBUG] Walking in function: main
36 2019-Jan-05 14:31:28.339328 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2019-Jan-05 14:31:28.339662 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 14:31:28.339722 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 14:31:28.339808 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 14:31:28.339871 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 14:31:28.339936 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
42 2019-Jan-05 14:31:28.340202 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 14:31:28.340262 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 14:31:28.340336 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 14:31:28.340398 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 14:31:28.340462 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
47 2019-Jan-05 14:31:28.340792 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 14:31:28.340851 - [DEBUG] Target name: getenv
49 2019-Jan-05 14:31:28.340931 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 14:31:28.340994 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 14:31:28.341057 - [DEBUG] Found static call-site: %call3 = call i32 (...) @foo(), !dbg !44, !phasar.instruction.id !45, ID: 16
52 2019-Jan-05 14:31:28.341332 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 14:31:28.341391 - [DEBUG] Target name: foo
54 2019-Jan-05 14:31:28.341469 - [DEBUG] Walking in function: foo
55 2019-Jan-05 14:31:28.341531 - [DEBUG] Function already visited or only declaration: foo
56 2019-Jan-05 14:31:28.341593 - [INFO] Call graph has been constructed
57 2019-Jan-05 14:31:28.341654 - [INFO] Performing analysis: plugin
58 2019-Jan-05 14:31:28.341720 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2019-Jan-05 14:31:28.342220 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23
Got branch instruction
Dumping facts
=============
=============


  store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30
Got branch instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
Got call instruction
Dumping facts
=============
=============


  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  br label %do.cond, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13

  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 13

  br label %do.cond2, !dbg !42, !phasar.instruction.id !43
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 13

  %call3 = call i32 (...) @foo(), !dbg !44, !phasar.instruction.id !45
Got call instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 13

  %tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46
Got operands checking instruction (icmp)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 13

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 13

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 13

  %0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
Got load instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 13

  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============


  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============


  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 13

  br label %do.cond2, !dbg !42, !phasar.instruction.id !43
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============


  %call3 = call i32 (...) @foo(), !dbg !44, !phasar.instruction.id !45
Got call instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============


  %tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46
Got operands checking instruction (icmp)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============


  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============


  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============


  store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 13

  %0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
Got load instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============


  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12
Added line number: 13

  br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
=============


  br label %do.cond, !dbg !36, !phasar.instruction.id !37
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12
Added line number: 13

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12
Added line number: 13

  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12
Added line number: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12
Added line number: 13

  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12
Added line number: 13

  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12
Added line number: 13

  br label %do.cond2, !dbg !42, !phasar.instruction.id !43
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12

  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41
=============


  %call3 = call i32 (...) @foo(), !dbg !44, !phasar.instruction.id !45
Got call instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12

  %tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46
Got operands checking instruction (icmp)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12

  store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12

  %0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
Got load instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
=============

Added line number: 13
Added line number: 13
Added line number: 12
Added line number: 12

  br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30
Got branch instruction
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39
  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35
  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23
Got branch instruction

  %tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39

  store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35

  store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts

  br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34

  br label %do.cond, !dbg !36, !phasar.instruction.id !37

  br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41

  br label %do.cond2, !dbg !42, !phasar.instruction.id !43
Got branch instruction

  %call3 = call i32 (...) @foo(), !dbg !44, !phasar.instruction.id !45
Got call instruction

  %tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46
Got operands checking instruction (icmp)

  %0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
Got load instruction

  br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47
Got branch instruction

  ret i32 %0, !dbg !50, !phasar.instruction.id !51worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 10
worklist size: 11
worklist size: 11
worklist size: 11
worklist size: 11
worklist size: 11
worklist size: 12
worklist size: 12
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
br label %do.body, !dbg !20, !llvm.loop !21, !phasar.instruction.id !23, ID: 6
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14


Instruction:
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14


Instruction:
store i32 42, i32* %rc, align 4, !dbg !24, !phasar.instruction.id !26, ID: 7
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br label %do.body1, !dbg !27, !llvm.loop !28, !phasar.instruction.id !30, ID: 8
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14


Instruction:
br label %do.cond, !dbg !36, !phasar.instruction.id !37, ID: 11
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14


Instruction:
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14


Instruction:
br label %do.cond2, !dbg !42, !phasar.instruction.id !43, ID: 15
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9
br i1 %tobool, label %do.body1, label %do.end, !dbg !36, !llvm.loop !28, !phasar.instruction.id !41, ID: 14


Instruction:
%call3 = call i32 (...) @foo(), !dbg !44, !phasar.instruction.id !45, ID: 16
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9


Instruction:
%tobool4 = icmp ne i32 %call3, 0, !dbg !42, !phasar.instruction.id !46, ID: 17
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 19
Facts:
%tobool = icmp ne i32 %call, 0, 60 2019-Jan-05 14:31:28.399416 - [INFO] Write results to file
61 2019-Jan-05 14:31:28.399594 - [INFO] Shutdown llvm and the analysis framework.

!dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9


Instruction:
br i1 %tobool4, label %do.body, label %do.end5, !dbg !42, !llvm.loop !21, !phasar.instruction.id !47, ID: 18
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9


Instruction:
ret i32 %0, !dbg !50, !phasar.instruction.id !51, ID: 20
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !36, !phasar.instruction.id !40, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !38, !phasar.instruction.id !39, ID: 12
store i32 1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !35, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !31, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 9


