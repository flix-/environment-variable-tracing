0 2018-Dec-31 15:54:25.309895 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-31 15:54:25.310321 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-31 15:54:25.310664 - [INFO] No configuration file is used.
3 2018-Dec-31 15:54:25.310740 - [INFO] Program options have been successfully parsed.
4 2018-Dec-31 15:54:25.310840 - [INFO] Check program options for logical errors.
5 2018-Dec-31 15:54:25.310930 - [INFO] Set-up IR database.
6 2018-Dec-31 15:54:25.317407 - [INFO] Constructed the analysis controller.
7 2018-Dec-31 15:54:25.317520 - [INFO] Found the following IR files for this project: 
8 2018-Dec-31 15:54:25.317582 - [INFO] 	main.ll
9 2018-Dec-31 15:54:25.317641 - [INFO] Check for chosen entry points.
10 2018-Dec-31 15:54:25.317702 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-31 15:54:25.317760 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-31 15:54:25.317820 - [INFO] Preprocess module: main.ll
13 2018-Dec-31 15:54:25.318166 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-31 15:54:25.318313 - [INFO] Running ValueAnnotationPass
15 2018-Dec-31 15:54:25.318773 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-31 15:54:25.318836 - [INFO] Allocated Types    : 1
17 2018-Dec-31 15:54:25.318900 - [INFO] Allocation Sites   : 4
18 2018-Dec-31 15:54:25.318958 - [INFO] Basic Blocks       : 10
19 2018-Dec-31 15:54:25.319016 - [INFO] Calls Sites        : 6
20 2018-Dec-31 15:54:25.319073 - [INFO] Functions          : 4
21 2018-Dec-31 15:54:25.319131 - [INFO] Globals            : 1
22 2018-Dec-31 15:54:25.319188 - [INFO] Global Pointer     : 1
23 2018-Dec-31 15:54:25.319246 - [INFO] Instructions       : 32
24 2018-Dec-31 15:54:25.319304 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-31 15:54:25.319362 - [INFO] Store Instructions : 7
26 2018-Dec-31 15:54:25.319419 - [INFO]  
27 2018-Dec-31 15:54:25.319523 - [INFO]   i32
28 2018-Dec-31 15:54:25.320147 - [DEBUG] Analyzing function: main
29 2018-Dec-31 15:54:25.320467 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-31 15:54:25.320531 - [INFO] Construct type hierarchy
31 2018-Dec-31 15:54:25.320592 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-31 15:54:25.320771 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-31 15:54:25.320840 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-31 15:54:25.320903 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-31 15:54:25.321016 - [DEBUG] Walking in function: main
36 2018-Dec-31 15:54:25.321103 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2018-Dec-31 15:54:25.321487 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-31 15:54:25.321547 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-31 15:54:25.321634 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-31 15:54:25.321697 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-31 15:54:25.321761 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23, ID: 7
42 2018-Dec-31 15:54:25.322066 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-31 15:54:25.322125 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-31 15:54:25.322199 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-31 15:54:25.322262 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-31 15:54:25.322325 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
47 2018-Dec-31 15:54:25.322677 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-31 15:54:25.322736 - [DEBUG] Target name: getenv
49 2018-Dec-31 15:54:25.322848 - [DEBUG] Walking in function: getenv
50 2018-Dec-31 15:54:25.322912 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-31 15:54:25.322978 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
52 2018-Dec-31 15:54:25.323291 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-31 15:54:25.323351 - [DEBUG] Target name: foo
54 2018-Dec-31 15:54:25.323428 - [DEBUG] Walking in function: foo
55 2018-Dec-31 15:54:25.323491 - [DEBUG] Function already visited or only declaration: foo
56 2018-Dec-31 15:54:25.323557 - [DEBUG] Found static call-site: %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
57 2018-Dec-31 15:54:25.323852 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-31 15:54:25.323911 - [DEBUG] Target name: foo
59 2018-Dec-31 15:54:25.323985 - [DEBUG] Walking in function: foo
60 2018-Dec-31 15:54:25.324047 - [DEBUG] Function already visited or only declaration: foo
61 2018-Dec-31 15:54:25.324113 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70, ID: 29
62 2018-Dec-31 15:54:25.324414 - [DEBUG] Found 1 possible target(s)
63 2018-Dec-31 15:54:25.324473 - [DEBUG] Target name: llvm.dbg.declare
64 2018-Dec-31 15:54:25.324548 - [DEBUG] Walking in function: llvm.dbg.declare
65 2018-Dec-31 15:54:25.324610 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2018-Dec-31 15:54:25.324672 - [INFO] Call graph has been constructed
67 2018-Dec-31 15:54:25.324734 - [INFO] Performing analysis: plugin
68 2018-Dec-31 15:54:25.324801 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
69 2018-Dec-31 15:54:25.325282 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removing memory location
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
=============

Adding line: 9

  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
=============

Adding line: 9
Adding line: 9

  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
=============

Adding line: 9
Adding line: 9
Adding line: 11

  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11

  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11

  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11

  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12

  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12

  br label %if.end, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12

  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Adding line: 15
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12

  br label %if.end, !phasar.instruction.id !48
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Adding line: 15
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12

  br label %if.end10, !dbg !49, !phasar.instruction.id !50
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============

Adding line: 15
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12

  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 18

  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 18
Adding line: 18

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 18
Adding line: 18

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 18
Adding line: 18

  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 18
Adding line: 18
Adding line: 19

  br label %if.end9, !dbg !61, !phasar.instruction.id !62
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 18
Adding line: 18
Adding line: 19

  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 18
Adding line: 18
Adding line: 21

  br label %if.end9, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 18
Adding line: 18
Adding line: 19
Adding line: 21

  br label %if.end10, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Adding line: 15
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12
Adding line: 18
Adding line: 18
Adding line: 19
Adding line: 21

  call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Adding line: 15
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12
Adding line: 18
Adding line: 18
Adding line: 19
Adding line: 21

  store i32 1, i32* %a, align 4, !dbg !69, !phasar.instruction.id !71
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Adding line: 15
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12
Adding line: 18
Adding line: 18
Adding line: 19
Adding line: 21

  %1 = load i32, i32* %rc, align 4, !dbg !72, !phasar.instruction.id !73
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %rc, align 4, !dbg !72, !phasar.instruction.id !73
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============

Adding line: 15
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 11
Adding line: 11
Adding line: 12
Adding line: 12
Adding line: 26
Adding line: 18
Adding line: 18
Adding line: 19
Adding line: 21

  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
=============


  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
=============


  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
=============


  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
=============


  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
=============


  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
=============


  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
=============


  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br label %if.end, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br label %if.end10, !dbg !49, !phasar.instruction.id !50
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br label %if.end, !phasar.instruction.id !48
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  br label %if.end10, !dbg !49, !phasar.instruction.id !50
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============


  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============


  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
=============


  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
=============


  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  br label %if.end9, !dbg !61, !phasar.instruction.id !62
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
=============


  br label %if.end10, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  br label %if.end9, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  br label %if.end10, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  store i32 1, i32* %a, align 4, !dbg !69, !phasar.instruction.id !71
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  %1 = load i32, i32* %rc, align 4, !dbg !72, !phasar.instruction.id !73
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47
  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42
  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37
  %1 = load i32, i32* %rc, align 4, !dbg !72, !phasar.instruction.id !73
  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54
  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55
  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60
  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42

  store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26
Got store instruction
Removing memory location
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removing memory location

  %0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact

  br label %if.end10, !phasar.instruction.id !67

  br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36

  %tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37

  %1 = load i32, i32* %rc, align 4, !dbg !72, !phasar.instruction.id !73
Got load instruction
Adding load instruction fact

  br label %if.end, !phasar.instruction.id !48

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39

  br label %if.end, !dbg !43, !phasar.instruction.id !44

  br label %if.end10, !dbg !49, !phasar.instruction.id !50

  %call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54

  %tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55

  br label %if.end9, !phasar.instruction.id !66

  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57

  store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60

  br label %if.end9, !dbg !61, !phasar.instruction.id !62

  store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65

  store i32 1, i32* %a, align 4, !dbg !69, !phasar.instruction.id !71
Got store instruction
Removing memory location

  ret i32 %1, !dbg !74, !phasar.instruction.id !75worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 27
worklist size: 27
worklist size: 27
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23, ID: 7
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !68, metadata !18), !dbg !69, !phasar.instruction.id !70, ID: 29
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10


Instruction:
br label %if.end10, !phasar.instruction.id !67, ID: 28
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11


Instruction:
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !72, !phasar.instruction.id !73, ID: 31
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
br label %if.end, !phasar.instruction.id !48, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
br i1 %tobool2, label %if.then3, label %if.else, !dbg !38, !phasar.instruction.id !39, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
br label %if.end, !dbg !43, !phasar.instruction.id !44, ID: 17
Facts:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
br label %if.end10, !dbg !49, !phasar.instruction.id !50, ID: 20
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14


Instruction:
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12


Instruction:
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21


Instruction:
br label %if.end9, !phasar.instruction.id !66, ID: 27
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
br i1 %tobool6, label %if.then7, label %if.else8, !dbg !56, !phasar.instruction.id !57, ID: 23
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22


Instruction:
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22


Instruction:
br label %if.end9, !dbg !61, !phasar.instruction.id !62, ID: 25
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)70 2018-Dec-31 15:54:25.497708 - [INFO] Write results to file
71 2018-Dec-31 15:54:25.497891 - [INFO] Shutdown llvm and the analysis framework.

), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24


Instruction:
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26
Facts:
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
br i1 %tobool, label %if.then, label %if.else4, !dbg !31, !phasar.instruction.id !32, ID: 12
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22


Instruction:
store i32 1, i32* %a, align 4, !dbg !69, !phasar.instruction.id !71, ID: 30
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


Instruction:
ret i32 %1, !dbg !74, !phasar.instruction.id !75, ID: 32
Facts:
store i32 1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !47, ID: 18
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !42, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i32, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !29, ID: 10
%tobool = icmp ne i32 %0, 0, !dbg !27, !phasar.instruction.id !30, ID: 11
%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !36, ID: 13
%tobool2 = icmp ne i32 %call1, 0, !dbg !33, !phasar.instruction.id !37, ID: 14
%1 = load i32, i32* %rc, align 4, !dbg !72, !phasar.instruction.id !73, ID: 31
%call5 = call i32 (...) @foo(), !dbg !51, !phasar.instruction.id !54, ID: 21
%tobool6 = icmp ne i32 %call5, 0, !dbg !51, !phasar.instruction.id !55, ID: 22
store i32 1, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !60, ID: 24
store i32 1, i32* %rc, align 4, !dbg !63, !phasar.instruction.id !65, ID: 26


