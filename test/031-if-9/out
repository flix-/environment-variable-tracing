0 2019-Jan-05 10:42:43.168907 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 10:42:43.169320 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 10:42:43.169673 - [INFO] No configuration file is used.
3 2019-Jan-05 10:42:43.169751 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 10:42:43.169842 - [INFO] Check program options for logical errors.
5 2019-Jan-05 10:42:43.169930 - [INFO] Set-up IR database.
6 2019-Jan-05 10:42:43.179704 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 10:42:43.179824 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 10:42:43.179886 - [INFO] 	main.ll
9 2019-Jan-05 10:42:43.179944 - [INFO] Check for chosen entry points.
10 2019-Jan-05 10:42:43.180005 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 10:42:43.180064 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 10:42:43.180124 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 10:42:43.180460 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 10:42:43.180652 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 10:42:43.181403 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 10:42:43.181467 - [INFO] Allocated Types    : 1
17 2019-Jan-05 10:42:43.181532 - [INFO] Allocation Sites   : 9
18 2019-Jan-05 10:42:43.181589 - [INFO] Basic Blocks       : 19
19 2019-Jan-05 10:42:43.181647 - [INFO] Calls Sites        : 13
20 2019-Jan-05 10:42:43.181704 - [INFO] Functions          : 4
21 2019-Jan-05 10:42:43.181761 - [INFO] Globals            : 1
22 2019-Jan-05 10:42:43.181819 - [INFO] Global Pointer     : 1
23 2019-Jan-05 10:42:43.181876 - [INFO] Instructions       : 64
24 2019-Jan-05 10:42:43.181933 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 10:42:43.182009 - [INFO] Store Instructions : 14
26 2019-Jan-05 10:42:43.182067 - [INFO]  
27 2019-Jan-05 10:42:43.182142 - [INFO]   i32
28 2019-Jan-05 10:42:43.183211 - [DEBUG] Analyzing function: main
29 2019-Jan-05 10:42:43.183813 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 10:42:43.183882 - [INFO] Construct type hierarchy
31 2019-Jan-05 10:42:43.183942 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 10:42:43.184189 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 10:42:43.184258 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 10:42:43.184319 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 10:42:43.184442 - [DEBUG] Walking in function: main
36 2019-Jan-05 10:42:43.184529 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25, ID: 11
37 2019-Jan-05 10:42:43.185067 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 10:42:43.185127 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 10:42:43.185213 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 10:42:43.185276 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 10:42:43.185385 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28, ID: 12
42 2019-Jan-05 10:42:43.185853 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 10:42:43.185911 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 10:42:43.185985 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 10:42:43.186047 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 10:42:43.186110 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
47 2019-Jan-05 10:42:43.186627 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 10:42:43.186697 - [DEBUG] Target name: getenv
49 2019-Jan-05 10:42:43.186779 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 10:42:43.186841 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 10:42:43.186910 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !32, !phasar.instruction.id !34, ID: 15
52 2019-Jan-05 10:42:43.187394 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 10:42:43.187453 - [DEBUG] Target name: foo
54 2019-Jan-05 10:42:43.187531 - [DEBUG] Walking in function: foo
55 2019-Jan-05 10:42:43.187592 - [DEBUG] Function already visited or only declaration: foo
56 2019-Jan-05 10:42:43.187656 - [DEBUG] Found static call-site: %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
57 2019-Jan-05 10:42:43.188111 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-05 10:42:43.188170 - [DEBUG] Target name: foo
59 2019-Jan-05 10:42:43.188244 - [DEBUG] Walking in function: foo
60 2019-Jan-05 10:42:43.188305 - [DEBUG] Function already visited or only declaration: foo
61 2019-Jan-05 10:42:43.188371 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !69, metadata !23), !dbg !70, !phasar.instruction.id !71, ID: 32
62 2019-Jan-05 10:42:43.188864 - [DEBUG] Found 1 possible target(s)
63 2019-Jan-05 10:42:43.188923 - [DEBUG] Target name: llvm.dbg.declare
64 2019-Jan-05 10:42:43.188997 - [DEBUG] Walking in function: llvm.dbg.declare
65 2019-Jan-05 10:42:43.189059 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2019-Jan-05 10:42:43.189123 - [DEBUG] Found static call-site: %call10 = call i32 (...) @foo(), !dbg !75, !phasar.instruction.id !78, ID: 35
67 2019-Jan-05 10:42:43.189579 - [DEBUG] Found 1 possible target(s)
68 2019-Jan-05 10:42:43.189637 - [DEBUG] Target name: foo
69 2019-Jan-05 10:42:43.189711 - [DEBUG] Walking in function: foo
70 2019-Jan-05 10:42:43.189773 - [DEBUG] Function already visited or only declaration: foo
71 2019-Jan-05 10:42:43.189837 - [DEBUG] Found static call-site: %call14 = call i32 (...) @foo(), !dbg !87, !phasar.instruction.id !90, ID: 40
72 2019-Jan-05 10:42:43.190292 - [DEBUG] Found 1 possible target(s)
73 2019-Jan-05 10:42:43.190351 - [DEBUG] Target name: foo
74 2019-Jan-05 10:42:43.190424 - [DEBUG] Walking in function: foo
75 2019-Jan-05 10:42:43.190486 - [DEBUG] Function already visited or only declaration: foo
76 2019-Jan-05 10:42:43.190551 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
77 2019-Jan-05 10:42:43.191013 - [DEBUG] Found 1 possible target(s)
78 2019-Jan-05 10:42:43.191071 - [DEBUG] Target name: llvm.dbg.declare
79 2019-Jan-05 10:42:43.191145 - [DEBUG] Walking in function: llvm.dbg.declare
80 2019-Jan-05 10:42:43.191207 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
81 2019-Jan-05 10:42:43.191271 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
82 2019-Jan-05 10:42:43.191732 - [DEBUG] Found 1 possible target(s)
83 2019-Jan-05 10:42:43.191791 - [DEBUG] Target name: llvm.dbg.declare
84 2019-Jan-05 10:42:43.191865 - [DEBUG] Walking in function: llvm.dbg.declare
85 2019-Jan-05 10:42:43.191927 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
86 2019-Jan-05 10:42:43.192004 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
87 2019-Jan-05 10:42:43.192466 - [DEBUG] Found 1 possible target(s)
88 2019-Jan-05 10:42:43.192525 - [DEBUG] Target name: llvm.dbg.declare
89 2019-Jan-05 10:42:43.192599 - [DEBUG] Walking in function: llvm.dbg.declare
90 2019-Jan-05 10:42:43.192661 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
91 2019-Jan-05 10:42:43.192725 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a25, metadata !123, metadata !23), !dbg !124, !phasar.instruction.id !125, ID: 57
92 2019-Jan-05 10:42:43.193187 - [DEBUG] Found 1 possible target(s)
93 2019-Jan-05 10:42:43.193245 - [DEBUG] Target name: llvm.dbg.declare
94 2019-Jan-05 10:42:43.193319 - [DEBUG] Walking in function: llvm.dbg.declare
95 2019-Jan-05 10:42:43.193389 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
96 2019-Jan-05 10:42:43.193454 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a28, metadata !129, metadata !23), !dbg !130, !phasar.instruction.id !131, ID: 61
97 2019-Jan-05 10:42:43.193915 - [DEBUG] Found 1 possible target(s)
98 2019-Jan-05 10:42:43.193974 - [DEBUG] Target name: llvm.dbg.declare
99 2019-Jan-05 10:42:43.194048 - [DEBUG] Walking in function: llvm.dbg.declare
100 2019-Jan-05 10:42:43.194110 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
101 2019-Jan-05 10:42:43.194171 - [INFO] Call graph has been constructed
102 2019-Jan-05 10:42:43.194233 - [INFO] Performing analysis: plugin
103 2019-Jan-05 10:42:43.194299 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
104 2019-Jan-05 10:42:43.194796 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a20 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %b = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a22 = alloca i32, align 4, !phasar.instruction.id !18
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a25 = alloca i32, align 4, !phasar.instruction.id !19
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a28 = alloca i32, align 4, !phasar.instruction.id !20
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !21
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9

  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  %call1 = call i32 (...) @foo(), !dbg !32, !phasar.instruction.id !34
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  %tobool = icmp ne i32 %call1, 0, !dbg !32, !phasar.instruction.id !35
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  br i1 %tobool, label %if.then, label %if.else9, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  br i1 %tobool, label %if.then, label %if.else9, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
=============

Added line number: 9
Added line number: 9
Added line number: 12

  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
=============

Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12

  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
=============

Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12

  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
=============

Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12

  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
=============

Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13

  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============

Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13

  br i1 %tobool5, label %if.then6, label %if.else, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============

Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13

  br i1 %tobool5, label %if.then6, label %if.else, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============

Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13

  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============

Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13

  br label %if.end, !dbg !55, !phasar.instruction.id !56
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============

Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13

  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============

Added line number: 16
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13

  br label %if.end, !phasar.instruction.id !60
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13

  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18

  br label %if.end8, !dbg !63, !phasar.instruction.id !64
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18

  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============

Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 20

  br label %if.end8, !phasar.instruction.id !68
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18
Added line number: 20

  call void @llvm.dbg.declare(metadata i32* %a, metadata !69, metadata !23), !dbg !70, !phasar.instruction.id !71
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18
Added line number: 20

  store i32 100, i32* %a, align 4, !dbg !70, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18
Added line number: 20

  br label %if.end27, !dbg !73, !phasar.instruction.id !74
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18
Added line number: 20

  %call10 = call i32 (...) @foo(), !dbg !75, !phasar.instruction.id !78
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  %tobool11 = icmp ne i32 %call10, 0, !dbg !75, !phasar.instruction.id !79
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  store i32 1, i32* %rc, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  br label %if.end26, !dbg !85, !phasar.instruction.id !86
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  %call14 = call i32 (...) @foo(), !dbg !87, !phasar.instruction.id !90
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  %tobool15 = icmp ne i32 %call14, 0, !dbg !87, !phasar.instruction.id !91
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !92, !phasar.instruction.id !93
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !92, !phasar.instruction.id !93
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  store i32 100, i32* %rc, align 4, !dbg !94, !phasar.instruction.id !96
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  br label %if.end24, !dbg !97, !phasar.instruction.id !98
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============

Added line number: 9
Added line number: 9

  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
=============

Added line number: 9
Added line number: 9
Added line number: 30

  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30

  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30

  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30

  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30
Added line number: 31

  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31

  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32

  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32

  br label %if.end23, !dbg !114, !phasar.instruction.id !115
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32

  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30
Added line number: 34

  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30
Added line number: 34
Added line number: 34

  br label %if.end23, !phasar.instruction.id !121
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  br label %if.end24, !phasar.instruction.id !122
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  call void @llvm.dbg.declare(metadata i32* %a25, metadata !123, metadata !23), !dbg !124, !phasar.instruction.id !125
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  store i32 100, i32* %a25, align 4, !dbg !124, !phasar.instruction.id !126
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  br label %if.end26, !phasar.instruction.id !127
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 9
Added line number: 9
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  br label %if.end27, !phasar.instruction.id !128
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18
Added line number: 20
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  call void @llvm.dbg.declare(metadata i32* %a28, metadata !129, metadata !23), !dbg !130, !phasar.instruction.id !131
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18
Added line number: 20
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  store i32 1, i32* %a28, align 4, !dbg !130, !phasar.instruction.id !132
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 13
Added line number: 13
Added line number: 18
Added line number: 20
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  %2 = load i32, i32* %rc, align 4, !dbg !133, !phasar.instruction.id !134
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %2 = load i32, i32* %rc, align 4, !dbg !133, !phasar.instruction.id !134
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============

Added line number: 16
Added line number: 14
Added line number: 9
Added line number: 9
Added line number: 12
Added line number: 12
Added line number: 41
Added line number: 13
Added line number: 13
Added line number: 18
Added line number: 20
Added line number: 30
Added line number: 30
Added line number: 31
Added line number: 31
Added line number: 32
Added line number: 32
Added line number: 34
Added line number: 34

  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  %call1 = call i32 (...) @foo(), !dbg !32, !phasar.instruction.id !34
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  %tobool = icmp ne i32 %call1, 0, !dbg !32, !phasar.instruction.id !35
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  br i1 %tobool, label %if.then, label %if.else9, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  br i1 %tobool, label %if.then, label %if.else9, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
=============


  %call10 = call i32 (...) @foo(), !dbg !75, !phasar.instruction.id !78
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
=============


  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
=============


  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
=============


  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
=============


  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============


  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============


  br i1 %tobool5, label %if.then6, label %if.else, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============


  br i1 %tobool5, label %if.then6, label %if.else, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============


  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============


  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============


  br label %if.end, !dbg !55, !phasar.instruction.id !56
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============


  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
=============


  br label %if.end, !phasar.instruction.id !60
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
=============


  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
=============


  br label %if.end8, !dbg !63, !phasar.instruction.id !64
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !69, metadata !23), !dbg !70, !phasar.instruction.id !71
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============


  br label %if.end8, !phasar.instruction.id !68
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !69, metadata !23), !dbg !70, !phasar.instruction.id !71
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============


  store i32 100, i32* %a, align 4, !dbg !70, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============


  br label %if.end27, !dbg !73, !phasar.instruction.id !74
Got branch instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
=============


  call void @llvm.dbg.declare(metadata i32* %a28, metadata !129, metadata !23), !dbg !130, !phasar.instruction.id !131
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  %tobool11 = icmp ne i32 %call10, 0, !dbg !75, !phasar.instruction.id !79
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  store i32 1, i32* %rc, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  %call14 = call i32 (...) @foo(), !dbg !87, !phasar.instruction.id !90
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  br label %if.end26, !dbg !85, !phasar.instruction.id !86
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  br label %if.end27, !phasar.instruction.id !128
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  %tobool15 = icmp ne i32 %call14, 0, !dbg !87, !phasar.instruction.id !91
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !92, !phasar.instruction.id !93
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !92, !phasar.instruction.id !93
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  store i32 100, i32* %rc, align 4, !dbg !94, !phasar.instruction.id !96
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
=============


  br label %if.end24, !dbg !97, !phasar.instruction.id !98
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
=============


  call void @llvm.dbg.declare(metadata i32* %a25, metadata !123, metadata !23), !dbg !124, !phasar.instruction.id !125
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
=============


  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
=============


  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
=============


  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
=============


  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
=============


  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
=============


  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
=============


  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
=============


  br label %if.end23, !dbg !114, !phasar.instruction.id !115
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
=============


  br label %if.end24, !phasar.instruction.id !122
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  br label %if.end23, !phasar.instruction.id !121
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  br label %if.end24, !phasar.instruction.id !122
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  call void @llvm.dbg.declare(metadata i32* %a25, metadata !123, metadata !23), !dbg !124, !phasar.instruction.id !125
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  store i32 100, i32* %a25, align 4, !dbg !124, !phasar.instruction.id !126
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  br label %if.end26, !phasar.instruction.id !127
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  br label %if.end27, !phasar.instruction.id !128
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  call void @llvm.dbg.declare(metadata i32* %a28, metadata !129, metadata !23), !dbg !130, !phasar.instruction.id !131
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  store i32 1, i32* %a28, align 4, !dbg !130, !phasar.instruction.id !132
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  %2 = load i32, i32* %rc, align 4, !dbg !133, !phasar.instruction.id !134
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59
  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54
  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
  %2 = load i32, i32* %rc, align 4, !dbg !133, !phasar.instruction.id !134
  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48
  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49
  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62
  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67
  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108
  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109
  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112
  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119
  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59

  store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54

  store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !21
Got store instruction
Removed 0 memory locations from facts

  %a25 = alloca i32, align 4, !phasar.instruction.id !19
Got operands checking instruction (alloca)

  %a22 = alloca i32, align 4, !phasar.instruction.id !18
Got operands checking instruction (alloca)

  %a20 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %b = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25
Got call instruction

  %a28 = alloca i32, align 4, !phasar.instruction.id !20
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %call1 = call i32 (...) @foo(), !dbg !32, !phasar.instruction.id !34
Got call instruction

  %tobool = icmp ne i32 %call1, 0, !dbg !32, !phasar.instruction.id !35
Got operands checking instruction (icmp)

  %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact

  br label %if.end27, !phasar.instruction.id !128
Got branch instruction

  br i1 %tobool, label %if.then, label %if.else9, !dbg !36, !phasar.instruction.id !37
Got branch instruction

  %tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42
Got operands checking instruction (icmp)
Adding fact

  %2 = load i32, i32* %rc, align 4, !dbg !133, !phasar.instruction.id !134
Got load instruction
Adding load instruction fact

  br label %if.end8, !phasar.instruction.id !68

  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44
Got branch instruction
Adding conditional branch instruction fact

  %call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48

  %tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49

  br label %if.end, !phasar.instruction.id !60

  br i1 %tobool5, label %if.then6, label %if.else, !dbg !50, !phasar.instruction.id !51

  br label %if.end, !dbg !55, !phasar.instruction.id !56

  store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62

  br label %if.end8, !dbg !63, !phasar.instruction.id !64

  store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67

  call void @llvm.dbg.declare(metadata i32* %a, metadata !69, metadata !23), !dbg !70, !phasar.instruction.id !71
Got call instruction

  store i32 100, i32* %a, align 4, !dbg !70, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts

  br label %if.end27, !dbg !73, !phasar.instruction.id !74
Got branch instruction

  %call10 = call i32 (...) @foo(), !dbg !75, !phasar.instruction.id !78
Got call instruction

  %tobool11 = icmp ne i32 %call10, 0, !dbg !75, !phasar.instruction.id !79
Got operands checking instruction (icmp)

  br label %if.end26, !phasar.instruction.id !127
Got branch instruction

  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81
Got branch instruction

  store i32 1, i32* %rc, align 4, !dbg !82, !phasar.instruction.id !84
Got store instruction
Removed 0 memory locations from facts

  br label %if.end26, !dbg !85, !phasar.instruction.id !86
Got branch instruction

  %call14 = call i32 (...) @foo(), !dbg !87, !phasar.instruction.id !90
Got call instruction

  %tobool15 = icmp ne i32 %call14, 0, !dbg !87, !phasar.instruction.id !91
Got operands checking instruction (icmp)

  %1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101
Got load instruction
Adding load instruction fact

  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !92, !phasar.instruction.id !93
Got branch instruction

  store i32 100, i32* %rc, align 4, !dbg !94, !phasar.instruction.id !96
Got store instruction
Removed 0 memory locations from facts

  br label %if.end24, !dbg !97, !phasar.instruction.id !98
Got branch instruction

  %tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102
Got operands checking instruction (icmp)
Adding fact

  br label %if.end24, !phasar.instruction.id !122
Got branch instruction

  br label %if.end23, !phasar.instruction.id !121

  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104
Got branch instruction
Adding conditional branch instruction fact

  call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108

  store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109

  call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112

  store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113

  br label %if.end23, !dbg !114, !phasar.instruction.id !115

  call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119

  store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120

  call void @llvm.dbg.declare(metadata i32* %a25, metadata !123, metadata !23), !dbg !124, !phasar.instruction.id !125
Got call instruction

  store i32 100, i32* %a25, align 4, !dbg !124, !phasar.instruction.id !126
Got store instruction
Removed 0 memory locations from facts

  call void @llvm.dbg.declare(metadata i32* %a28, metadata !129, metadata !23), !dbg !130, !phasar.instruction.id !131
Got call instruction

  store i32 1, i32* %a28, align 4, !dbg !130, !phasar.instruction.id !132
Got store instruction
Removed 0 memory locations from facts

  ret i32 %2, !dbg !135, !phasar.instruction.id !136worklist size: 69
worklist size: 68
worklist size: 67
worklist size: 66
worklist size: 65
worklist size: 64
worklist size: 63
worklist size: 62
worklist size: 61
worklist size: 60
worklist size: 59
worklist size: 58
worklist size: 57
worklist size: 57
worklist size: 57
worklist size: 57
worklist size: 58
worklist size: 58
worklist size: 58
worklist size: 58
worklist size: 59
worklist size: 59
worklist size: 59
worklist size: 59
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 60
worklist size: 61
worklist size: 61
worklist size: 61
worklist size: 61
worklist size: 61
worklist size: 61
worklist size: 62
worklist size: 62
worklist size: 62
worklist size: 62
worklist size: 62
worklist size: 62
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 63
worklist size: 62
worklist size: 61
worklist size: 60
worklist size: 59
worklist size: 58
worklist size: 57
worklist size: 56
worklist size: 55
worklist size: 54
worklist size: 53
worklist size: 52
worklist size: 51
worklist size: 50
worklist size: 49
worklist size: 48
worklist size: 47
worklist size: 46
worklist size: 45
worklist size: 44
worklist size: 43
worklist size: 42
worklist size: 41
worklist size: 40
worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22


Instruction:
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !21, ID: 10
Facts:
	EMPTY


Instruction:
%a25 = alloca i32, align 4, !phasar.instruction.id !19, ID: 8
Facts:
	EMPTY


Instruction:
%a22 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7
Facts:
	EMPTY


Instruction:
%a20 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%b = alloca i32, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28, ID: 12
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25, ID: 11
Facts:
	EMPTY


Instruction:
%a28 = alloca i32, align 4, !phasar.instruction.id !20, ID: 9
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%call1 = call i32 (...) @foo(), !dbg !32, !phasar.instruction.id !34, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%tobool = icmp ne i32 %call1, 0, !dbg !32, !phasar.instruction.id !35, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
br label %if.end27, !phasar.instruction.id !128, ID: 60
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
br i1 %tobool, label %if.then, label %if.else9, !dbg !36, !phasar.instruction.id !37, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !133, !phasar.instruction.id !134, ID: 63
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
br label %if.end8, !phasar.instruction.id !68, ID: 31
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30


Instruction:
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19


Instruction:
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20


Instruction:
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21


Instruction:
br label %if.end, !phasar.instruction.id !60, ID: 27
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22


Instruction:
br i1 %tobool5, label %if.then6, label %if.else, !dbg !50, !phasar.instruction.id !51, ID: 23
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22


Instruction:
br label %if.end, !dbg !55, !phasar.instruction.id !56, ID: 25
Facts:
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22


Instruction:
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22


Instruction:
br label %if.end8, !dbg !63, !phasar.instruction.id !64, ID: 29
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28


Instruction:
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !69, metadata !23), !dbg !70, !phasar.instruction.id !71, ID: 32
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
br i1 %tobool2, label %if.then3, label %if.else7, !dbg !43, !phasar.instruction.id !44, ID: 20
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30


Instruction:
store i32 100, i32* %a, align 4, !dbg !70, !phasar.instruction.id !72, ID: 33
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30


Instruction:
br label %if.end27, !dbg !73, !phasar.instruction.id !74, ID: 34
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30


Instruction:
%call10 = call i32 (...) @foo(), !dbg !75, !phasar.instruction.id !78, ID: 35
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%tobool11 = icmp ne i32 %call10, 0, !dbg !75, !phasar.instruction.id !79, ID: 36
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
br label %if.end26, !phasar.instruction.id !127, ID: 59
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
br i1 %tobool11, label %if.then12, label %if.else13, !dbg !80, !phasar.instruction.id !81, ID: 37
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
store i32 1, i32* %rc, align 4, !dbg !82, !phasar.instruction.id !84, ID: 38
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
br label %if.end26, !dbg !85, !phasar.instruction.id !86, ID: 39
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%call14 = call i32 (...) @foo(), !dbg !87, !phasar.instruction.id !90, ID: 40
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%tobool15 = icmp ne i32 %call14, 0, !dbg !87, !phasar.instruction.id !91, ID: 41
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
br i1 %tobool15, label %if.then16, label %if.else17, !dbg !92, !phasar.instruction.id !93, ID: 42
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
store i32 100, i32* %rc, align 4, !dbg !94, !phasar.instruction.id !96, ID: 43
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
br label %if.end24, !dbg !97, !phasar.instruction.id !98, ID: 44
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13


Instruction:
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45


Instruction:
br label %if.end24, !phasar.instruction.id !122, ID: 56
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
br label %if.end23, !phasar.instruction.id !121, ID: 55
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46


Instruction:
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47


Instruction:
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48


Instruction:
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49


Instruction:
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50


Instruction:
br label %if.end23, !dbg !114, !phasar.instruction.id !115, ID: 52
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51


Instruction:
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47


Instruction:
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
br i1 %tobool18, label %if.then19, label %if.else21, !dbg !103, !phasar.instruction.id !104, ID: 47
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53


Instruction:
call void @llvm.dbg.declare(metadata i32* %a25, metadata !123, metadata !23), !dbg !124, !phasar.instruction.id !125, ID: 57
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
store i32 100, i32* %a25, align 4, !dbg !124, !phasar.instruction.id !126, ID: 58
Facts:
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
call void @llvm.dbg.declare(metadata i32* %a28, metadata !129, metadata !23), !dbg !130, !phasar.instruction.id !131, ID: 61
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !105 2019-Jan-05 10:42:43.743817 - [INFO] Write results to file
106 2019-Jan-05 10:42:43.744021 - [INFO] Shutdown llvm and the analysis framework.

111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
store i32 1, i32* %a28, align 4, !dbg !130, !phasar.instruction.id !132, ID: 62
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


Instruction:
ret i32 %2, !dbg !135, !phasar.instruction.id !136, ID: 64
Facts:
store i32 1, i32* %rc, align 4, !dbg !57, !phasar.instruction.id !59, ID: 26
store i32 1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24
store i32 %call, i32* %taint, align 4, !dbg !27, !phasar.instruction.id !31, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 13
%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !41, ID: 18
%tobool2 = icmp ne i32 %0, 0, !dbg !38, !phasar.instruction.id !42, ID: 19
%2 = load i32, i32* %rc, align 4, !dbg !133, !phasar.instruction.id !134, ID: 63
%call4 = call i32 (...) @foo(), !dbg !45, !phasar.instruction.id !48, ID: 21
%tobool5 = icmp ne i32 %call4, 0, !dbg !45, !phasar.instruction.id !49, ID: 22
store i32 1, i32* %rc, align 4, !dbg !61, !phasar.instruction.id !62, ID: 28
store i32 1, i32* %rc, align 4, !dbg !65, !phasar.instruction.id !67, ID: 30
%1 = load i32, i32* %taint, align 4, !dbg !99, !phasar.instruction.id !101, ID: 45
%tobool18 = icmp ne i32 %1, 0, !dbg !99, !phasar.instruction.id !102, ID: 46
call void @llvm.dbg.declare(metadata i32* %a20, metadata !105, metadata !23), !dbg !107, !phasar.instruction.id !108, ID: 48
store i32 100, i32* %a20, align 4, !dbg !107, !phasar.instruction.id !109, ID: 49
call void @llvm.dbg.declare(metadata i32* %b, metadata !110, metadata !23), !dbg !111, !phasar.instruction.id !112, ID: 50
store i32 200, i32* %b, align 4, !dbg !111, !phasar.instruction.id !113, ID: 51
call void @llvm.dbg.declare(metadata i32* %a22, metadata !116, metadata !23), !dbg !118, !phasar.instruction.id !119, ID: 53
store i32 100, i32* %a22, align 4, !dbg !118, !phasar.instruction.id !120, ID: 54


