0 2019-Jan-04 17:19:59.043077 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-04 17:19:59.043490 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-04 17:19:59.043837 - [INFO] No configuration file is used.
3 2019-Jan-04 17:19:59.043914 - [INFO] Program options have been successfully parsed.
4 2019-Jan-04 17:19:59.044006 - [INFO] Check program options for logical errors.
5 2019-Jan-04 17:19:59.044095 - [INFO] Set-up IR database.
6 2019-Jan-04 17:19:59.048624 - [INFO] Constructed the analysis controller.
7 2019-Jan-04 17:19:59.048735 - [INFO] Found the following IR files for this project: 
8 2019-Jan-04 17:19:59.048796 - [INFO] 	main.ll
9 2019-Jan-04 17:19:59.048856 - [INFO] Check for chosen entry points.
10 2019-Jan-04 17:19:59.048917 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-04 17:19:59.048975 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-04 17:19:59.049035 - [INFO] Preprocess module: main.ll
13 2019-Jan-04 17:19:59.049382 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-04 17:19:59.049513 - [INFO] Running ValueAnnotationPass
15 2019-Jan-04 17:19:59.049843 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-04 17:19:59.049906 - [INFO] Allocated Types    : 1
17 2019-Jan-04 17:19:59.049970 - [INFO] Allocation Sites   : 3
18 2019-Jan-04 17:19:59.050028 - [INFO] Basic Blocks       : 3
19 2019-Jan-04 17:19:59.050086 - [INFO] Calls Sites        : 4
20 2019-Jan-04 17:19:59.050143 - [INFO] Functions          : 4
21 2019-Jan-04 17:19:59.050200 - [INFO] Globals            : 1
22 2019-Jan-04 17:19:59.050258 - [INFO] Global Pointer     : 1
23 2019-Jan-04 17:19:59.050315 - [INFO] Instructions       : 18
24 2019-Jan-04 17:19:59.050389 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-04 17:19:59.050446 - [INFO] Store Instructions : 3
26 2019-Jan-04 17:19:59.050504 - [INFO]  
27 2019-Jan-04 17:19:59.050579 - [INFO]   i32
28 2019-Jan-04 17:19:59.051026 - [DEBUG] Analyzing function: main
29 2019-Jan-04 17:19:59.051269 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-04 17:19:59.051338 - [INFO] Construct type hierarchy
31 2019-Jan-04 17:19:59.051399 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-04 17:19:59.051549 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-04 17:19:59.051648 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-04 17:19:59.051711 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-04 17:19:59.051823 - [DEBUG] Walking in function: main
36 2019-Jan-04 17:19:59.051913 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2019-Jan-04 17:19:59.052222 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-04 17:19:59.052282 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-04 17:19:59.052368 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-04 17:19:59.052431 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-04 17:19:59.052496 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
42 2019-Jan-04 17:19:59.052778 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-04 17:19:59.052838 - [DEBUG] Target name: getenv
44 2019-Jan-04 17:19:59.052919 - [DEBUG] Walking in function: getenv
45 2019-Jan-04 17:19:59.052981 - [DEBUG] Function already visited or only declaration: getenv
46 2019-Jan-04 17:19:59.053045 - [DEBUG] Found static call-site: %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2019-Jan-04 17:19:59.053271 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-04 17:19:59.053330 - [DEBUG] Target name: bar
49 2019-Jan-04 17:19:59.053407 - [DEBUG] Walking in function: bar
50 2019-Jan-04 17:19:59.053468 - [DEBUG] Function already visited or only declaration: bar
51 2019-Jan-04 17:19:59.053532 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 15
52 2019-Jan-04 17:19:59.053782 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-04 17:19:59.053841 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-04 17:19:59.053916 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-04 17:19:59.053978 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-04 17:19:59.054040 - [INFO] Call graph has been constructed
57 2019-Jan-04 17:19:59.054102 - [INFO] Performing analysis: plugin
58 2019-Jan-04 17:19:59.054169 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2019-Jan-04 17:19:59.054657 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============

Adding line number: 8

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============

Adding line number: 8
Adding line number: 8

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8

  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  br label %land.end, !phasar.instruction.id !28
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !17), !dbg !33, !phasar.instruction.id !34
Got call instruction
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36
Got load instruction
Adding load instruction fact
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 9

  store i32 %1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !37
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  store i32 %1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !37
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36
=============

Adding line number: 8
Adding line number: 9
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 9

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============


  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
=============


  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
=============


  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
=============


  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============


  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
=============


  br label %land.end, !phasar.instruction.id !28
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
=============


  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============


  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============


  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !17), !dbg !33, !phasar.instruction.id !34
Got call instruction
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
=============


  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36
Got load instruction
Adding load instruction fact
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36
=============


  store i32 %1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !37
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
  store i32 %1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !37
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36
=============


  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30
Got operands checking instruction (zext)
Adding fact

  store i32 %1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !37
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
Got operands checking instruction (icmp)
Adding fact

  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts

  br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact

  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !17), !dbg !33, !phasar.instruction.id !34
Got call instruction

  %call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26

  %tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27

  br label %land.end, !phasar.instruction.id !28

  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29
Got phi node instruction
Adding phi node instruction fact (constant)

  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36
Got load instruction
Adding load instruction fact

  ret i32 0, !dbg !38, !phasar.instruction.id !39worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30, ID: 13
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10
%0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29, ID: 12


Instruction:
store i32 %1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !37, ID: 17
Facts:
%land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30, ID: 13
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31, ID: 14
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10
%0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36, ID: 16


Instruction:
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31, ID: 14
Facts:
%land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10
%0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29, ID: 12


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !17), !dbg !33, !phasar.instruction.id !34, ID: 15
Facts:
%land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30, ID: 13
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31, ID: 14
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10
%0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29, ID: 12


Instruction:
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24, ID: 8


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
br label %land.end, !phasar.instruction.id !28, ID: 11
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10


Instruction:
%0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29, ID: 12
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %land.end, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36, ID: 16
Facts:
%land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30, ID: 13
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31, ID: 14
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10
%0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29, ID: 12


Instruction:
ret i32 0, !dbg !38, !phasar.instruction.id !39, ID: 18
Facts:
%land.ext = zext i1 %0 to i32, !dbg !23, !phasar.instruction.id !30, ID: 13
store i32 %1, i32* %a, align 4, !dbg !33, !phasar.instruction.id !37, ID: 17
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !31, ID: 14
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @bar(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !23, !phasar.instruction.id !27, ID: 10
%0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !phasar.instruction.id !29, ID: 12
%1 60 2019-Jan-04 17:19:59.100666 - [INFO] Write results to file
61 2019-Jan-04 17:19:59.100850 - [INFO] Shutdown llvm and the analysis framework.

= load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !36, ID: 16


