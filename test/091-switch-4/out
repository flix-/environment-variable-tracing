0 2019-Jan-04 17:20:18.634994 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-04 17:20:18.635416 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-04 17:20:18.635776 - [INFO] No configuration file is used.
3 2019-Jan-04 17:20:18.635852 - [INFO] Program options have been successfully parsed.
4 2019-Jan-04 17:20:18.635949 - [INFO] Check program options for logical errors.
5 2019-Jan-04 17:20:18.636038 - [INFO] Set-up IR database.
6 2019-Jan-04 17:20:18.642649 - [INFO] Constructed the analysis controller.
7 2019-Jan-04 17:20:18.642757 - [INFO] Found the following IR files for this project: 
8 2019-Jan-04 17:20:18.642819 - [INFO] 	main.ll
9 2019-Jan-04 17:20:18.642878 - [INFO] Check for chosen entry points.
10 2019-Jan-04 17:20:18.642939 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-04 17:20:18.642998 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-04 17:20:18.643058 - [INFO] Preprocess module: main.ll
13 2019-Jan-04 17:20:18.643398 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-04 17:20:18.643556 - [INFO] Running ValueAnnotationPass
15 2019-Jan-04 17:20:18.644025 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-04 17:20:18.644088 - [INFO] Allocated Types    : 1
17 2019-Jan-04 17:20:18.644152 - [INFO] Allocation Sites   : 8
18 2019-Jan-04 17:20:18.644209 - [INFO] Basic Blocks       : 9
19 2019-Jan-04 17:20:18.644266 - [INFO] Calls Sites        : 8
20 2019-Jan-04 17:20:18.644323 - [INFO] Functions          : 3
21 2019-Jan-04 17:20:18.644380 - [INFO] Globals            : 1
22 2019-Jan-04 17:20:18.644437 - [INFO] Global Pointer     : 1
23 2019-Jan-04 17:20:18.644495 - [INFO] Instructions       : 36
24 2019-Jan-04 17:20:18.644552 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-04 17:20:18.644609 - [INFO] Store Instructions : 8
26 2019-Jan-04 17:20:18.644666 - [INFO]  
27 2019-Jan-04 17:20:18.644745 - [INFO]   i32
28 2019-Jan-04 17:20:18.645513 - [DEBUG] Analyzing function: main
29 2019-Jan-04 17:20:18.645989 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-04 17:20:18.646058 - [INFO] Construct type hierarchy
31 2019-Jan-04 17:20:18.646118 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-04 17:20:18.646323 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-04 17:20:18.646392 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-04 17:20:18.646454 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-04 17:20:18.646578 - [DEBUG] Walking in function: main
36 2019-Jan-04 17:20:18.646665 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 10
37 2019-Jan-04 17:20:18.647096 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-04 17:20:18.647156 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-04 17:20:18.647243 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-04 17:20:18.647306 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-04 17:20:18.647370 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27, ID: 11
42 2019-Jan-04 17:20:18.647713 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-04 17:20:18.647772 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-04 17:20:18.647845 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-04 17:20:18.647907 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-04 17:20:18.647970 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
47 2019-Jan-04 17:20:18.648373 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-04 17:20:18.648432 - [DEBUG] Target name: getenv
49 2019-Jan-04 17:20:18.648512 - [DEBUG] Walking in function: getenv
50 2019-Jan-04 17:20:18.648574 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-04 17:20:18.648638 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
52 2019-Jan-04 17:20:18.648997 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-04 17:20:18.649057 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-04 17:20:18.649131 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-04 17:20:18.649193 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-04 17:20:18.649257 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
57 2019-Jan-04 17:20:18.649595 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-04 17:20:18.649654 - [DEBUG] Target name: llvm.dbg.declare
59 2019-Jan-04 17:20:18.649728 - [DEBUG] Walking in function: llvm.dbg.declare
60 2019-Jan-04 17:20:18.649790 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2019-Jan-04 17:20:18.649854 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55, ID: 24
62 2019-Jan-04 17:20:18.650191 - [DEBUG] Found 1 possible target(s)
63 2019-Jan-04 17:20:18.650250 - [DEBUG] Target name: llvm.dbg.declare
64 2019-Jan-04 17:20:18.650324 - [DEBUG] Walking in function: llvm.dbg.declare
65 2019-Jan-04 17:20:18.650385 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
66 2019-Jan-04 17:20:18.650449 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65, ID: 29
67 2019-Jan-04 17:20:18.650800 - [DEBUG] Found 1 possible target(s)
68 2019-Jan-04 17:20:18.650859 - [DEBUG] Target name: llvm.dbg.declare
69 2019-Jan-04 17:20:18.650933 - [DEBUG] Walking in function: llvm.dbg.declare
70 2019-Jan-04 17:20:18.650995 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
71 2019-Jan-04 17:20:18.651059 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71, ID: 32
72 2019-Jan-04 17:20:18.651397 - [DEBUG] Found 1 possible target(s)
73 2019-Jan-04 17:20:18.651456 - [DEBUG] Target name: llvm.dbg.declare
74 2019-Jan-04 17:20:18.651530 - [DEBUG] Walking in function: llvm.dbg.declare
75 2019-Jan-04 17:20:18.651612 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
76 2019-Jan-04 17:20:18.651674 - [INFO] Call graph has been constructed
77 2019-Jan-04 17:20:18.651735 - [INFO] Performing analysis: plugin
78 2019-Jan-04 17:20:18.651801 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
79 2019-Jan-04 17:20:18.652296 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %b = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %c = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a4 = alloca i32, align 4, !phasar.instruction.id !18
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %b6 = alloca i32, align 4, !phasar.instruction.id !19
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !20
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9

  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  %0 = load i32, i32* %rc, align 4, !dbg !31, !phasar.instruction.id !32
Got load instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
Got switch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
Got switch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
Got switch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
=============

Adding line number: 9
Adding line number: 9
Adding line number: 12

  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
=============

Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12

  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
=============

Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12

  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
=============

Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12

  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
=============

Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 15

  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
=============

Adding line number: 15
Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 15

  br label %sw.epilog, !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
=============

Adding line number: 15
Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 15

  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
=============

Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 19

  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
=============

Adding line number: 19
Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 19

  br label %sw.epilog, !dbg !51, !phasar.instruction.id !52
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
=============

Adding line number: 19
Adding line number: 15
Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 15
Adding line number: 19

  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
=============

Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 23

  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============

Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 23
Adding line number: 23

  br label %sw.epilog, !dbg !57, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============

Adding line number: 19
Adding line number: 15
Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 12
Adding line number: 15
Adding line number: 19
Adding line number: 23
Adding line number: 23

  store i32 1, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============

Adding line number: 19
Adding line number: 15
Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 15
Adding line number: 19
Adding line number: 23
Adding line number: 23

  br label %sw.epilog7, !dbg !61, !phasar.instruction.id !62
Got branch instruction
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============

Adding line number: 19
Adding line number: 15
Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 15
Adding line number: 19
Adding line number: 23
Adding line number: 23

  call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  store i32 1, i32* %a4, align 4, !dbg !64, !phasar.instruction.id !66
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  br label %sw.epilog7, !dbg !67, !phasar.instruction.id !68
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  store i32 2, i32* %b6, align 4, !dbg !70, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 9
Adding line number: 9

  br label %sw.epilog7, !dbg !73, !phasar.instruction.id !74
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76
Got load instruction
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============

Adding line number: 19
Adding line number: 15
Adding line number: 9
Adding line number: 9
Adding line number: 12
Adding line number: 15
Adding line number: 19
Adding line number: 23
Adding line number: 23

  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %0 = load i32, i32* %rc, align 4, !dbg !31, !phasar.instruction.id !32
Got load instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
Got switch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
Got switch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
Got switch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
=============


  call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65
Got call instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
=============


  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
=============


  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
=============


  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
=============


  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
=============


  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
=============


  br label %sw.epilog, !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
=============


  store i32 1, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============


  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
=============


  br label %sw.epilog, !dbg !51, !phasar.instruction.id !52
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
=============


  store i32 1, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============


  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============


  br label %sw.epilog, !dbg !57, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============


  store i32 1, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============


  br label %sw.epilog7, !dbg !61, !phasar.instruction.id !62
Got branch instruction
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============


  %2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76
Got load instruction
Dumping facts
=============
  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50
  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43
  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49
  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55
  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56
=============


  store i32 1, i32* %a4, align 4, !dbg !64, !phasar.instruction.id !66
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  br label %sw.epilog7, !dbg !67, !phasar.instruction.id !68
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  store i32 2, i32* %b6, align 4, !dbg !70, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  br label %sw.epilog7, !dbg !73, !phasar.instruction.id !74
Got branch instruction
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50

  store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44

  store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !20
Got store instruction
Removed 0 memory locations from facts

  %b6 = alloca i32, align 4, !phasar.instruction.id !19
Got operands checking instruction (alloca)

  %a4 = alloca i32, align 4, !phasar.instruction.id !18
Got operands checking instruction (alloca)

  %b = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %c = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %0 = load i32, i32* %rc, align 4, !dbg !31, !phasar.instruction.id !32
Got load instruction

  br label %sw.epilog7, !dbg !73, !phasar.instruction.id !74
Got branch instruction

  %1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37
Got load instruction
Adding load instruction fact

  br label %sw.epilog7, !dbg !67, !phasar.instruction.id !68
Got branch instruction

  switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34
Got switch instruction

  br label %sw.epilog, !dbg !57, !phasar.instruction.id !58

  %2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76
Got load instruction

  br label %sw.epilog, !dbg !51, !phasar.instruction.id !52

  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39
Got switch instruction
Adding switch instruction fact

  call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43

  br label %sw.epilog, !dbg !45, !phasar.instruction.id !46

  call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49

  call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55

  store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56

  store i32 1, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60
Got store instruction
Removed 0 memory locations from facts

  br label %sw.epilog7, !dbg !61, !phasar.instruction.id !62
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65
Got call instruction

  store i32 1, i32* %a4, align 4, !dbg !64, !phasar.instruction.id !66
Got store instruction
Removed 0 memory locations from facts

  call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71
Got call instruction

  store i32 2, i32* %b6, align 4, !dbg !70, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts

  ret i32 %2, !dbg !77, !phasar.instruction.id !78worklist size: 39
worklist size: 38
worklist size: 37
worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 32
worklist size: 31
worklist size: 31
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21


Instruction:
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !20, ID: 9
Facts:
	EMPTY


Instruction:
%b6 = alloca i32, align 4, !phasar.instruction.id !19, ID: 8
Facts:
	EMPTY


Instruction:
%a4 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7
Facts:
	EMPTY


Instruction:
%b = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%c = alloca i32, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !25, metadata !22), !dbg !26, !phasar.instruction.id !27, ID: 11
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 10
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !31, !phasar.instruction.id !32, ID: 14
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
br label %sw.epilog7, !dbg !73, !phasar.instruction.id !74, ID: 34
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
br label %sw.epilog7, !dbg !67, !phasar.instruction.id !68, ID: 31
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
switch i32 %0, label %sw.default5 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !33, !phasar.instruction.id !34, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
br label %sw.epilog, !dbg !57, !phasar.instruction.id !58, ID: 26
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55, ID: 24
store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56, ID: 25


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76, ID: 35
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55, ID: 24
store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56, ID: 25


Instruction:
br label %sw.epilog, !dbg !51, !phasar.instruction.id !52, ID: 23
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21


Instruction:
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17


Instruction:
br label %sw.epilog, !dbg !45, !phasar.instruction.id !46, ID: 20
Facts:
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18


Instruction:
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17


Instruction:
call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55, ID: 24
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17


Instruction:
store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56, ID: 25
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55, ID: 24


Instruction:
store i32 1, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60, ID: 27
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i3280 2019-Jan-04 17:20:18.791910 - [INFO] Write results to file
81 2019-Jan-04 17:20:18.792108 - [INFO] Shutdown llvm and the analysis framework.

 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
switch i32 %1, label %sw.default [
    i32 0, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !38, !phasar.instruction.id !39, ID: 17
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55, ID: 24
store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56, ID: 25


Instruction:
br label %sw.epilog7, !dbg !61, !phasar.instruction.id !62, ID: 28
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55, ID: 24
store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56, ID: 25


Instruction:
call void @llvm.dbg.declare(metadata i32* %a4, metadata !63, metadata !22), !dbg !64, !phasar.instruction.id !65, ID: 29
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
store i32 1, i32* %a4, align 4, !dbg !64, !phasar.instruction.id !66, ID: 30
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
call void @llvm.dbg.declare(metadata i32* %b6, metadata !69, metadata !22), !dbg !70, !phasar.instruction.id !71, ID: 32
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
store i32 2, i32* %b6, align 4, !dbg !70, !phasar.instruction.id !72, ID: 33
Facts:
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12


Instruction:
ret i32 %2, !dbg !77, !phasar.instruction.id !78, ID: 36
Facts:
store i32 2, i32* %b, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22
store i32 1, i32* %a, align 4, !dbg !42, !phasar.instruction.id !44, ID: 19
store i32 %call, i32* %taint, align 4, !dbg !26, !phasar.instruction.id !30, ID: 13
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 12
%1 = load i32, i32* %taint, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16
call void @llvm.dbg.declare(metadata i32* %a, metadata !40, metadata !22), !dbg !42, !phasar.instruction.id !43, ID: 18
call void @llvm.dbg.declare(metadata i32* %b, metadata !47, metadata !22), !dbg !48, !phasar.instruction.id !49, ID: 21
call void @llvm.dbg.declare(metadata i32* %c, metadata !53, metadata !22), !dbg !54, !phasar.instruction.id !55, ID: 24
store i32 3, i32* %c, align 4, !dbg !54, !phasar.instruction.id !56, ID: 25


