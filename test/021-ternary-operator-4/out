0 2018-Dec-31 15:54:21.310255 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-31 15:54:21.310673 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-31 15:54:21.311014 - [INFO] No configuration file is used.
3 2018-Dec-31 15:54:21.311091 - [INFO] Program options have been successfully parsed.
4 2018-Dec-31 15:54:21.311189 - [INFO] Check program options for logical errors.
5 2018-Dec-31 15:54:21.311278 - [INFO] Set-up IR database.
6 2018-Dec-31 15:54:21.316262 - [INFO] Constructed the analysis controller.
7 2018-Dec-31 15:54:21.316377 - [INFO] Found the following IR files for this project: 
8 2018-Dec-31 15:54:21.316439 - [INFO] 	main.ll
9 2018-Dec-31 15:54:21.316498 - [INFO] Check for chosen entry points.
10 2018-Dec-31 15:54:21.316559 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-31 15:54:21.316617 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-31 15:54:21.316678 - [INFO] Preprocess module: main.ll
13 2018-Dec-31 15:54:21.317020 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-31 15:54:21.317157 - [INFO] Running ValueAnnotationPass
15 2018-Dec-31 15:54:21.317487 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-31 15:54:21.317551 - [INFO] Allocated Types    : 1
17 2018-Dec-31 15:54:21.317615 - [INFO] Allocation Sites   : 3
18 2018-Dec-31 15:54:21.317672 - [INFO] Basic Blocks       : 4
19 2018-Dec-31 15:54:21.317730 - [INFO] Calls Sites        : 5
20 2018-Dec-31 15:54:21.317787 - [INFO] Functions          : 5
21 2018-Dec-31 15:54:21.317844 - [INFO] Globals            : 1
22 2018-Dec-31 15:54:21.317902 - [INFO] Global Pointer     : 1
23 2018-Dec-31 15:54:21.317959 - [INFO] Instructions       : 18
24 2018-Dec-31 15:54:21.318016 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-31 15:54:21.318073 - [INFO] Store Instructions : 3
26 2018-Dec-31 15:54:21.318131 - [INFO]  
27 2018-Dec-31 15:54:21.318204 - [INFO]   i32
28 2018-Dec-31 15:54:21.318659 - [DEBUG] Analyzing function: main
29 2018-Dec-31 15:54:21.318902 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-31 15:54:21.318965 - [INFO] Construct type hierarchy
31 2018-Dec-31 15:54:21.319025 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-31 15:54:21.319173 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-31 15:54:21.319242 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-31 15:54:21.319304 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-31 15:54:21.319414 - [DEBUG] Walking in function: main
36 2018-Dec-31 15:54:21.319531 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-31 15:54:21.319852 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-31 15:54:21.319912 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-31 15:54:21.319998 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-31 15:54:21.320062 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-31 15:54:21.320126 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
42 2018-Dec-31 15:54:21.320409 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-31 15:54:21.320467 - [DEBUG] Target name: getenv
44 2018-Dec-31 15:54:21.320548 - [DEBUG] Walking in function: getenv
45 2018-Dec-31 15:54:21.320610 - [DEBUG] Function already visited or only declaration: getenv
46 2018-Dec-31 15:54:21.320674 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2018-Dec-31 15:54:21.320901 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-31 15:54:21.320959 - [DEBUG] Target name: foo
49 2018-Dec-31 15:54:21.321037 - [DEBUG] Walking in function: foo
50 2018-Dec-31 15:54:21.321099 - [DEBUG] Function already visited or only declaration: foo
51 2018-Dec-31 15:54:21.321163 - [DEBUG] Found static call-site: %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11
52 2018-Dec-31 15:54:21.321406 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-31 15:54:21.321466 - [DEBUG] Target name: bar
54 2018-Dec-31 15:54:21.321545 - [DEBUG] Walking in function: bar
55 2018-Dec-31 15:54:21.321608 - [DEBUG] Function already visited or only declaration: bar
56 2018-Dec-31 15:54:21.321672 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !34, !phasar.instruction.id !35, ID: 15
57 2018-Dec-31 15:54:21.321906 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-31 15:54:21.321965 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-31 15:54:21.322039 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-31 15:54:21.322102 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-31 15:54:21.322164 - [INFO] Call graph has been constructed
62 2018-Dec-31 15:54:21.322225 - [INFO] Performing analysis: plugin
63 2018-Dec-31 15:54:21.322291 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2018-Dec-31 15:54:21.322771 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removing memory location
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============

Adding line: 8

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============

Adding line: 8
Adding line: 8

  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
=============

Adding line: 8
Adding line: 8
Adding line: 8

  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
=============

Adding line: 8
Adding line: 8
Adding line: 8

  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
=============

Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  br label %cond.end, !dbg !20, !phasar.instruction.id !27
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
=============

Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
=============

Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  br label %cond.end, !dbg !20, !phasar.instruction.id !30
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
=============

Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
Got phi node instruction
Adding phi node instruction fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============

Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============

Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !34, !phasar.instruction.id !35
Got call instruction
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============

Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============

Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 9
Adding line: 8
Adding line: 8

  store i32 %0, i32* %a, align 4, !dbg !34, !phasar.instruction.id !38
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %0, i32* %a, align 4, !dbg !34, !phasar.instruction.id !38
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 9
Adding line: 8
Adding line: 8

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============


  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
=============


  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
=============


  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
=============


  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
=============


  br label %cond.end, !dbg !20, !phasar.instruction.id !27
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
=============


  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
Got phi node instruction
Adding phi node instruction fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============


  br label %cond.end, !dbg !20, !phasar.instruction.id !30
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
=============


  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
Got phi node instruction
Adding phi node instruction fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============


  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !34, !phasar.instruction.id !35
Got call instruction
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============


  %0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============


  store i32 %0, i32* %a, align 4, !dbg !34, !phasar.instruction.id !38
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %0, i32* %a, align 4, !dbg !34, !phasar.instruction.id !38
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37
  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
=============


  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 %0, i32* %a, align 4, !dbg !34, !phasar.instruction.id !38
Got store instruction
Removing memory location
Adding memory location (store)

  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32
Got store instruction
Removing memory location
Adding memory location (store)

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removing memory location

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !34, !phasar.instruction.id !35
Got call instruction

  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact

  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26

  %0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37
Got load instruction
Adding load instruction fact

  br label %cond.end, !dbg !20, !phasar.instruction.id !27

  %call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29

  br label %cond.end, !dbg !20, !phasar.instruction.id !30

  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31
Got phi node instruction
Adding phi node instruction fact

  ret i32 0, !dbg !39, !phasar.instruction.id !40worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
store i32 %0, i32* %a, align 4, !dbg !34, !phasar.instruction.id !38, ID: 17
Facts:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32, ID: 14
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37, ID: 16
%call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11
%cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31, ID: 13


Instruction:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32, ID: 14
Facts:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11
%cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31, ID: 13


Instruction:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !34, !phasar.instruction.id !35, ID: 15
Facts:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32, ID: 14
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11
%cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31, ID: 13


Instruction:
br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24, ID: 8
Facts:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @gete65 2018-Dec-31 15:54:21.365172 - [INFO] Write results to file
66 2018-Dec-31 15:54:21.365345 - [INFO] Shutdown llvm and the analysis framework.

nv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24, ID: 8


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37, ID: 16
Facts:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32, ID: 14
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11
%cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31, ID: 13


Instruction:
br label %cond.end, !dbg !20, !phasar.instruction.id !27, ID: 10
Facts:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24, ID: 8


Instruction:
br label %cond.end, !dbg !20, !phasar.instruction.id !30, ID: 12
Facts:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24, ID: 8
%call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
%cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31, ID: 13
Facts:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %cmp, label %cond.true, label %cond.false, !dbg !20, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
ret i32 0, !dbg !39, !phasar.instruction.id !40, ID: 18
Facts:
store i32 %0, i32* %a, align 4, !dbg !34, !phasar.instruction.id !38, ID: 17
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !32, ID: 14
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !36, !phasar.instruction.id !37, ID: 16
%call2 = call i32 (...) @bar(), !dbg !28, !phasar.instruction.id !29, ID: 11
%cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !20, !phasar.instruction.id !31, ID: 13


