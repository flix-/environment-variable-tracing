0 2019-Jan-05 20:21:39.709328 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 20:21:39.709738 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 20:21:39.710088 - [INFO] No configuration file is used.
3 2019-Jan-05 20:21:39.710166 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 20:21:39.710256 - [INFO] Check program options for logical errors.
5 2019-Jan-05 20:21:39.710345 - [INFO] Set-up IR database.
6 2019-Jan-05 20:21:39.715494 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 20:21:39.715605 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 20:21:39.715666 - [INFO] 	main.ll
9 2019-Jan-05 20:21:39.715725 - [INFO] Check for chosen entry points.
10 2019-Jan-05 20:21:39.715786 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 20:21:39.715845 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 20:21:39.715905 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 20:21:39.716248 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 20:21:39.716386 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 20:21:39.716746 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 20:21:39.716811 - [INFO] Allocated Types    : 1
17 2019-Jan-05 20:21:39.716875 - [INFO] Allocation Sites   : 5
18 2019-Jan-05 20:21:39.716933 - [INFO] Basic Blocks       : 5
19 2019-Jan-05 20:21:39.716991 - [INFO] Calls Sites        : 5
20 2019-Jan-05 20:21:39.717049 - [INFO] Functions          : 3
21 2019-Jan-05 20:21:39.717107 - [INFO] Globals            : 1
22 2019-Jan-05 20:21:39.717165 - [INFO] Global Pointer     : 1
23 2019-Jan-05 20:21:39.717222 - [INFO] Instructions       : 22
24 2019-Jan-05 20:21:39.717280 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 20:21:39.717338 - [INFO] Store Instructions : 5
26 2019-Jan-05 20:21:39.717396 - [INFO]  
27 2019-Jan-05 20:21:39.717470 - [INFO]   i32
28 2019-Jan-05 20:21:39.717993 - [DEBUG] Analyzing function: main
29 2019-Jan-05 20:21:39.718311 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 20:21:39.718380 - [INFO] Construct type hierarchy
31 2019-Jan-05 20:21:39.718441 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 20:21:39.718625 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 20:21:39.718694 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 20:21:39.718756 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 20:21:39.718872 - [DEBUG] Walking in function: main
36 2019-Jan-05 20:21:39.718957 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
37 2019-Jan-05 20:21:39.719297 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 20:21:39.719356 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 20:21:39.719442 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 20:21:39.719506 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 20:21:39.719570 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
42 2019-Jan-05 20:21:39.719838 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 20:21:39.719897 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 20:21:39.719971 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 20:21:39.720033 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 20:21:39.720096 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2019-Jan-05 20:21:39.720404 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 20:21:39.720463 - [DEBUG] Target name: getenv
49 2019-Jan-05 20:21:39.720543 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 20:21:39.720606 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 20:21:39.720670 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
52 2019-Jan-05 20:21:39.720952 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 20:21:39.721012 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-05 20:21:39.721087 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-05 20:21:39.721149 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-05 20:21:39.721213 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
57 2019-Jan-05 20:21:39.721477 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-05 20:21:39.721536 - [DEBUG] Target name: llvm.dbg.declare
59 2019-Jan-05 20:21:39.721611 - [DEBUG] Walking in function: llvm.dbg.declare
60 2019-Jan-05 20:21:39.721674 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2019-Jan-05 20:21:39.721736 - [INFO] Call graph has been constructed
62 2019-Jan-05 20:21:39.721798 - [INFO] Performing analysis: plugin
63 2019-Jan-05 20:21:39.721898 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2019-Jan-05 20:21:39.722393 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %b = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Added line number: 9

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Added line number: 9
Added line number: 9

  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
=============

Added line number: 9
Added line number: 9
Added line number: 10

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  br label %sw.epilog, !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 17
Added line number: 10

  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 17
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 17
Added line number: 10

  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 17
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 17
Added line number: 10

  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 21

  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 21
Added line number: 21

  br label %sw.epilog, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
=============

Added line number: 17
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 17
Added line number: 10
Added line number: 21
Added line number: 21

  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
=============

Added line number: 17
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 17
Added line number: 24
Added line number: 21
Added line number: 21

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============


  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
=============


  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
=============


  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  br label %sw.epilog, !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
=============


  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
=============


  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
=============


  br label %sw.epilog, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
=============


  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40

  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removed 0 memory locations from facts

  %b = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  br label %sw.epilog, !dbg !47, !phasar.instruction.id !48

  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact

  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact

  br label %sw.epilog, !dbg !35, !phasar.instruction.id !36

  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45

  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46

  ret i32 %1, !dbg !51, !phasar.instruction.id !52worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 15
worklist size: 15
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
%b = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br label %sw.epilog, !dbg !47, !phasar.instruction.id !48, ID: 20
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50, ID: 21
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19


Instruction:
br label %sw.epilog, !dbg !41, !phasar.instruction.id !42, ID: 17
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
br label %sw.epilog, !dbg !35, !phasar.instruction.id !36, ID: 14
Facts:
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw65 2019-Jan-05 20:21:39.786275 - [INFO] Write results to file
66 2019-Jan-05 20:21:39.786460 - [INFO] Shutdown llvm and the analysis framework.

.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18


Instruction:
ret i32 %1, !dbg !51, !phasar.instruction.id !52, ID: 22
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50, ID: 21
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19


