0 2018-Dec-28 12:41:18.373162 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 12:41:18.373616 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 12:41:18.373960 - [INFO] No configuration file is used.
3 2018-Dec-28 12:41:18.374036 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 12:41:18.374136 - [INFO] Check program options for logical errors.
5 2018-Dec-28 12:41:18.374226 - [INFO] Set-up IR database.
6 2018-Dec-28 12:41:18.379932 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 12:41:18.380054 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 12:41:18.380116 - [INFO] 	main.ll
9 2018-Dec-28 12:41:18.380175 - [INFO] Check for chosen entry points.
10 2018-Dec-28 12:41:18.380236 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 12:41:18.380294 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 12:41:18.380355 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 12:41:18.380716 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 12:41:18.380852 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 12:41:18.381234 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 12:41:18.381299 - [INFO] Allocated Types    : 1
17 2018-Dec-28 12:41:18.381363 - [INFO] Allocation Sites   : 5
18 2018-Dec-28 12:41:18.381421 - [INFO] Basic Blocks       : 5
19 2018-Dec-28 12:41:18.381478 - [INFO] Calls Sites        : 5
20 2018-Dec-28 12:41:18.381535 - [INFO] Functions          : 3
21 2018-Dec-28 12:41:18.381593 - [INFO] Globals            : 1
22 2018-Dec-28 12:41:18.381650 - [INFO] Global Pointer     : 1
23 2018-Dec-28 12:41:18.381707 - [INFO] Instructions       : 22
24 2018-Dec-28 12:41:18.381765 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 12:41:18.381822 - [INFO] Store Instructions : 5
26 2018-Dec-28 12:41:18.381879 - [INFO]  
27 2018-Dec-28 12:41:18.381953 - [INFO]   i32
28 2018-Dec-28 12:41:18.382589 - [DEBUG] Analyzing function: main
29 2018-Dec-28 12:41:18.382914 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 12:41:18.382979 - [INFO] Construct type hierarchy
31 2018-Dec-28 12:41:18.383039 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 12:41:18.383205 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 12:41:18.383295 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 12:41:18.383357 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 12:41:18.383471 - [DEBUG] Walking in function: main
36 2018-Dec-28 12:41:18.383558 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
37 2018-Dec-28 12:41:18.383901 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 12:41:18.383960 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 12:41:18.384047 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 12:41:18.384111 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 12:41:18.384175 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
42 2018-Dec-28 12:41:18.384441 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 12:41:18.384500 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-28 12:41:18.384574 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-28 12:41:18.384636 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-28 12:41:18.384699 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2018-Dec-28 12:41:18.385006 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 12:41:18.385065 - [DEBUG] Target name: getenv
49 2018-Dec-28 12:41:18.385145 - [DEBUG] Walking in function: getenv
50 2018-Dec-28 12:41:18.385207 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-28 12:41:18.385271 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
52 2018-Dec-28 12:41:18.385672 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 12:41:18.385734 - [DEBUG] Target name: llvm.dbg.declare
54 2018-Dec-28 12:41:18.385814 - [DEBUG] Walking in function: llvm.dbg.declare
55 2018-Dec-28 12:41:18.385877 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2018-Dec-28 12:41:18.385943 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
57 2018-Dec-28 12:41:18.386303 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-28 12:41:18.386363 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-28 12:41:18.386441 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-28 12:41:18.386505 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-28 12:41:18.386594 - [INFO] Call graph has been constructed
62 2018-Dec-28 12:41:18.386658 - [INFO] Performing analysis: plugin
63 2018-Dec-28 12:41:18.386726 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2018-Dec-28 12:41:18.387254 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %b = alloca i32, align 4, !phasar.instruction.id !16
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 9

flow()
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 9
Adding line: 9
Adding line: 10

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

flow()
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

flow()
  br label %sw.epilog, !dbg !35, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 17
Adding line: 10

flow()
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 17
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 17
Adding line: 10

flow()
  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 6
join()
Adding line: 17
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 17
Adding line: 10

flow()
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 21

flow()
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 21
Adding line: 21

flow()
  br label %sw.epilog, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 6
join()
Adding line: 17
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 17
Adding line: 10
Adding line: 21
Adding line: 21

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 17
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 17
Adding line: 24
Adding line: 21
Adding line: 21

flow()
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  br label %sw.epilog, !dbg !35, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 5

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 6

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br label %sw.epilog, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 6

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
===========================
Got call instruction

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
===========================

flow()
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
===========================

flow()
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
===========================
Got store instruction
Adding store instruction

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
===========================
Got call instruction
Adding call instruction fact

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
===========================
Got store instruction

flow()
  %b = alloca i32, align 4, !phasar.instruction.id !16
===========================
Got operands checking instruction (alloca)

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
===========================
Got operands checking instruction (load)
Adding fact

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
===========================

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)

flow()
  br label %sw.epilog, !dbg !47, !phasar.instruction.id !48
===========================

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42
===========================

flow()
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact

flow()
  br label %sw.epilog, !dbg !35, !phasar.instruction.id !36
===========================

flow()
  call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
===========================

flow()
  store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46
===========================

flow()
  ret i32 %1, !dbg !51, !phasar.instruction.id !52worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 15
worklist size: 15
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
%b = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br label %sw.epilog, !dbg !47, !phasar.instruction.id !48, ID: 20
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50, ID: 21
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19


Instruction:
br label %sw.epilog, !dbg !41, !phasar.instruction.id !42, ID: 17
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
br label %sw.epilog, !dbg !35, !phasar.instruction.id !36, ID: 14
Facts:
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw65 2018-Dec-28 12:41:18.419962 - [INFO] Write results to file
66 2018-Dec-28 12:41:18.420151 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18


Instruction:
ret i32 %1, !dbg !51, !phasar.instruction.id !52, ID: 22
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
%1 = load i32, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50, ID: 21
call void @llvm.dbg.declare(metadata i32* %b, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
store i32 2, i32* %b, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19


