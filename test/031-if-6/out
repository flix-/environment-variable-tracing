0 2018-Dec-28 10:33:51.555027 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 10:33:51.555574 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 10:33:51.555932 - [INFO] No configuration file is used.
3 2018-Dec-28 10:33:51.556008 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 10:33:51.556109 - [INFO] Check program options for logical errors.
5 2018-Dec-28 10:33:51.556207 - [INFO] Set-up IR database.
6 2018-Dec-28 10:33:51.563148 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 10:33:51.563266 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 10:33:51.563328 - [INFO] 	main.ll
9 2018-Dec-28 10:33:51.563387 - [INFO] Check for chosen entry points.
10 2018-Dec-28 10:33:51.563449 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 10:33:51.563507 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 10:33:51.563567 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 10:33:51.563932 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 10:33:51.564110 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 10:33:51.564596 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 10:33:51.564660 - [INFO] Allocated Types    : 1
17 2018-Dec-28 10:33:51.564724 - [INFO] Allocation Sites   : 3
18 2018-Dec-28 10:33:51.564782 - [INFO] Basic Blocks       : 12
19 2018-Dec-28 10:33:51.564840 - [INFO] Calls Sites        : 6
20 2018-Dec-28 10:33:51.564897 - [INFO] Functions          : 5
21 2018-Dec-28 10:33:51.564954 - [INFO] Globals            : 1
22 2018-Dec-28 10:33:51.565011 - [INFO] Global Pointer     : 1
23 2018-Dec-28 10:33:51.565069 - [INFO] Instructions       : 33
24 2018-Dec-28 10:33:51.565126 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 10:33:51.565183 - [INFO] Store Instructions : 6
26 2018-Dec-28 10:33:51.565241 - [INFO]  
27 2018-Dec-28 10:33:51.565317 - [INFO]   i32
28 2018-Dec-28 10:33:51.565972 - [DEBUG] Analyzing function: main
29 2018-Dec-28 10:33:51.566278 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 10:33:51.566343 - [INFO] Construct type hierarchy
31 2018-Dec-28 10:33:51.566404 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 10:33:51.566599 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 10:33:51.566669 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 10:33:51.566732 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 10:33:51.566844 - [DEBUG] Walking in function: main
36 2018-Dec-28 10:33:51.566931 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-28 10:33:51.567366 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 10:33:51.567427 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 10:33:51.567514 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 10:33:51.567578 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 10:33:51.567642 - [DEBUG] Found static call-site: %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22, ID: 6
42 2018-Dec-28 10:33:51.567963 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 10:33:51.568022 - [DEBUG] Target name: foo
44 2018-Dec-28 10:33:51.568103 - [DEBUG] Walking in function: foo
45 2018-Dec-28 10:33:51.568164 - [DEBUG] Function already visited or only declaration: foo
46 2018-Dec-28 10:33:51.568228 - [DEBUG] Found static call-site: %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
47 2018-Dec-28 10:33:51.568590 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 10:33:51.568654 - [DEBUG] Target name: getenv
49 2018-Dec-28 10:33:51.568732 - [DEBUG] Walking in function: getenv
50 2018-Dec-28 10:33:51.568795 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-28 10:33:51.568859 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
52 2018-Dec-28 10:33:51.569315 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 10:33:51.569376 - [DEBUG] Target name: llvm.dbg.declare
54 2018-Dec-28 10:33:51.569454 - [DEBUG] Walking in function: llvm.dbg.declare
55 2018-Dec-28 10:33:51.569516 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2018-Dec-28 10:33:51.569580 - [DEBUG] Found static call-site: %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
57 2018-Dec-28 10:33:51.569892 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-28 10:33:51.569950 - [DEBUG] Target name: bar
59 2018-Dec-28 10:33:51.570030 - [DEBUG] Walking in function: bar
60 2018-Dec-28 10:33:51.570092 - [DEBUG] Function already visited or only declaration: bar
61 2018-Dec-28 10:33:51.570156 - [DEBUG] Found static call-site: %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
62 2018-Dec-28 10:33:51.570462 - [DEBUG] Found 1 possible target(s)
63 2018-Dec-28 10:33:51.570521 - [DEBUG] Target name: foo
64 2018-Dec-28 10:33:51.570594 - [DEBUG] Walking in function: foo
65 2018-Dec-28 10:33:51.570686 - [DEBUG] Function already visited or only declaration: foo
66 2018-Dec-28 10:33:51.570750 - [INFO] Call graph has been constructed
67 2018-Dec-28 10:33:51.570812 - [INFO] Performing analysis: plugin
68 2018-Dec-28 10:33:51.570879 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
69 2018-Dec-28 10:33:51.571374 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %ret = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23
===========================
Got operands checking instruction (icmp)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br i1 %tobool, label %if.then, label %if.else13, !dbg !24, !phasar.instruction.id !25
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br i1 %tobool, label %if.then, label %if.else13, !dbg !24, !phasar.instruction.id !25
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 10

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 10
Adding line: 10

flow()
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10

flow()
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10

flow()
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 10

flow()
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 10

flow()
  br label %if.end12, !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 10

flow()
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13

flow()
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13

flow()
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13

flow()
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13

flow()
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13

flow()
  br label %if.end11, !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13

flow()
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 16

flow()
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16

flow()
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16

flow()
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16

flow()
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16
Adding line: 17

flow()
  br label %if.end, !dbg !65, !phasar.instruction.id !66
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 8
join()
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16
Adding line: 17

flow()
  br label %if.end11, !phasar.instruction.id !67
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 8
join()
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16
Adding line: 17

flow()
  br label %if.end12, !phasar.instruction.id !68
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 9
join()
Adding line: 14
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16
Adding line: 17

flow()
  br label %if.end14, !dbg !69, !phasar.instruction.id !70
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 12
join()
Adding line: 14
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16
Adding line: 17

flow()
  store i32 100, i32* %ret, align 4, !dbg !71, !phasar.instruction.id !73
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %if.end14, !phasar.instruction.id !74
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 12
New Facts: 0

flow()
  %1 = load i32, i32* %ret, align 4, !dbg !75, !phasar.instruction.id !76
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 13
join()
Adding line: 14
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 24
Adding line: 13
Adding line: 13
Adding line: 16
Adding line: 16
Adding line: 17

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  br label %if.end12, !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 13
New Facts: 7

flow()
  br label %if.end14, !dbg !69, !phasar.instruction.id !70
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br label %if.end11, !dbg !53, !phasar.instruction.id !54
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 6

flow()
  br label %if.end12, !phasar.instruction.id !68
===========================
sqSubSetEqual()
Old Facts: 13
New Facts: 9

flow()
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 7

flow()
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  br label %if.end11, !phasar.instruction.id !67
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 8

flow()
  br label %if.end, !dbg !65, !phasar.instruction.id !66
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  br label %if.end11, !phasar.instruction.id !67
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 8

flow()
  br label %if.end12, !phasar.instruction.id !68
===========================
sqSubSetEqual()
Old Facts: 13
New Facts: 9

flow()
  br label %if.end14, !dbg !69, !phasar.instruction.id !70
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %1 = load i32, i32* %ret, align 4, !dbg !75, !phasar.instruction.id !76
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 13
New Facts: 13

flow()
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
===========================
Got call instruction

flow()
  %ret = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22
===========================
Got call instruction

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
===========================

flow()
  br label %if.end14, !phasar.instruction.id !74
===========================
Got branch instruction

flow()
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
===========================

flow()
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
===========================

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23
===========================
Got operands checking instruction (icmp)

flow()
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
===========================
Got call instruction
Adding call instruction fact

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
===========================
Got store instruction

flow()
  br i1 %tobool, label %if.then, label %if.else13, !dbg !24, !phasar.instruction.id !25
===========================
Got branch instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
===========================

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
===========================
Got operands checking instruction (icmp)
Adding fact

flow()
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
===========================

flow()
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
===========================
Got branch instruction
Adding conditional branch instruction fact

flow()
  %1 = load i32, i32* %ret, align 4, !dbg !75, !phasar.instruction.id !76
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br label %if.end12, !dbg !42, !phasar.instruction.id !43
===========================

flow()
  %call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46
===========================

flow()
  %tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47
===========================

flow()
  br label %if.end12, !phasar.instruction.id !68
===========================

flow()
  br label %if.end, !dbg !65, !phasar.instruction.id !66
===========================

flow()
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49
===========================

flow()
  br label %if.end11, !dbg !53, !phasar.instruction.id !54
===========================

flow()
  %call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58
===========================

flow()
  %tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59
===========================

flow()
  br label %if.end11, !phasar.instruction.id !67
===========================

flow()
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61
===========================

flow()
  store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64
===========================

flow()
  br label %if.end14, !dbg !69, !phasar.instruction.id !70
===========================
Got branch instruction

flow()
  store i32 100, i32* %ret, align 4, !dbg !71, !phasar.instruction.id !73
===========================
Got store instruction

flow()
  ret i32 %1, !dbg !77, !phasar.instruction.id !78worklist size: 36
worklist size: 35
worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 27
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 28
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 29
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%ret = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22, ID: 6
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18


Instruction:
br label %if.end14, !phasar.instruction.id !74, ID: 31
Facts:
	EMPTY


Instruction:
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23, ID: 7
Facts:
	EMPTY


Instruction:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %if.then, label %if.else13, !dbg !24, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9


Instruction:
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10


Instruction:
%1 = load i32, i32* %ret, align 4, !dbg !75, !phasar.instruction.id !76, ID: 32
Facts:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
br label %if.end12, !dbg !42, !phasar.instruction.id !43, ID: 16
Facts:
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17


Instruction:
br label %if.end12, !phasar.instruction.id !68, ID: 28
Facts:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
br label %if.end, !dbg !65, !phasar.instruction.id !66, ID: 26
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
br i1 %tobool5, label %if.then6, label %if.else7, !dbg !48, !phasar.instruction.id !49, ID: 19
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18


Instruction:
br label %if.end11, !dbg !53, !phasar.instruction.id !54, ID: 21
Facts:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18


Instruction:
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18


Instruction:
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22


Instruction:
br label %if.end11, !phasar.instruction.id !67, ID: 27
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
br i1 %tobool9, label %if.then10, label %if.end, !dbg !60, !phasar.instruction.id !61, ID: 24
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23


Instruction:
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23


Instruction:
br label %if.end14, !dbg !69, !phasar.instruction.id !70, ID: 29
Facts:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


Instruction:
store i32 100, i32* %ret, align 4, !dbg !71, !phasar.instruction.id !73, ID: 30
Facts:
	EMPTY


Instruction:
ret i32 %1, !dbg !77, !phasar.instruction.id !78, ID: 33
Facts:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction70 2018-Dec-28 10:33:51.643383 - [INFO] Write results to file
71 2018-Dec-28 10:33:51.643582 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
.id !52, ID: 20
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
%1 = load i32, i32* %ret, align 4, !dbg !75, !phasar.instruction.id !76, ID: 32
%call4 = call i32 (...) @bar(), !dbg !44, !phasar.instruction.id !46, ID: 17
%tobool5 = icmp ne i32 %call4, 0, !dbg !44, !phasar.instruction.id !47, ID: 18
%call8 = call i32 (...) @foo(), !dbg !55, !phasar.instruction.id !58, ID: 22
%tobool9 = icmp ne i32 %call8, 0, !dbg !55, !phasar.instruction.id !59, ID: 23
store i32 100, i32* %ret, align 4, !dbg !62, !phasar.instruction.id !64, ID: 25


