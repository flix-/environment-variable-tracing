0 2018-Dec-28 11:42:55.783840 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 11:42:55.784269 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 11:42:55.784615 - [INFO] No configuration file is used.
3 2018-Dec-28 11:42:55.784692 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 11:42:55.784792 - [INFO] Check program options for logical errors.
5 2018-Dec-28 11:42:55.784882 - [INFO] Set-up IR database.
6 2018-Dec-28 11:42:55.791291 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 11:42:55.791408 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 11:42:55.791469 - [INFO] 	main.ll
9 2018-Dec-28 11:42:55.791528 - [INFO] Check for chosen entry points.
10 2018-Dec-28 11:42:55.791589 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 11:42:55.791647 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 11:42:55.791707 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 11:42:55.792065 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 11:42:55.792200 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 11:42:55.792759 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 11:42:55.792837 - [INFO] Allocated Types    : 1
17 2018-Dec-28 11:42:55.792905 - [INFO] Allocation Sites   : 4
18 2018-Dec-28 11:42:55.792963 - [INFO] Basic Blocks       : 9
19 2018-Dec-28 11:42:55.793020 - [INFO] Calls Sites        : 4
20 2018-Dec-28 11:42:55.793077 - [INFO] Functions          : 3
21 2018-Dec-28 11:42:55.793135 - [INFO] Globals            : 1
22 2018-Dec-28 11:42:55.793192 - [INFO] Global Pointer     : 1
23 2018-Dec-28 11:42:55.793250 - [INFO] Instructions       : 32
24 2018-Dec-28 11:42:55.793307 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 11:42:55.793364 - [INFO] Store Instructions : 6
26 2018-Dec-28 11:42:55.793422 - [INFO]  
27 2018-Dec-28 11:42:55.793497 - [INFO]   i32
28 2018-Dec-28 11:42:55.794158 - [DEBUG] Analyzing function: main
29 2018-Dec-28 11:42:55.794483 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 11:42:55.794545 - [INFO] Construct type hierarchy
31 2018-Dec-28 11:42:55.794607 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 11:42:55.794804 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 11:42:55.794874 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 11:42:55.794937 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 11:42:55.795050 - [DEBUG] Walking in function: main
36 2018-Dec-28 11:42:55.795137 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2018-Dec-28 11:42:55.795537 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 11:42:55.795652 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 11:42:55.795743 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 11:42:55.795806 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 11:42:55.795870 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7
42 2018-Dec-28 11:42:55.796196 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 11:42:55.796255 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-28 11:42:55.796329 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-28 11:42:55.796391 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-28 11:42:55.796455 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
47 2018-Dec-28 11:42:55.796829 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 11:42:55.796888 - [DEBUG] Target name: getenv
49 2018-Dec-28 11:42:55.796997 - [DEBUG] Walking in function: getenv
50 2018-Dec-28 11:42:55.797060 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-28 11:42:55.797123 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
52 2018-Dec-28 11:42:55.797457 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 11:42:55.797516 - [DEBUG] Target name: llvm.dbg.declare
54 2018-Dec-28 11:42:55.797590 - [DEBUG] Walking in function: llvm.dbg.declare
55 2018-Dec-28 11:42:55.797652 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2018-Dec-28 11:42:55.797717 - [INFO] Call graph has been constructed
57 2018-Dec-28 11:42:55.797779 - [INFO] Performing analysis: plugin
58 2018-Dec-28 11:42:55.797845 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2018-Dec-28 11:42:55.798328 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %i = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %j = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br label %for.cond, !dbg !26, !phasar.instruction.id !27
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 9

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 9
Adding line: 9
Adding line: 9

flow()
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 9
Adding line: 9
Adding line: 9

flow()
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br label %for.cond1, !dbg !40, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9

flow()
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10

flow()
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11

flow()
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11

flow()
  br label %for.inc, !dbg !54, !phasar.instruction.id !55
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11

flow()
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10

flow()
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 11
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10

flow()
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10

flow()
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9

flow()
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9

flow()
  br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 10
join()
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 9
Adding line: 9

flow()
  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
===========================
Got operands checking instruction (load)
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  br label %for.cond1, !dbg !40, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 5

flow()
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  br label %for.inc, !dbg !54, !phasar.instruction.id !55
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
===========================
sqSubSetEqual()
Old Facts: 10
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
===========================
sqSubSetEqual()
Old Facts: 11
New Facts: 12
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
===========================
sqSubSetEqual()
Old Facts: 8
New Facts: 13
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10

flow()
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 14
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9

flow()
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
===========================
sqSubSetEqual()
Old Facts: 10
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73
===========================
sqSubSetEqual()
Old Facts: 10
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
===========================
sqSubSetEqual()
Old Facts: 1
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
===========================
sqSubSetEqual()
Old Facts: 13
New Facts: 13

flow()
  br label %for.inc, !dbg !54, !phasar.instruction.id !55
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 12

flow()
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
===========================
sqSubSetEqual()
Old Facts: 14
New Facts: 14

flow()
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
===========================
sqSubSetEqual()
Old Facts: 15
New Facts: 15

flow()
  br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73
===========================
sqSubSetEqual()
Old Facts: 15
New Facts: 15

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
===========================
sqSubSetEqual()
Old Facts: 15
New Facts: 15

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
===========================
sqSubSetEqual()
Old Facts: 2
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 15
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br label %for.cond1, !dbg !40, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
===========================
sqSubSetEqual()
Old Facts: 13
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br label %for.inc, !dbg !54, !phasar.instruction.id !55
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
===========================
sqSubSetEqual()
Old Facts: 14
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
===========================
sqSubSetEqual()
Old Facts: 15
New Facts: 15

flow()
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
===========================
sqSubSetEqual()
Old Facts: 12
New Facts: 15
join()
Adding line: 11
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 9
Adding line: 10
Adding line: 11
Adding line: 9
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 9
Adding line: 9

flow()
  br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63
===========================
sqSubSetEqual()
Old Facts: 15
New Facts: 15

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
===========================
Got call instruction

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  %i = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
===========================

flow()
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
===========================

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
===========================

flow()
  store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25
===========================
Got store instruction

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
===========================
Got store instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction

flow()
  br label %for.cond, !dbg !26, !phasar.instruction.id !27
===========================
Got branch instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
===========================

flow()
  %j = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
===========================

flow()
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
===========================

flow()
  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
===========================

flow()
  br label %for.cond1, !dbg !40, !phasar.instruction.id !41
===========================

flow()
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
===========================

flow()
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
===========================

flow()
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
===========================

flow()
  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
===========================

flow()
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
===========================

flow()
  br label %for.inc, !dbg !54, !phasar.instruction.id !55
===========================

flow()
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
===========================

flow()
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
===========================

flow()
  br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63
===========================

flow()
  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
===========================

flow()
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
===========================

flow()
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
===========================

flow()
  br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73
===========================

flow()
  ret i32 %4, !dbg !76, !phasar.instruction.id !77worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 24
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 18
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7
Facts:
	EMPTY


Instruction:
br label %for.cond, !dbg !26, !phasar.instruction.id !27, ID: 9
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75, ID: 31
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.cond1, !dbg !40, !phasar.instruction.id !41, ID: 15
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48, ID: 18
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.inc, !dbg !54, !phasar.instruction.id !55, ID: 21
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63, ID: 25
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.inc3, !dbg !64, !phasar.instruction.id !65, ID: 26
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73, ID: 30
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
sto60 2018-Dec-28 11:42:55.930418 - [INFO] Write results to file
61 2018-Dec-28 11:42:55.930655 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
re i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
ret i32 %4, !dbg !76, !phasar.instruction.id !77, ID: 32
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
%4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75, ID: 31
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


