0 2019-Jan-05 10:42:49.576139 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 10:42:49.576556 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 10:42:49.576911 - [INFO] No configuration file is used.
3 2019-Jan-05 10:42:49.576987 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 10:42:49.577078 - [INFO] Check program options for logical errors.
5 2019-Jan-05 10:42:49.577167 - [INFO] Set-up IR database.
6 2019-Jan-05 10:42:49.582711 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 10:42:49.582820 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 10:42:49.582882 - [INFO] 	main.ll
9 2019-Jan-05 10:42:49.582941 - [INFO] Check for chosen entry points.
10 2019-Jan-05 10:42:49.583002 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 10:42:49.583060 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 10:42:49.583121 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 10:42:49.583468 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 10:42:49.583601 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 10:42:49.583963 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 10:42:49.584027 - [INFO] Allocated Types    : 2
17 2019-Jan-05 10:42:49.584091 - [INFO] Allocation Sites   : 3
18 2019-Jan-05 10:42:49.584149 - [INFO] Basic Blocks       : 1
19 2019-Jan-05 10:42:49.584206 - [INFO] Calls Sites        : 3
20 2019-Jan-05 10:42:49.584263 - [INFO] Functions          : 3
21 2019-Jan-05 10:42:49.584321 - [INFO] Globals            : 1
22 2019-Jan-05 10:42:49.584378 - [INFO] Global Pointer     : 1
23 2019-Jan-05 10:42:49.584435 - [INFO] Instructions       : 25
24 2019-Jan-05 10:42:49.584493 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 10:42:49.584551 - [INFO] Store Instructions : 5
26 2019-Jan-05 10:42:49.584608 - [INFO]  
27 2019-Jan-05 10:42:49.584682 - [INFO]   i32
28 2019-Jan-05 10:42:49.584746 - [INFO]   [2 x [2 x i32]]
29 2019-Jan-05 10:42:49.585227 - [DEBUG] Analyzing function: main
30 2019-Jan-05 10:42:49.587510 - [INFO] Reconstruct the class hierarchy.
31 2019-Jan-05 10:42:49.587584 - [INFO] Construct type hierarchy
32 2019-Jan-05 10:42:49.587645 - [DEBUG] Analyse types in module: main.ll
33 2019-Jan-05 10:42:49.587819 - [DEBUG] Reconstruct virtual function table for module: main.ll
34 2019-Jan-05 10:42:49.587887 - [INFO] Reconstruction of class hierarchy completed.
35 2019-Jan-05 10:42:49.587950 - [INFO] Starting CallGraphAnalysisType: OTF
36 2019-Jan-05 10:42:49.588167 - [DEBUG] Walking in function: main
37 2019-Jan-05 10:42:49.588255 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata [2 x [2 x i32]]* %numbers, metadata !16, metadata !20), !dbg !21, !phasar.instruction.id !22, ID: 5
38 2019-Jan-05 10:42:49.588618 - [DEBUG] Found 1 possible target(s)
39 2019-Jan-05 10:42:49.588698 - [DEBUG] Target name: llvm.dbg.declare
40 2019-Jan-05 10:42:49.588780 - [DEBUG] Walking in function: llvm.dbg.declare
41 2019-Jan-05 10:42:49.588843 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
42 2019-Jan-05 10:42:49.588907 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
43 2019-Jan-05 10:42:49.589222 - [DEBUG] Found 1 possible target(s)
44 2019-Jan-05 10:42:49.589281 - [DEBUG] Target name: getenv
45 2019-Jan-05 10:42:49.589360 - [DEBUG] Walking in function: getenv
46 2019-Jan-05 10:42:49.589423 - [DEBUG] Function already visited or only declaration: getenv
47 2019-Jan-05 10:42:49.589487 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19
48 2019-Jan-05 10:42:49.589762 - [DEBUG] Found 1 possible target(s)
49 2019-Jan-05 10:42:49.589821 - [DEBUG] Target name: llvm.dbg.declare
50 2019-Jan-05 10:42:49.589896 - [DEBUG] Walking in function: llvm.dbg.declare
51 2019-Jan-05 10:42:49.589958 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
52 2019-Jan-05 10:42:49.590037 - [INFO] Call graph has been constructed
53 2019-Jan-05 10:42:49.590100 - [INFO] Performing analysis: plugin
54 2019-Jan-05 10:42:49.590166 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
55 2019-Jan-05 10:42:49.590656 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %numbers = alloca [2 x [2 x i32]], align 16, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata [2 x [2 x i32]]* %numbers, metadata !16, metadata !20), !dbg !21, !phasar.instruction.id !22
Got call instruction
Dumping facts
=============
=============


  %arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !23, !phasar.instruction.id !24
Dumping facts
=============
=============


  %arrayidx1 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 0, !dbg !23, !phasar.instruction.id !25
Dumping facts
=============
=============


  store i32 42, i32* %arrayidx1, align 16, !dbg !26, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Added line number: 10

  %arrayidx2 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !30, !phasar.instruction.id !31
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Added line number: 10

  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx2, i64 0, i64 1, !dbg !30, !phasar.instruction.id !32
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Added line number: 10

  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Added line number: 10
Added line number: 10

  %arrayidx4 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Added line number: 10
Added line number: 10

  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx4, i64 0, i64 1, !dbg !35, !phasar.instruction.id !37
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============

Added line number: 10
Added line number: 10

  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 10
Added line number: 10
Added line number: 11

  %arrayidx6 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 1, !dbg !39, !phasar.instruction.id !40
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 10
Added line number: 10
Added line number: 11

  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx6, i64 0, i64 0, !dbg !39, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 10
Added line number: 10
Added line number: 11

  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46
Got call instruction
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11

  %arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11

  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 0, !dbg !47, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11

  %1 = load i32, i32* %arrayidx9, align 16, !dbg !47, !phasar.instruction.id !50
Got load instruction
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11

  store i32 %1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !51
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11

  %2 = load i32, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
Got load instruction
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11

  %arrayidx2 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !30, !phasar.instruction.id !31
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx2, i64 0, i64 1, !dbg !30, !phasar.instruction.id !32
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %arrayidx4 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx4, i64 0, i64 1, !dbg !35, !phasar.instruction.id !37
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
=============


  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  %arrayidx6 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 1, !dbg !39, !phasar.instruction.id !40
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx6, i64 0, i64 0, !dbg !39, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46
Got call instruction
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  %arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 0, !dbg !47, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  %1 = load i32, i32* %arrayidx9, align 16, !dbg !47, !phasar.instruction.id !50
Got load instruction
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  store i32 %1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !51
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  %2 = load i32, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
Got load instruction
Dumping facts
=============
  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
=============


  call void @llvm.dbg.declare(metadata [2 x [2 x i32]]* %numbers, metadata !16, metadata !20), !dbg !21, !phasar.instruction.id !22
Got call instruction

  %numbers = alloca [2 x [2 x i32]], align 16, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %rc = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %arrayidx1 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 0, !dbg !23, !phasar.instruction.id !25

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact

  store i32 42, i32* %arrayidx1, align 16, !dbg !26, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts

  %arrayidx2 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !30, !phasar.instruction.id !31

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts

  %arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !23, !phasar.instruction.id !24

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46
Got call instruction

  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx2, i64 0, i64 1, !dbg !30, !phasar.instruction.id !32

  %arrayidx4 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !35, !phasar.instruction.id !36

  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx4, i64 0, i64 1, !dbg !35, !phasar.instruction.id !37

  %0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38
Got load instruction
Adding load instruction fact

  %arrayidx6 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 1, !dbg !39, !phasar.instruction.id !40

  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx6, i64 0, i64 0, !dbg !39, !phasar.instruction.id !41

  %arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !47, !phasar.instruction.id !48

  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 0, !dbg !47, !phasar.instruction.id !49

  %1 = load i32, i32* %arrayidx9, align 16, !dbg !47, !phasar.instruction.id !50
Got load instruction

  store i32 %1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !51
Got store instruction
Removed 0 memory locations from facts

  %2 = load i32, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
Got load instruction

  ret i32 %2, !dbg !54, !phasar.instruction.id !55worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata [2 x [2 x i32]]* %numbers, metadata !16, metadata !20), !dbg !21, !phasar.instruction.id !22, ID: 5
Facts:
	EMPTY


Instruction:
%numbers = alloca [2 x [2 x i32]], align 16, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43, ID: 18
Facts:
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9


Instruction:
%arrayidx1 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 0, !dbg !23, !phasar.instruction.id !25, ID: 7
Facts:
	EMPTY


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
Facts:
	EMPTY


Instruction:
store i32 42, i32* %arrayidx1, align 16, !dbg !26, !phasar.instruction.id !27, ID: 8
Facts:
	EMPTY


Instruction:
%arrayidx2 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !30, !phasar.instruction.id !31, ID: 10
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%arrayidx = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !23, !phasar.instruction.id !24, ID: 6
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19
Facts:
store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43, ID: 18
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
%arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx2, i64 0, i64 1, !dbg !30, !phasar.instruction.id !32, ID: 11
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9


Instruction:
%arrayidx4 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !35, !phasar.instruction.id !36, ID: 13
Facts:
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9


Instruction:
%arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx4, i64 0, i64 1, !dbg !35, !phasar.instruction.id !37, ID: 14
Facts:
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9


Instruction:
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15
Facts:
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9


Instruction:
%arrayidx6 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 1, !dbg !39, !phasar.instruction.id !40, ID: 16
Facts:
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
%arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx6, i64 0, i64 0, !dbg !39, !phasar.instruction.id !41, ID: 17
Facts:
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
%arrayidx8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %numbers, i64 0, i64 0, !dbg !47, !phasar.instruction.id !48, ID: 20
Facts:
store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43, ID: 18
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
%arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx8, i64 0, i64 0, !dbg !47, !phasar.instruction.id !49, ID: 21
Facts:
store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43, ID: 18
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
%1 = load i32, i32* %arrayidx9, align 16, !dbg !47, !phasar.instruction.id !50, ID: 22
Facts:
store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43, ID: 18
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
store i32 %1, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !51, ID: 23
Facts:
store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43, ID: 18
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 24
Facts:
store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43, ID: 18
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i856 2019-Jan-05 10:42:49.640206 - [INFO] Write results to file
57 2019-Jan-05 10:42:49.640380 - [INFO] Shutdown llvm and the analysis framework.

* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


Instruction:
ret i32 %2, !dbg !54, !phasar.instruction.id !55, ID: 25
Facts:
store i32 %0, i32* %arrayidx7, align 8, !dbg !42, !phasar.instruction.id !43, ID: 18
store i32 %call, i32* %arrayidx3, align 4, !dbg !33, !phasar.instruction.id !34, ID: 12
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 9
%0 = load i32, i32* %arrayidx5, align 4, !dbg !35, !phasar.instruction.id !38, ID: 15


