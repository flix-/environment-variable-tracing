0 2018-Dec-28 11:42:49.326436 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 11:42:49.327182 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 11:42:49.327555 - [INFO] No configuration file is used.
3 2018-Dec-28 11:42:49.327633 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 11:42:49.327733 - [INFO] Check program options for logical errors.
5 2018-Dec-28 11:42:49.327822 - [INFO] Set-up IR database.
6 2018-Dec-28 11:42:49.332975 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 11:42:49.333095 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 11:42:49.333156 - [INFO] 	main.ll
9 2018-Dec-28 11:42:49.333215 - [INFO] Check for chosen entry points.
10 2018-Dec-28 11:42:49.333276 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 11:42:49.333334 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 11:42:49.333394 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 11:42:49.333770 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 11:42:49.333920 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 11:42:49.334288 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 11:42:49.334351 - [INFO] Allocated Types    : 1
17 2018-Dec-28 11:42:49.334415 - [INFO] Allocation Sites   : 3
18 2018-Dec-28 11:42:49.334473 - [INFO] Basic Blocks       : 4
19 2018-Dec-28 11:42:49.334530 - [INFO] Calls Sites        : 5
20 2018-Dec-28 11:42:49.334587 - [INFO] Functions          : 5
21 2018-Dec-28 11:42:49.334644 - [INFO] Globals            : 1
22 2018-Dec-28 11:42:49.334701 - [INFO] Global Pointer     : 1
23 2018-Dec-28 11:42:49.334758 - [INFO] Instructions       : 21
24 2018-Dec-28 11:42:49.334815 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 11:42:49.334872 - [INFO] Store Instructions : 3
26 2018-Dec-28 11:42:49.334929 - [INFO]  
27 2018-Dec-28 11:42:49.335008 - [INFO]   i32
28 2018-Dec-28 11:42:49.335509 - [DEBUG] Analyzing function: main
29 2018-Dec-28 11:42:49.335771 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 11:42:49.335834 - [INFO] Construct type hierarchy
31 2018-Dec-28 11:42:49.335894 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 11:42:49.336048 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 11:42:49.336122 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 11:42:49.336185 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 11:42:49.336301 - [DEBUG] Walking in function: main
36 2018-Dec-28 11:42:49.336393 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-28 11:42:49.336754 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 11:42:49.336815 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 11:42:49.336937 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 11:42:49.337003 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 11:42:49.337067 - [DEBUG] Found static call-site: %call = call i32 (...) @bar(), !dbg !20, !phasar.instruction.id !21, ID: 6
42 2018-Dec-28 11:42:49.337312 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 11:42:49.337370 - [DEBUG] Target name: bar
44 2018-Dec-28 11:42:49.337450 - [DEBUG] Walking in function: bar
45 2018-Dec-28 11:42:49.337512 - [DEBUG] Function already visited or only declaration: bar
46 2018-Dec-28 11:42:49.337575 - [DEBUG] Found static call-site: %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2018-Dec-28 11:42:49.337869 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 11:42:49.337928 - [DEBUG] Target name: getenv
49 2018-Dec-28 11:42:49.338004 - [DEBUG] Walking in function: getenv
50 2018-Dec-28 11:42:49.338066 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-28 11:42:49.338129 - [DEBUG] Found static call-site: %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
52 2018-Dec-28 11:42:49.338382 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 11:42:49.338441 - [DEBUG] Target name: foo
54 2018-Dec-28 11:42:49.338521 - [DEBUG] Walking in function: foo
55 2018-Dec-28 11:42:49.338583 - [DEBUG] Function already visited or only declaration: foo
56 2018-Dec-28 11:42:49.338646 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39, ID: 18
57 2018-Dec-28 11:42:49.338890 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-28 11:42:49.338948 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-28 11:42:49.339022 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-28 11:42:49.339084 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-28 11:42:49.339146 - [INFO] Call graph has been constructed
62 2018-Dec-28 11:42:49.339212 - [INFO] Performing analysis: plugin
63 2018-Dec-28 11:42:49.339278 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2018-Dec-28 11:42:49.339802 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 (...) @bar(), !dbg !20, !phasar.instruction.id !21
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
===========================
Got operands checking instruction (icmp)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
===========================
Got branch instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 8

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 8
Adding line: 8

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  br label %lor.end, !dbg !28, !phasar.instruction.id !33
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 5
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
===========================
Got phi node instruction
Adding phi node instruction fact (constant)
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
===========================
Got operands checking instruction (zext)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 7
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 9

flow()
  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 9
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 9

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
===========================
Got operands checking instruction (icmp)
Adding fact
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 5
New Facts: 3

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
===========================
Got branch instruction
Adding conditional branch instruction fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
===========================
Got phi node instruction
Adding phi node instruction fact (constant)
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  br label %lor.end, !dbg !28, !phasar.instruction.id !33
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
===========================
Got phi node instruction
Adding phi node instruction fact (constant)
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
===========================
Got operands checking instruction (zext)
Adding fact
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 7
New Facts: 7

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
===========================
Got call instruction

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  %call = call i32 (...) @bar(), !dbg !20, !phasar.instruction.id !21
===========================
Got call instruction

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
===========================
Got store instruction
Adding store instruction

flow()
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
===========================
Got store instruction
Adding store instruction

flow()
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
===========================
Got operands checking instruction (icmp)

flow()
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
===========================
Got call instruction
Adding call instruction fact

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
===========================
Got store instruction

flow()
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
===========================
Got branch instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
===========================
Got call instruction

flow()
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
===========================
Got operands checking instruction (zext)
Adding fact

flow()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
===========================
Got operands checking instruction (icmp)
Adding fact

flow()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
===========================
Got branch instruction
Adding conditional branch instruction fact

flow()
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
===========================

flow()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
===========================

flow()
  br label %lor.end, !dbg !28, !phasar.instruction.id !33
===========================

flow()
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
===========================
Got phi node instruction
Adding phi node instruction fact (constant)

flow()
  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
===========================
Got operands checking instruction (load)
Adding fact

flow()
  ret i32 0, !dbg !43, !phasar.instruction.id !44worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @bar(), !dbg !20, !phasar.instruction.id !21, ID: 6
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42, ID: 20
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19


Instruction:
store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
Facts:
	EMPTY


Instruction:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39, ID: 18
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10


Instruction:
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
br label %lor.end, !dbg !28, !phasar.instruction.id !33, ID: 14
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13


Instruction:
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
ret i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21
Facts:
store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42, ID: 20
store i32 %lor.ext, i32*65 2018-Dec-28 11:42:49.367399 - [INFO] Write results to file
66 2018-Dec-28 11:42:49.367593 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
 %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19


