0 2019-Jan-04 17:20:00.648693 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-04 17:20:00.649109 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-04 17:20:00.649456 - [INFO] No configuration file is used.
3 2019-Jan-04 17:20:00.649534 - [INFO] Program options have been successfully parsed.
4 2019-Jan-04 17:20:00.649633 - [INFO] Check program options for logical errors.
5 2019-Jan-04 17:20:00.649723 - [INFO] Set-up IR database.
6 2019-Jan-04 17:20:00.654738 - [INFO] Constructed the analysis controller.
7 2019-Jan-04 17:20:00.654860 - [INFO] Found the following IR files for this project: 
8 2019-Jan-04 17:20:00.654950 - [INFO] 	main.ll
9 2019-Jan-04 17:20:00.655009 - [INFO] Check for chosen entry points.
10 2019-Jan-04 17:20:00.655070 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-04 17:20:00.655129 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-04 17:20:00.655189 - [INFO] Preprocess module: main.ll
13 2019-Jan-04 17:20:00.655554 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-04 17:20:00.655699 - [INFO] Running ValueAnnotationPass
15 2019-Jan-04 17:20:00.656065 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-04 17:20:00.656130 - [INFO] Allocated Types    : 1
17 2019-Jan-04 17:20:00.656193 - [INFO] Allocation Sites   : 3
18 2019-Jan-04 17:20:00.656251 - [INFO] Basic Blocks       : 4
19 2019-Jan-04 17:20:00.656308 - [INFO] Calls Sites        : 5
20 2019-Jan-04 17:20:00.656366 - [INFO] Functions          : 5
21 2019-Jan-04 17:20:00.656423 - [INFO] Globals            : 1
22 2019-Jan-04 17:20:00.656480 - [INFO] Global Pointer     : 1
23 2019-Jan-04 17:20:00.656537 - [INFO] Instructions       : 21
24 2019-Jan-04 17:20:00.656595 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-04 17:20:00.656652 - [INFO] Store Instructions : 3
26 2019-Jan-04 17:20:00.656710 - [INFO]  
27 2019-Jan-04 17:20:00.656785 - [INFO]   i32
28 2019-Jan-04 17:20:00.657296 - [DEBUG] Analyzing function: main
29 2019-Jan-04 17:20:00.657567 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-04 17:20:00.657632 - [INFO] Construct type hierarchy
31 2019-Jan-04 17:20:00.657692 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-04 17:20:00.657853 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-04 17:20:00.657923 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-04 17:20:00.657985 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-04 17:20:00.658100 - [DEBUG] Walking in function: main
36 2019-Jan-04 17:20:00.658188 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2019-Jan-04 17:20:00.658570 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-04 17:20:00.658631 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-04 17:20:00.658720 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-04 17:20:00.658783 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-04 17:20:00.658847 - [DEBUG] Found static call-site: %call = call i32 (...) @bar(), !dbg !20, !phasar.instruction.id !21, ID: 6
42 2019-Jan-04 17:20:00.659096 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-04 17:20:00.659155 - [DEBUG] Target name: bar
44 2019-Jan-04 17:20:00.659235 - [DEBUG] Walking in function: bar
45 2019-Jan-04 17:20:00.659298 - [DEBUG] Function already visited or only declaration: bar
46 2019-Jan-04 17:20:00.659361 - [DEBUG] Found static call-site: %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2019-Jan-04 17:20:00.659650 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-04 17:20:00.659709 - [DEBUG] Target name: getenv
49 2019-Jan-04 17:20:00.659786 - [DEBUG] Walking in function: getenv
50 2019-Jan-04 17:20:00.659848 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-04 17:20:00.659911 - [DEBUG] Found static call-site: %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
52 2019-Jan-04 17:20:00.660169 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-04 17:20:00.660228 - [DEBUG] Target name: foo
54 2019-Jan-04 17:20:00.660308 - [DEBUG] Walking in function: foo
55 2019-Jan-04 17:20:00.660369 - [DEBUG] Function already visited or only declaration: foo
56 2019-Jan-04 17:20:00.660433 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39, ID: 18
57 2019-Jan-04 17:20:00.660678 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-04 17:20:00.660737 - [DEBUG] Target name: llvm.dbg.declare
59 2019-Jan-04 17:20:00.660811 - [DEBUG] Walking in function: llvm.dbg.declare
60 2019-Jan-04 17:20:00.660873 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2019-Jan-04 17:20:00.660934 - [INFO] Call graph has been constructed
62 2019-Jan-04 17:20:00.660996 - [INFO] Performing analysis: plugin
63 2019-Jan-04 17:20:00.661063 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2019-Jan-04 17:20:00.661607 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  %call = call i32 (...) @bar(), !dbg !20, !phasar.instruction.id !21
Got call instruction
Dumping facts
=============
=============


  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
Got operands checking instruction (icmp)
Dumping facts
=============
=============


  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
=============


  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
=============


  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Adding line number: 8

  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
=============

Adding line number: 8
Adding line number: 8

  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8

  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8

  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  br label %lor.end, !dbg !28, !phasar.instruction.id !33
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
Got call instruction
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8

  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
=============

Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 9

  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
=============

Adding line number: 9
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 8
Adding line number: 9

  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
=============


  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
=============


  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
=============


  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============


  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
=============


  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
=============


  br label %lor.end, !dbg !28, !phasar.instruction.id !33
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
=============


  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
Got phi node instruction
Adding phi node instruction fact (constant)
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============


  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============


  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
Got call instruction
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
=============


  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
=============


  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
=============


  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %call = call i32 (...) @bar(), !dbg !20, !phasar.instruction.id !21
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
Got operands checking instruction (icmp)

  %call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts

  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
Got call instruction

  %lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
Got operands checking instruction (zext)
Adding fact

  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
Got operands checking instruction (icmp)
Adding fact

  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Adding conditional branch instruction fact

  %call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31

  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32

  br label %lor.end, !dbg !28, !phasar.instruction.id !33

  %0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34
Got phi node instruction
Adding phi node instruction fact (constant)

  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact

  ret i32 0, !dbg !43, !phasar.instruction.id !44worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @bar(), !dbg !20, !phasar.instruction.id !21, ID: 6
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42, ID: 20
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19


Instruction:
store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
Facts:
	EMPTY


Instruction:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39, ID: 18
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10


Instruction:
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
br label %lor.end, !dbg !28, !phasar.instruction.id !33, ID: 14
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13


Instruction:
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19
Facts:
store i32 %lor.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
ret i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21
Facts:
store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42, ID: 20
store i32 %lor.ext, i32*65 2019-Jan-04 17:20:00.712871 - [INFO] Write results to file
66 2019-Jan-04 17:20:00.713074 - [INFO] Shutdown llvm and the analysis framework.

 %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%lor.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @foo(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !34, ID: 15
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19


