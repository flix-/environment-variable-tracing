0 2018-Dec-28 10:33:58.056994 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 10:33:58.057471 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 10:33:58.057819 - [INFO] No configuration file is used.
3 2018-Dec-28 10:33:58.057899 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 10:33:58.058002 - [INFO] Check program options for logical errors.
5 2018-Dec-28 10:33:58.058094 - [INFO] Set-up IR database.
6 2018-Dec-28 10:33:58.063283 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 10:33:58.063402 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 10:33:58.063464 - [INFO] 	main.ll
9 2018-Dec-28 10:33:58.063522 - [INFO] Check for chosen entry points.
10 2018-Dec-28 10:33:58.063583 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 10:33:58.063641 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 10:33:58.063701 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 10:33:58.064108 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 10:33:58.064238 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 10:33:58.064543 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 10:33:58.064607 - [INFO] Allocated Types    : 2
17 2018-Dec-28 10:33:58.064672 - [INFO] Allocation Sites   : 2
18 2018-Dec-28 10:33:58.064730 - [INFO] Basic Blocks       : 1
19 2018-Dec-28 10:33:58.064788 - [INFO] Calls Sites        : 2
20 2018-Dec-28 10:33:58.064846 - [INFO] Functions          : 3
21 2018-Dec-28 10:33:58.064903 - [INFO] Globals            : 1
22 2018-Dec-28 10:33:58.064961 - [INFO] Global Pointer     : 1
23 2018-Dec-28 10:33:58.065027 - [INFO] Instructions       : 14
24 2018-Dec-28 10:33:58.065084 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 10:33:58.065142 - [INFO] Store Instructions : 3
26 2018-Dec-28 10:33:58.065199 - [INFO]  
27 2018-Dec-28 10:33:58.065275 - [INFO]   i32
28 2018-Dec-28 10:33:58.065342 - [INFO]   %struct.a = type { i8*, %struct.b }
29 2018-Dec-28 10:33:58.065748 - [DEBUG] Analyzing function: main
30 2018-Dec-28 10:33:58.067506 - [INFO] Reconstruct the class hierarchy.
31 2018-Dec-28 10:33:58.067585 - [INFO] Construct type hierarchy
32 2018-Dec-28 10:33:58.067647 - [DEBUG] Analyse types in module: main.ll
33 2018-Dec-28 10:33:58.067879 - [DEBUG] Reconstruct virtual function table for module: main.ll
34 2018-Dec-28 10:33:58.068060 - [INFO] Reconstruction of class hierarchy completed.
35 2018-Dec-28 10:33:58.068127 - [INFO] Starting CallGraphAnalysisType: OTF
36 2018-Dec-28 10:33:58.068294 - [DEBUG] Walking in function: main
37 2018-Dec-28 10:33:58.068378 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata %struct.a* %foo, metadata !15, metadata !28), !dbg !29, !phasar.instruction.id !30, ID: 4
38 2018-Dec-28 10:33:58.068749 - [DEBUG] Found 1 possible target(s)
39 2018-Dec-28 10:33:58.068810 - [DEBUG] Target name: llvm.dbg.declare
40 2018-Dec-28 10:33:58.068895 - [DEBUG] Walking in function: llvm.dbg.declare
41 2018-Dec-28 10:33:58.068959 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
42 2018-Dec-28 10:33:58.069024 - [DEBUG] Found static call-site: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5
43 2018-Dec-28 10:33:58.069345 - [DEBUG] Found 1 possible target(s)
44 2018-Dec-28 10:33:58.069404 - [DEBUG] Target name: getenv
45 2018-Dec-28 10:33:58.069485 - [DEBUG] Walking in function: getenv
46 2018-Dec-28 10:33:58.069548 - [DEBUG] Function already visited or only declaration: getenv
47 2018-Dec-28 10:33:58.069611 - [INFO] Call graph has been constructed
48 2018-Dec-28 10:33:58.069674 - [INFO] Performing analysis: plugin
49 2018-Dec-28 10:33:58.069741 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
50 2018-Dec-28 10:33:58.070244 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %foo = alloca %struct.a, align 8, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata %struct.a* %foo, metadata !15, metadata !28), !dbg !29, !phasar.instruction.id !30
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 22

flow()
  %a = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !33, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 22

flow()
  store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 22
Adding line: 22

flow()
  %a1 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 22
Adding line: 22

flow()
  %0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %b = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !40, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %a2 = getelementptr inbounds %struct.b, %struct.b* %b, i32 0, i32 0, !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %a3 = getelementptr inbounds %struct.c, %struct.c* %a2, i32 0, i32 0, !dbg !44, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  store i8* %0, i8** %a3, align 8, !dbg !46, !phasar.instruction.id !47
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 23
Adding line: 22
Adding line: 22
Adding line: 23

flow()
  %a = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !33, !phasar.instruction.id !34
===========================
sqSubSetEqual()
Old Facts: 1
New Facts: 1

flow()
  store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %a1 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  %b = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !40, !phasar.instruction.id !41
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  %a2 = getelementptr inbounds %struct.b, %struct.b* %b, i32 0, i32 0, !dbg !42, !phasar.instruction.id !43
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  %a3 = getelementptr inbounds %struct.c, %struct.c* %a2, i32 0, i32 0, !dbg !44, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  store i8* %0, i8** %a3, align 8, !dbg !46, !phasar.instruction.id !47
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  call void @llvm.dbg.declare(metadata %struct.a* %foo, metadata !15, metadata !28), !dbg !29, !phasar.instruction.id !30
===========================
Got call instruction

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  store i8* %0, i8** %a3, align 8, !dbg !46, !phasar.instruction.id !47
===========================
Got store instruction
Adding store instruction

flow()
  %a1 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !37, !phasar.instruction.id !38
===========================

flow()
  store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36
===========================
Got store instruction
Adding store instruction

flow()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32
===========================
Got call instruction
Adding call instruction fact

flow()
  %b = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !40, !phasar.instruction.id !41
===========================

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
===========================
Got store instruction

flow()
  %a = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !33, !phasar.instruction.id !34
===========================

flow()
  %foo = alloca %struct.a, align 8, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  %0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39
===========================
Got operands checking instruction (load)
Adding fact

flow()
  %a2 = getelementptr inbounds %struct.b, %struct.b* %b, i32 0, i32 0, !dbg !42, !phasar.instruction.id !43
===========================

flow()
  %a3 = getelementptr inbounds %struct.c, %struct.c* %a2, i32 0, i32 0, !dbg !44, !phasar.instruction.id !45
===========================

flow()
  ret i32 0, !dbg !48, !phasar.instruction.id !49worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 9
worklist size: 9
worklist size: 9
worklist size: 9
worklist size: 9
worklist size: 9
worklist size: 9
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata %struct.a* %foo, metadata !15, metadata !28), !dbg !29, !phasar.instruction.id !30, ID: 4
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i8* %0, i8** %a3, align 8, !dbg !46, !phasar.instruction.id !47, ID: 13
Facts:
store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36, ID: 7
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5
%0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39, ID: 9


Instruction:
%a1 = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !37, !phasar.instruction.id !38, ID: 8
Facts:
store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36, ID: 7
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5


Instruction:
store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36, ID: 7
Facts:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5


Instruction:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5
Facts:
	EMPTY


Instruction:
%b = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 1, !dbg !40, !phasar.instruction.id !41, ID: 10
Facts:
store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36, ID: 7
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5
%0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39, ID: 9


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%a = getelementptr inbounds %struct.a, %struct.a* %foo, i32 0, i32 0, !dbg !33, !phasar.instruction.id !34, ID: 6
Facts:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5


Instruction:
%foo = alloca %struct.a, align 8, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39, ID: 9
Facts:
store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36, ID: 7
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5


Instruction:
%a2 = getelementptr inbounds %struct.b, %struct.b* %b, i32 0, i32 0, !dbg !42, !phasar.instruction.id !43, ID: 11
Facts:
store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36, ID: 7
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5
%0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39, ID: 9


Instruction:
%a3 = getelementptr inbounds %struct.c, %struct.c* %a2, i32 0, i32 0, !dbg !44, !phasar.instruction.id !45, ID: 12
Facts:
store i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36, ID: 7
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5
%0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39, ID: 9


Instruction:
ret i32 0, !dbg !48, !phasar.instruction.id !49, ID: 14
Facts:
store i8* %0, i8** %a3, align 8, !dbg !46, !phasar.instruction.id !47, ID: 13
stor51 2018-Dec-28 10:33:58.085429 - [INFO] Write results to file
52 2018-Dec-28 10:33:58.085614 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
e i8* %call, i8** %a, align 8, !dbg !35, !phasar.instruction.id !36, ID: 7
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 5
%0 = load i8*, i8** %a1, align 8, !dbg !37, !phasar.instruction.id !39, ID: 9


