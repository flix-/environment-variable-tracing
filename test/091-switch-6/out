0 2019-Jan-05 10:42:55.901730 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 10:42:55.902192 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 10:42:55.902543 - [INFO] No configuration file is used.
3 2019-Jan-05 10:42:55.902619 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 10:42:55.902716 - [INFO] Check program options for logical errors.
5 2019-Jan-05 10:42:55.902805 - [INFO] Set-up IR database.
6 2019-Jan-05 10:42:55.908316 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 10:42:55.908427 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 10:42:55.908488 - [INFO] 	main.ll
9 2019-Jan-05 10:42:55.908547 - [INFO] Check for chosen entry points.
10 2019-Jan-05 10:42:55.908609 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 10:42:55.908692 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 10:42:55.908753 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 10:42:55.909146 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 10:42:55.909313 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 10:42:55.909724 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 10:42:55.909790 - [INFO] Allocated Types    : 1
17 2019-Jan-05 10:42:55.909855 - [INFO] Allocation Sites   : 5
18 2019-Jan-05 10:42:55.909913 - [INFO] Basic Blocks       : 7
19 2019-Jan-05 10:42:55.909971 - [INFO] Calls Sites        : 5
20 2019-Jan-05 10:42:55.910028 - [INFO] Functions          : 3
21 2019-Jan-05 10:42:55.910085 - [INFO] Globals            : 1
22 2019-Jan-05 10:42:55.910142 - [INFO] Global Pointer     : 1
23 2019-Jan-05 10:42:55.910200 - [INFO] Instructions       : 26
24 2019-Jan-05 10:42:55.910257 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 10:42:55.910314 - [INFO] Store Instructions : 6
26 2019-Jan-05 10:42:55.910372 - [INFO]  
27 2019-Jan-05 10:42:55.910446 - [INFO]   i32
28 2019-Jan-05 10:42:55.911055 - [DEBUG] Analyzing function: main
29 2019-Jan-05 10:42:55.911376 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 10:42:55.911440 - [INFO] Construct type hierarchy
31 2019-Jan-05 10:42:55.911501 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 10:42:55.911675 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 10:42:55.911745 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 10:42:55.911808 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 10:42:55.911924 - [DEBUG] Walking in function: main
36 2019-Jan-05 10:42:55.912049 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
37 2019-Jan-05 10:42:55.912416 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 10:42:55.912476 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 10:42:55.912563 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 10:42:55.912626 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 10:42:55.912690 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
42 2019-Jan-05 10:42:55.912974 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 10:42:55.913033 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 10:42:55.913107 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 10:42:55.913169 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 10:42:55.913233 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2019-Jan-05 10:42:55.913559 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 10:42:55.913618 - [DEBUG] Target name: getenv
49 2019-Jan-05 10:42:55.913698 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 10:42:55.913760 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 10:42:55.913824 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
52 2019-Jan-05 10:42:55.914121 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 10:42:55.914181 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-05 10:42:55.914255 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-05 10:42:55.914318 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-05 10:42:55.914383 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56, ID: 23
57 2019-Jan-05 10:42:55.914664 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-05 10:42:55.914722 - [DEBUG] Target name: llvm.dbg.declare
59 2019-Jan-05 10:42:55.914797 - [DEBUG] Walking in function: llvm.dbg.declare
60 2019-Jan-05 10:42:55.914859 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2019-Jan-05 10:42:55.914921 - [INFO] Call graph has been constructed
62 2019-Jan-05 10:42:55.914982 - [INFO] Performing analysis: plugin
63 2019-Jan-05 10:42:55.915049 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2019-Jan-05 10:42:55.915569 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a5 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Added line number: 9

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Added line number: 9
Added line number: 9

  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
=============

Added line number: 9
Added line number: 9
Added line number: 10

  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 13
Added line number: 10

  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 13
Added line number: 10

  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 13
Added line number: 10

  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16
Added line number: 10

  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16
Added line number: 10

  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16
Added line number: 10

  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16
Added line number: 10

  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 19
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16
Added line number: 10

  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 19
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16
Added line number: 10

  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16
Added line number: 10
Added line number: 23

  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 19
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16
Added line number: 10
Added line number: 23

  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 19
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 13
Added line number: 16
Added line number: 10
Added line number: 23

  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 19
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 13
Added line number: 16
Added line number: 23

  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 19
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 13
Added line number: 16
Added line number: 23

  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 19
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 13
Added line number: 29
Added line number: 16
Added line number: 23

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============


  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
=============


  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45

  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removed 0 memory locations from facts

  %a5 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Got load instruction
Adding load instruction fact

  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38

  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40

  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact

  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53

  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47

  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51

  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42

  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49

  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction

  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
Got store instruction
Removed 0 memory locations from facts

  ret i32 %2, !dbg !60, !phasar.instruction.id !61worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 21
worklist size: 21
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
%a5 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 25
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38, ID: 15
Facts:
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53, ID: 22
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
br label %sw.epilog, !dbg !46, !phasar.instruction.id !47, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
br label %sw.epilog, !dbg !50, !phasar.instruction.id !51, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56, ID: 23
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instructio65 2019-Jan-05 10:42:56.015713 - [INFO] Write results to file
66 2019-Jan-05 10:42:56.015914 - [INFO] Shutdown llvm and the analysis framework.

n.id !49, ID: 20


Instruction:
ret i32 %2, !dbg !60, !phasar.instruction.id !61, ID: 26
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 25
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


