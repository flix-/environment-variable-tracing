0 2018-Dec-31 15:54:38.631055 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-31 15:54:38.631477 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-31 15:54:38.631822 - [INFO] No configuration file is used.
3 2018-Dec-31 15:54:38.631898 - [INFO] Program options have been successfully parsed.
4 2018-Dec-31 15:54:38.631998 - [INFO] Check program options for logical errors.
5 2018-Dec-31 15:54:38.632088 - [INFO] Set-up IR database.
6 2018-Dec-31 15:54:38.637863 - [INFO] Constructed the analysis controller.
7 2018-Dec-31 15:54:38.637975 - [INFO] Found the following IR files for this project: 
8 2018-Dec-31 15:54:38.638038 - [INFO] 	main.ll
9 2018-Dec-31 15:54:38.638097 - [INFO] Check for chosen entry points.
10 2018-Dec-31 15:54:38.638158 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-31 15:54:38.638217 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-31 15:54:38.638277 - [INFO] Preprocess module: main.ll
13 2018-Dec-31 15:54:38.638640 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-31 15:54:38.638784 - [INFO] Running ValueAnnotationPass
15 2018-Dec-31 15:54:38.639183 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-31 15:54:38.639247 - [INFO] Allocated Types    : 1
17 2018-Dec-31 15:54:38.639311 - [INFO] Allocation Sites   : 5
18 2018-Dec-31 15:54:38.639369 - [INFO] Basic Blocks       : 7
19 2018-Dec-31 15:54:38.639426 - [INFO] Calls Sites        : 5
20 2018-Dec-31 15:54:38.639535 - [INFO] Functions          : 3
21 2018-Dec-31 15:54:38.639593 - [INFO] Globals            : 1
22 2018-Dec-31 15:54:38.639651 - [INFO] Global Pointer     : 1
23 2018-Dec-31 15:54:38.639709 - [INFO] Instructions       : 26
24 2018-Dec-31 15:54:38.639766 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-31 15:54:38.639824 - [INFO] Store Instructions : 6
26 2018-Dec-31 15:54:38.639882 - [INFO]  
27 2018-Dec-31 15:54:38.639962 - [INFO]   i32
28 2018-Dec-31 15:54:38.640546 - [DEBUG] Analyzing function: main
29 2018-Dec-31 15:54:38.640883 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-31 15:54:38.640953 - [INFO] Construct type hierarchy
31 2018-Dec-31 15:54:38.641014 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-31 15:54:38.641188 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-31 15:54:38.641257 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-31 15:54:38.641320 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-31 15:54:38.641438 - [DEBUG] Walking in function: main
36 2018-Dec-31 15:54:38.641524 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
37 2018-Dec-31 15:54:38.641888 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-31 15:54:38.641948 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-31 15:54:38.642035 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-31 15:54:38.642099 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-31 15:54:38.642163 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
42 2018-Dec-31 15:54:38.642447 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-31 15:54:38.642506 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-31 15:54:38.642580 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-31 15:54:38.642643 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-31 15:54:38.642706 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2018-Dec-31 15:54:38.643074 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-31 15:54:38.643133 - [DEBUG] Target name: getenv
49 2018-Dec-31 15:54:38.643214 - [DEBUG] Walking in function: getenv
50 2018-Dec-31 15:54:38.643276 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-31 15:54:38.643340 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
52 2018-Dec-31 15:54:38.643638 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-31 15:54:38.643697 - [DEBUG] Target name: llvm.dbg.declare
54 2018-Dec-31 15:54:38.643772 - [DEBUG] Walking in function: llvm.dbg.declare
55 2018-Dec-31 15:54:38.643835 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2018-Dec-31 15:54:38.643900 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56, ID: 23
57 2018-Dec-31 15:54:38.644181 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-31 15:54:38.644240 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-31 15:54:38.644314 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-31 15:54:38.644377 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-31 15:54:38.644439 - [INFO] Call graph has been constructed
62 2018-Dec-31 15:54:38.644500 - [INFO] Performing analysis: plugin
63 2018-Dec-31 15:54:38.644567 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2018-Dec-31 15:54:38.645050 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a5 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removing memory location
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Adding line: 9

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Adding line: 9
Adding line: 9

  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
=============

Adding line: 9
Adding line: 9
Adding line: 10

  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 10

  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 10

  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 10

  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 19
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============

Adding line: 19
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10
Adding line: 23

  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Adding line: 19
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10
Adding line: 23

  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Adding line: 19
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 16
Adding line: 10
Adding line: 23

  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Adding line: 19
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 16
Adding line: 23

  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Adding line: 19
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 16
Adding line: 23

  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============

Adding line: 19
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 29
Adding line: 16
Adding line: 23

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removing memory location
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============


  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
=============


  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
=============


  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
Got store instruction
Removing memory location
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45

  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removing memory location
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removing memory location

  %a5 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
Got load instruction
Adding load instruction fact

  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38

  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40

  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact

  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53

  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47

  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51

  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42

  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49

  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
Got call instruction

  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
Got store instruction
Removing memory location

  ret i32 %2, !dbg !60, !phasar.instruction.id !61worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 21
worklist size: 21
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
%a5 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 25
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38, ID: 15
Facts:
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53, ID: 22
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
br label %sw.epilog, !dbg !46, !phasar.instruction.id !47, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
br label %sw.epilog, !dbg !50, !phasar.instruction.id !51, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56, ID: 23
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instructio65 2018-Dec-31 15:54:38.744738 - [INFO] Write results to file
66 2018-Dec-31 15:54:38.744920 - [INFO] Shutdown llvm and the analysis framework.

n.id !49, ID: 20


Instruction:
ret i32 %2, !dbg !60, !phasar.instruction.id !61, ID: 26
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 25
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


