0 2018-Dec-28 11:43:02.350746 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 11:43:02.351173 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 11:43:02.351534 - [INFO] No configuration file is used.
3 2018-Dec-28 11:43:02.351620 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 11:43:02.351774 - [INFO] Check program options for logical errors.
5 2018-Dec-28 11:43:02.351871 - [INFO] Set-up IR database.
6 2018-Dec-28 11:43:02.358326 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 11:43:02.358450 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 11:43:02.358511 - [INFO] 	main.ll
9 2018-Dec-28 11:43:02.358570 - [INFO] Check for chosen entry points.
10 2018-Dec-28 11:43:02.358631 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 11:43:02.358689 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 11:43:02.358750 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 11:43:02.359107 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 11:43:02.359242 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 11:43:02.359645 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 11:43:02.359709 - [INFO] Allocated Types    : 1
17 2018-Dec-28 11:43:02.359773 - [INFO] Allocation Sites   : 5
18 2018-Dec-28 11:43:02.359830 - [INFO] Basic Blocks       : 7
19 2018-Dec-28 11:43:02.359888 - [INFO] Calls Sites        : 5
20 2018-Dec-28 11:43:02.360074 - [INFO] Functions          : 3
21 2018-Dec-28 11:43:02.360134 - [INFO] Globals            : 1
22 2018-Dec-28 11:43:02.360208 - [INFO] Global Pointer     : 1
23 2018-Dec-28 11:43:02.360296 - [INFO] Instructions       : 26
24 2018-Dec-28 11:43:02.360374 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 11:43:02.360486 - [INFO] Store Instructions : 6
26 2018-Dec-28 11:43:02.360544 - [INFO]  
27 2018-Dec-28 11:43:02.360631 - [INFO]   i32
28 2018-Dec-28 11:43:02.361264 - [DEBUG] Analyzing function: main
29 2018-Dec-28 11:43:02.361602 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-28 11:43:02.361672 - [INFO] Construct type hierarchy
31 2018-Dec-28 11:43:02.361734 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-28 11:43:02.361910 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-28 11:43:02.361981 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-28 11:43:02.362043 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-28 11:43:02.362158 - [DEBUG] Walking in function: main
36 2018-Dec-28 11:43:02.362244 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
37 2018-Dec-28 11:43:02.362607 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-28 11:43:02.362667 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-28 11:43:02.362754 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-28 11:43:02.362817 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-28 11:43:02.362881 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
42 2018-Dec-28 11:43:02.363269 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-28 11:43:02.363328 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-28 11:43:02.363403 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-28 11:43:02.363465 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-28 11:43:02.363528 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2018-Dec-28 11:43:02.363890 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-28 11:43:02.363949 - [DEBUG] Target name: getenv
49 2018-Dec-28 11:43:02.364029 - [DEBUG] Walking in function: getenv
50 2018-Dec-28 11:43:02.364092 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-28 11:43:02.364156 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
52 2018-Dec-28 11:43:02.364453 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-28 11:43:02.364513 - [DEBUG] Target name: llvm.dbg.declare
54 2018-Dec-28 11:43:02.364587 - [DEBUG] Walking in function: llvm.dbg.declare
55 2018-Dec-28 11:43:02.364650 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2018-Dec-28 11:43:02.364715 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56, ID: 23
57 2018-Dec-28 11:43:02.364995 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-28 11:43:02.365054 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-28 11:43:02.365128 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-28 11:43:02.365190 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-28 11:43:02.365252 - [INFO] Call graph has been constructed
62 2018-Dec-28 11:43:02.365314 - [INFO] Performing analysis: plugin
63 2018-Dec-28 11:43:02.365380 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2018-Dec-28 11:43:02.365860 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraPluginTest

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %a5 = alloca i32, align 4, !phasar.instruction.id !16
===========================
Got operands checking instruction (alloca)
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 0

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
===========================
Got call instruction
Adding call instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 1
join()
Adding line: 9

flow()
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 2
join()
Adding line: 9
Adding line: 9

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 3
join()
Adding line: 9
Adding line: 9
Adding line: 10

flow()
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

flow()
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

flow()
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 0
New Facts: 4
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 10

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 10

flow()
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 10

flow()
  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 4
New Facts: 6
join()
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 10

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

flow()
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

flow()
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

flow()
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 5
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

flow()
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 19
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

flow()
  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 6
join()
Adding line: 19
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10

flow()
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 0
New Facts: 6
join()
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10
Adding line: 23

flow()
  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6
join()
Adding line: 19
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 16
Adding line: 10
Adding line: 23

flow()
  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 7
join()
Adding line: 19
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 16
Adding line: 10
Adding line: 23

flow()
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 19
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 16
Adding line: 23

flow()
  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 0
New Facts: 8
join()
Adding line: 19
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 16
Adding line: 23

flow()
  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 0
New Facts: 9
join()
Adding line: 19
Adding line: 13
Adding line: 9
Adding line: 9
Adding line: 10
Adding line: 13
Adding line: 29
Adding line: 16
Adding line: 23

flow()
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
===========================
Got store instruction
Adding store instruction
sqSubSetEqual()
Old Facts: 2
New Facts: 2

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 3
New Facts: 3

flow()
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 9
New Facts: 4

flow()
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact
sqSubSetEqual()
Old Facts: 4
New Facts: 4

flow()
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 6

flow()
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 5

flow()
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
===========================
sqSubSetEqual()
Old Facts: 5
New Facts: 5

flow()
  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 7

flow()
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
===========================
sqSubSetEqual()
Old Facts: 6
New Facts: 6

flow()
  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 6

flow()
  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 7

flow()
  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51
===========================
sqSubSetEqual()
Old Facts: 7
New Facts: 6

flow()
  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
===========================
sqSubSetEqual()
Old Facts: 9
New Facts: 7

flow()
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
===========================
Got call instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
===========================
Got store instruction
sqSubSetEqual()
Old Facts: 8
New Facts: 8

flow()
  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
===========================
Got operands checking instruction (load)
Adding fact
sqSubSetEqual()
Old Facts: 9
New Facts: 9

flow()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
===========================
Got call instruction

flow()
  %rc = alloca i32, align 4, !phasar.instruction.id !13
===========================
Got operands checking instruction (alloca)

flow()
  %taint = alloca i32, align 4, !phasar.instruction.id !14
===========================
Got operands checking instruction (alloca)

flow()
  %retval = alloca i32, align 4, !phasar.instruction.id !12
===========================
Got operands checking instruction (alloca)

flow()
  store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45
===========================

flow()
  store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36
===========================

flow()
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
===========================
Got store instruction
Adding store instruction

flow()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
===========================
Got call instruction
Adding call instruction fact

flow()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
===========================
Got store instruction

flow()
  %a5 = alloca i32, align 4, !phasar.instruction.id !16
===========================
Got operands checking instruction (alloca)

flow()
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
===========================
Got operands checking instruction (load)
Adding fact

flow()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
===========================
Got call instruction

flow()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35
===========================

flow()
  %a = alloca i32, align 4, !phasar.instruction.id !15
===========================
Got operands checking instruction (alloca)

flow()
  %2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59
===========================
Got operands checking instruction (load)
Adding fact

flow()
  br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38
===========================

flow()
  %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40
===========================

flow()
  switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31
===========================
Got switch instruction
Adding switch instruction fact

flow()
  br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53
===========================

flow()
  br label %sw.epilog, !dbg !46, !phasar.instruction.id !47
===========================

flow()
  br label %sw.epilog, !dbg !50, !phasar.instruction.id !51
===========================

flow()
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42
===========================

flow()
  store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49
===========================

flow()
  call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56
===========================
Got call instruction

flow()
  store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57
===========================
Got store instruction

flow()
  ret i32 %2, !dbg !60, !phasar.instruction.id !61worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 21
worklist size: 21
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 23
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
%a5 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 25
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
br label %sw.epilog4, !dbg !37, !phasar.instruction.id !38, ID: 15
Facts:
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
br label %sw.epilog4, !dbg !52, !phasar.instruction.id !53, ID: 22
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
br label %sw.epilog, !dbg !46, !phasar.instruction.id !47, ID: 19
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
br label %sw.epilog, !dbg !50, !phasar.instruction.id !51, ID: 21
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb2
    i32 1, label %sw.bb3
  ], !dbg !41, !phasar.instruction.id !42, ID: 17
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
call void @llvm.dbg.declare(metadata i32* %a5, metadata !54, metadata !19), !dbg !55, !phasar.instruction.id !56, ID: 23
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
switch i32 %0, label %sw.epilog4 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


Instruction:
store i32 0, i32* %a5, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instructio65 2018-Dec-28 11:43:02.413512 - [INFO] Write results to file
66 2018-Dec-28 11:43:02.413862 - [INFO] Shutdown llvm and the analysis framework.

===========================
printReport()
n.id !49, ID: 20


Instruction:
ret i32 %2, !dbg !60, !phasar.instruction.id !61, ID: 26
Facts:
store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 18
store i32 1, i32* %a, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !32, metadata !19), !dbg !34, !phasar.instruction.id !35, ID: 13
%2 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 25
%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 16
store i32 2, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 20


