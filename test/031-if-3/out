0 2018-Dec-28 21:51:52.684583 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-28 21:51:52.685003 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-28 21:51:52.685351 - [INFO] No configuration file is used.
3 2018-Dec-28 21:51:52.685428 - [INFO] Program options have been successfully parsed.
4 2018-Dec-28 21:51:52.685528 - [INFO] Check program options for logical errors.
5 2018-Dec-28 21:51:52.685617 - [INFO] Set-up IR database.
6 2018-Dec-28 21:51:52.691298 - [INFO] Constructed the analysis controller.
7 2018-Dec-28 21:51:52.691413 - [INFO] Found the following IR files for this project: 
8 2018-Dec-28 21:51:52.691475 - [INFO] 	main.ll
9 2018-Dec-28 21:51:52.691534 - [INFO] Check for chosen entry points.
10 2018-Dec-28 21:51:52.691595 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-28 21:51:52.691654 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-28 21:51:52.691714 - [INFO] Preprocess module: main.ll
13 2018-Dec-28 21:51:52.692063 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-28 21:51:52.692205 - [INFO] Running ValueAnnotationPass
15 2018-Dec-28 21:51:52.692569 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-28 21:51:52.692633 - [INFO] Allocated Types    : 2
17 2018-Dec-28 21:51:52.692698 - [INFO] Allocation Sites   : 5
18 2018-Dec-28 21:51:52.692755 - [INFO] Basic Blocks       : 4
19 2018-Dec-28 21:51:52.692813 - [INFO] Calls Sites        : 5
20 2018-Dec-28 21:51:52.692871 - [INFO] Functions          : 3
21 2018-Dec-28 21:51:52.692928 - [INFO] Globals            : 1
22 2018-Dec-28 21:51:52.692985 - [INFO] Global Pointer     : 1
23 2018-Dec-28 21:51:52.693043 - [INFO] Instructions       : 24
24 2018-Dec-28 21:51:52.693100 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-28 21:51:52.693167 - [INFO] Store Instructions : 6
26 2018-Dec-28 21:51:52.693225 - [INFO]  
27 2018-Dec-28 21:51:52.693324 - [INFO]   i32
28 2018-Dec-28 21:51:52.693388 - [INFO]   i8*
29 2018-Dec-28 21:51:52.693977 - [DEBUG] Analyzing function: main
30 2018-Dec-28 21:51:52.694987 - [INFO] Reconstruct the class hierarchy.
31 2018-Dec-28 21:51:52.695084 - [INFO] Construct type hierarchy
32 2018-Dec-28 21:51:52.695146 - [DEBUG] Analyse types in module: main.ll
33 2018-Dec-28 21:51:52.695336 - [DEBUG] Reconstruct virtual function table for module: main.ll
34 2018-Dec-28 21:51:52.695410 - [INFO] Reconstruction of class hierarchy completed.
35 2018-Dec-28 21:51:52.695475 - [INFO] Starting CallGraphAnalysisType: OTF
36 2018-Dec-28 21:51:52.695613 - [DEBUG] Walking in function: main
37 2018-Dec-28 21:51:52.695704 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i8** %taint, metadata !18, metadata !21), !dbg !22, !phasar.instruction.id !23, ID: 7
38 2018-Dec-28 21:51:52.696099 - [DEBUG] Found 1 possible target(s)
39 2018-Dec-28 21:51:52.696160 - [DEBUG] Target name: llvm.dbg.declare
40 2018-Dec-28 21:51:52.696246 - [DEBUG] Walking in function: llvm.dbg.declare
41 2018-Dec-28 21:51:52.696309 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
42 2018-Dec-28 21:51:52.696373 - [DEBUG] Found static call-site: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
43 2018-Dec-28 21:51:52.696750 - [DEBUG] Found 1 possible target(s)
44 2018-Dec-28 21:51:52.696809 - [DEBUG] Target name: getenv
45 2018-Dec-28 21:51:52.696890 - [DEBUG] Walking in function: getenv
46 2018-Dec-28 21:51:52.696953 - [DEBUG] Function already visited or only declaration: getenv
47 2018-Dec-28 21:51:52.697016 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %ret, metadata !27, metadata !21), !dbg !28, !phasar.instruction.id !29, ID: 10
48 2018-Dec-28 21:51:52.697297 - [DEBUG] Found 1 possible target(s)
49 2018-Dec-28 21:51:52.697355 - [DEBUG] Target name: llvm.dbg.declare
50 2018-Dec-28 21:51:52.697429 - [DEBUG] Walking in function: llvm.dbg.declare
51 2018-Dec-28 21:51:52.697491 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
52 2018-Dec-28 21:51:52.697574 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39, ID: 14
53 2018-Dec-28 21:51:52.697853 - [DEBUG] Found 1 possible target(s)
54 2018-Dec-28 21:51:52.697911 - [DEBUG] Target name: llvm.dbg.declare
55 2018-Dec-28 21:51:52.697986 - [DEBUG] Walking in function: llvm.dbg.declare
56 2018-Dec-28 21:51:52.698048 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
57 2018-Dec-28 21:51:52.698112 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 19
58 2018-Dec-28 21:51:52.698389 - [DEBUG] Found 1 possible target(s)
59 2018-Dec-28 21:51:52.698448 - [DEBUG] Target name: llvm.dbg.declare
60 2018-Dec-28 21:51:52.698522 - [DEBUG] Walking in function: llvm.dbg.declare
61 2018-Dec-28 21:51:52.698584 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
62 2018-Dec-28 21:51:52.698646 - [INFO] Call graph has been constructed
63 2018-Dec-28 21:51:52.698708 - [INFO] Performing analysis: plugin
64 2018-Dec-28 21:51:52.698775 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
65 2018-Dec-28 21:51:52.699278 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %taint = alloca i8*, align 8, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %ret = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %a1 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction

  call void @llvm.dbg.declare(metadata i8** %taint, metadata !18, metadata !21), !dbg !22, !phasar.instruction.id !23
Got call instruction

  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25
Got call instruction
Adding call instruction fact
Adding line: 10

  store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26
Got store instruction
Adding store instruction
Adding line: 10
Adding line: 10

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !27, metadata !21), !dbg !28, !phasar.instruction.id !29
Got call instruction
Adding line: 10
Adding line: 10

  %0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32
Got load instruction
Adding load instruction fact
Adding line: 10
Adding line: 10
Adding line: 13

  %tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33
Got operands checking instruction (icmp)
Adding fact
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13

  br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35
Got branch instruction
Adding conditional branch instruction fact
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 13

  br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35
Got branch instruction
Adding conditional branch instruction fact
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 13

  call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39
Adding line: 10
Adding line: 10
Adding line: 14
Adding line: 13
Adding line: 13
Adding line: 13

  store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 14
Adding line: 13
Adding line: 13
Adding line: 13

  %1 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 14
Adding line: 13
Adding line: 13
Adding line: 15
Adding line: 13

  store i32 %1, i32* %ret, align 4, !dbg !43, !phasar.instruction.id !44
Adding line: 15
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 14
Adding line: 13
Adding line: 13
Adding line: 15
Adding line: 13

  br label %if.end, !dbg !45, !phasar.instruction.id !46
Adding line: 15
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 14
Adding line: 13
Adding line: 13
Adding line: 15
Adding line: 13

  call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 13
Adding line: 17

  store i32 0, i32* %a1, align 4, !dbg !49, !phasar.instruction.id !51
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 13
Adding line: 17
Adding line: 17

  store i32 100, i32* %ret, align 4, !dbg !52, !phasar.instruction.id !53
Adding line: 10
Adding line: 10
Adding line: 13
Adding line: 13
Adding line: 13
Adding line: 17
Adding line: 17
Adding line: 18

  br label %if.end, !phasar.instruction.id !54
Adding line: 15
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 14
Adding line: 13
Adding line: 13
Adding line: 15
Adding line: 13
Adding line: 17
Adding line: 17
Adding line: 18

  %2 = load i32, i32* %ret, align 4, !dbg !55, !phasar.instruction.id !56
Got load instruction
Adding load instruction fact
Adding line: 15
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 14
Adding line: 13
Adding line: 13
Adding line: 15
Adding line: 21
Adding line: 17
Adding line: 17
Adding line: 18

  store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26
Got store instruction
Adding store instruction

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !27, metadata !21), !dbg !28, !phasar.instruction.id !29
Got call instruction

  %0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32
Got load instruction
Adding load instruction fact

  %tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33
Got operands checking instruction (icmp)
Adding fact

  br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35
Got branch instruction
Adding conditional branch instruction fact

  br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35
Got branch instruction
Adding conditional branch instruction fact

  call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39

  call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50

  store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40

  %1 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42

  store i32 %1, i32* %ret, align 4, !dbg !43, !phasar.instruction.id !44

  br label %if.end, !dbg !45, !phasar.instruction.id !46

  %2 = load i32, i32* %ret, align 4, !dbg !55, !phasar.instruction.id !56
Got load instruction
Adding load instruction fact

  store i32 0, i32* %a1, align 4, !dbg !49, !phasar.instruction.id !51

  store i32 100, i32* %ret, align 4, !dbg !52, !phasar.instruction.id !53

  br label %if.end, !phasar.instruction.id !54

  %2 = load i32, i32* %ret, align 4, !dbg !55, !phasar.instruction.id !56
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i8** %taint, metadata !18, metadata !21), !dbg !22, !phasar.instruction.id !23
Got call instruction

  %taint = alloca i8*, align 8, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %ret = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 %1, i32* %ret, align 4, !dbg !43, !phasar.instruction.id !44

  store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40

  store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26
Got store instruction
Adding store instruction

  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction

  %a1 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !27, metadata !21), !dbg !28, !phasar.instruction.id !29
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32
Got load instruction
Adding load instruction fact

  %tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33
Got operands checking instruction (icmp)
Adding fact

  %1 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42

  br label %if.end, !phasar.instruction.id !54

  br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35
Got branch instruction
Adding conditional branch instruction fact

  %2 = load i32, i32* %ret, align 4, !dbg !55, !phasar.instruction.id !56
Got load instruction
Adding load instruction fact

  br label %if.end, !dbg !45, !phasar.instruction.id !46

  call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50

  store i32 0, i32* %a1, align 4, !dbg !49, !phasar.instruction.id !51

  store i32 100, i32* %ret, align 4, !dbg !52, !phasar.instruction.id !53

  ret i32 %2, !dbg !57, !phasar.instruction.id !58worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 17
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i8** %taint, metadata !18, metadata !21), !dbg !22, !phasar.instruction.id !23, ID: 7
Facts:
	EMPTY


Instruction:
%taint = alloca i8*, align 8, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%ret = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %ret, align 4, !dbg !43, !phasar.instruction.id !44, ID: 17
Facts:
store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 15
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39, ID: 14
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
%1 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 16
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13


Instruction:
store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 15
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39, ID: 14
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13


Instruction:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
Facts:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8


Instruction:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
%a1 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %ret, metadata !27, metadata !21), !dbg !28, !phasar.instruction.id !29, ID: 10
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39, ID: 14
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8


Instruction:
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11


Instruction:
%1 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 16
Facts:
store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 15
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39, ID: 14
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13


Instruction:
br label %if.end, !phasar.instruction.id !54, ID: 22
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13
call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 19
store i32 0, i32* %a1, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 100, i32* %ret, align 4, !dbg !52, !phasar.instruction.id !53, ID: 21


Instruction:
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12


Instruction:
%2 = load i32, i32* %ret, align 4, !dbg !55, !phasar.instruction.id !56, ID: 23
Facts:
store i32 %1, i32* %ret, align 4, !dbg !43, !phasar.instruction.id !44, ID: 17
store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 15
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39, ID: 14
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
%1 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 16
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13
call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 19
store i32 0, i32* %a1, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 100, i32* %ret, align 4, !dbg !52, !phasar.instruction.id !53, ID: 21


Instruction:
br label %if.end, !dbg !45, !phasar.instruction.id !46, ID: 18
Facts:
store i32 %1, i32* %ret, align 4, !dbg !43, !phasar.instruction.id !44, ID: 17
store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 15
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39, ID: 14
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
%1 = load i32, i32* %a, align 4, !dbg !41, !phasar.instruction.id !42, ID: 16
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13


Instruction:
call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 19
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13


Instruction:
store i32 0, i32* %a1, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13
call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 19


Instruction:
store i32 100, i32* %ret, align 4, !dbg !52, !phasar.instruction.id !53, ID: 21
Facts:
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
br i1 %tobool, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !35, ID: 13
call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 19
store i32 0, i32* %a1, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20


Instruction:
ret i32 %2, !dbg !57, !phasar.instruction.id !58, ID: 24
Facts:
store i32 %1, i32* %ret, align 4, !dbg !43, !phasar.instruction.id !44, ID: 17
store i32 42, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 15
store i8* %call, i8** %taint, align 8, !dbg !22, !phasar.instruction.id !26, ID: 9
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !24, !phasar.instruction.id !25, ID: 8
call void @llvm.dbg.declare(metadata i32* %a, metadata !36, metadata !21), !dbg !38, !phasar.instruction.id !39, ID: 14
%0 = load i8*, i8** %taint, align 8, !dbg !30, !phasar.instruction.id !32, ID: 11
%tobool = icmp ne i8* %0, null, !dbg !30, !phasar.instruction.id !33, ID: 12
%1 = load i32, i32* %a66 2018-Dec-28 21:51:52.741481 - [INFO] Write results to file
67 2018-Dec-28 21:51:52.741681 - [INFO] Shutdown llvm and the analysis framework.

, align 4, !dbg !41, !phasar.instruction.id !42, ID: 16
%2 = load i32, i32* %ret, align 4, !dbg !55, !phasar.instruction.id !56, ID: 23
call void @llvm.dbg.declare(metadata i32* %a1, metadata !47, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 19
store i32 0, i32* %a1, align 4, !dbg !49, !phasar.instruction.id !51, ID: 20
store i32 100, i32* %ret, align 4, !dbg !52, !phasar.instruction.id !53, ID: 21


