0 2018-Dec-29 12:16:15.183782 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-29 12:16:15.184202 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-29 12:16:15.184547 - [INFO] No configuration file is used.
3 2018-Dec-29 12:16:15.184624 - [INFO] Program options have been successfully parsed.
4 2018-Dec-29 12:16:15.184752 - [INFO] Check program options for logical errors.
5 2018-Dec-29 12:16:15.184844 - [INFO] Set-up IR database.
6 2018-Dec-29 12:16:15.190420 - [INFO] Constructed the analysis controller.
7 2018-Dec-29 12:16:15.190533 - [INFO] Found the following IR files for this project: 
8 2018-Dec-29 12:16:15.190595 - [INFO] 	main.ll
9 2018-Dec-29 12:16:15.190654 - [INFO] Check for chosen entry points.
10 2018-Dec-29 12:16:15.190715 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-29 12:16:15.190775 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-29 12:16:15.190836 - [INFO] Preprocess module: main.ll
13 2018-Dec-29 12:16:15.191192 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-29 12:16:15.191321 - [INFO] Running ValueAnnotationPass
15 2018-Dec-29 12:16:15.191760 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-29 12:16:15.191827 - [INFO] Allocated Types    : 1
17 2018-Dec-29 12:16:15.191892 - [INFO] Allocation Sites   : 3
18 2018-Dec-29 12:16:15.191950 - [INFO] Basic Blocks       : 7
19 2018-Dec-29 12:16:15.192008 - [INFO] Calls Sites        : 4
20 2018-Dec-29 12:16:15.192066 - [INFO] Functions          : 4
21 2018-Dec-29 12:16:15.192124 - [INFO] Globals            : 1
22 2018-Dec-29 12:16:15.192182 - [INFO] Global Pointer     : 1
23 2018-Dec-29 12:16:15.192240 - [INFO] Instructions       : 23
24 2018-Dec-29 12:16:15.192297 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-29 12:16:15.192355 - [INFO] Store Instructions : 5
26 2018-Dec-29 12:16:15.192413 - [INFO]  
27 2018-Dec-29 12:16:15.192494 - [INFO]   i32
28 2018-Dec-29 12:16:15.193012 - [DEBUG] Analyzing function: main
29 2018-Dec-29 12:16:15.193279 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-29 12:16:15.193349 - [INFO] Construct type hierarchy
31 2018-Dec-29 12:16:15.193411 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-29 12:16:15.193570 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-29 12:16:15.193639 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-29 12:16:15.193701 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-29 12:16:15.193812 - [DEBUG] Walking in function: main
36 2018-Dec-29 12:16:15.193898 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-29 12:16:15.194245 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-29 12:16:15.194305 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-29 12:16:15.194391 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-29 12:16:15.194455 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-29 12:16:15.194519 - [DEBUG] Found static call-site: %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22, ID: 6
42 2018-Dec-29 12:16:15.194810 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-29 12:16:15.194869 - [DEBUG] Target name: foo
44 2018-Dec-29 12:16:15.194950 - [DEBUG] Walking in function: foo
45 2018-Dec-29 12:16:15.195012 - [DEBUG] Function already visited or only declaration: foo
46 2018-Dec-29 12:16:15.195077 - [DEBUG] Found static call-site: %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
47 2018-Dec-29 12:16:15.195392 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-29 12:16:15.195451 - [DEBUG] Target name: getenv
49 2018-Dec-29 12:16:15.195529 - [DEBUG] Walking in function: getenv
50 2018-Dec-29 12:16:15.195592 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-29 12:16:15.195657 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
52 2018-Dec-29 12:16:15.195954 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-29 12:16:15.196014 - [DEBUG] Target name: llvm.dbg.declare
54 2018-Dec-29 12:16:15.196089 - [DEBUG] Walking in function: llvm.dbg.declare
55 2018-Dec-29 12:16:15.196152 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2018-Dec-29 12:16:15.196216 - [INFO] Call graph has been constructed
57 2018-Dec-29 12:16:15.196278 - [INFO] Performing analysis: plugin
58 2018-Dec-29 12:16:15.196344 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2018-Dec-29 12:16:15.196828 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %ret = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22
Got call instruction

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23
Got operands checking instruction (icmp)

  br i1 %tobool, label %if.then, label %if.else4, !dbg !24, !phasar.instruction.id !25
Got branch instruction

  br i1 %tobool, label %if.then, label %if.else4, !dbg !24, !phasar.instruction.id !25
Got branch instruction

  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact
Adding line: 10

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Adding line: 10
Adding line: 10

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Adding line: 10
Adding line: 10
Adding line: 10

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Adding line: 10
Adding line: 10
Adding line: 10

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10

  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10

  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 10

  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 10

  br label %if.end, !dbg !42, !phasar.instruction.id !43
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 10

  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
Adding line: 14
Adding line: 10
Adding line: 10
Adding line: 10

  br label %if.end, !phasar.instruction.id !47
Adding line: 14
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 10

  br label %if.end5, !dbg !48, !phasar.instruction.id !49
Got branch instruction
Adding line: 14
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12

  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
Got store instruction

  br label %if.end5, !phasar.instruction.id !53
Got branch instruction

  %1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55
Got load instruction
Adding load instruction fact
Adding line: 14
Adding line: 12
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 12
Adding line: 20

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36

  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46

  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37

  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39

  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41

  br label %if.end, !dbg !42, !phasar.instruction.id !43

  br label %if.end5, !dbg !48, !phasar.instruction.id !49
Got branch instruction

  br label %if.end, !phasar.instruction.id !47

  br label %if.end5, !dbg !48, !phasar.instruction.id !49
Got branch instruction

  %1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %ret = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46

  br label %if.end5, !phasar.instruction.id !53
Got branch instruction

  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41

  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23
Got operands checking instruction (icmp)

  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction

  br i1 %tobool, label %if.then, label %if.else4, !dbg !24, !phasar.instruction.id !25
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact

  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39

  br label %if.end, !phasar.instruction.id !47

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  %1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55
Got load instruction
Adding load instruction fact

  br label %if.end, !dbg !42, !phasar.instruction.id !43

  br label %if.end5, !dbg !48, !phasar.instruction.id !49
Got branch instruction

  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
Got store instruction

  ret i32 %1, !dbg !56, !phasar.instruction.id !57worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 15
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%ret = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22, ID: 6
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46, ID: 17
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br label %if.end5, !phasar.instruction.id !53, ID: 21
Facts:
	EMPTY


Instruction:
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23, ID: 7
Facts:
	EMPTY


Instruction:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %if.then, label %if.else4, !dbg !24, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9


Instruction:
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br label %if.end, !phasar.instruction.id !47, ID: 18
Facts:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10


Instruction:
%1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55, ID: 22
Facts:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46, ID: 17
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14


Instruction:
br label %if.end, !dbg !42, !phasar.instruction.id !43, ID: 16
Facts:
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br label %if.end5, !dbg !48, !phasar.instruction.id !49, ID: 19
Facts:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46, ID: 17
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
Facts:
	EMPTY


Instruction:
ret i32 %1, !dbg !56, !phasar.instruction.id !57, ID: 23
Facts:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !60 2018-Dec-29 12:16:15.227331 - [INFO] Write results to file
61 2018-Dec-29 12:16:15.227505 - [INFO] Shutdown llvm and the analysis framework.

46, ID: 17
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
%1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55, ID: 22


