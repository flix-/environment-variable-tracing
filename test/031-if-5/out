0 2019-Jan-05 20:21:27.484451 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 20:21:27.484864 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 20:21:27.485246 - [INFO] No configuration file is used.
3 2019-Jan-05 20:21:27.485325 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 20:21:27.485422 - [INFO] Check program options for logical errors.
5 2019-Jan-05 20:21:27.485511 - [INFO] Set-up IR database.
6 2019-Jan-05 20:21:27.490830 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 20:21:27.490939 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 20:21:27.491000 - [INFO] 	main.ll
9 2019-Jan-05 20:21:27.491059 - [INFO] Check for chosen entry points.
10 2019-Jan-05 20:21:27.491121 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 20:21:27.491179 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 20:21:27.491240 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 20:21:27.491593 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 20:21:27.491720 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 20:21:27.492147 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 20:21:27.492213 - [INFO] Allocated Types    : 1
17 2019-Jan-05 20:21:27.492277 - [INFO] Allocation Sites   : 3
18 2019-Jan-05 20:21:27.492335 - [INFO] Basic Blocks       : 7
19 2019-Jan-05 20:21:27.492392 - [INFO] Calls Sites        : 4
20 2019-Jan-05 20:21:27.492449 - [INFO] Functions          : 4
21 2019-Jan-05 20:21:27.492506 - [INFO] Globals            : 1
22 2019-Jan-05 20:21:27.492564 - [INFO] Global Pointer     : 1
23 2019-Jan-05 20:21:27.492621 - [INFO] Instructions       : 23
24 2019-Jan-05 20:21:27.492678 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 20:21:27.492735 - [INFO] Store Instructions : 5
26 2019-Jan-05 20:21:27.492792 - [INFO]  
27 2019-Jan-05 20:21:27.492866 - [INFO]   i32
28 2019-Jan-05 20:21:27.493370 - [DEBUG] Analyzing function: main
29 2019-Jan-05 20:21:27.493631 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 20:21:27.493695 - [INFO] Construct type hierarchy
31 2019-Jan-05 20:21:27.493755 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 20:21:27.493913 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 20:21:27.493982 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 20:21:27.494044 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 20:21:27.494155 - [DEBUG] Walking in function: main
36 2019-Jan-05 20:21:27.494240 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2019-Jan-05 20:21:27.494584 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 20:21:27.494643 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 20:21:27.494730 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 20:21:27.494793 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 20:21:27.494857 - [DEBUG] Found static call-site: %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22, ID: 6
42 2019-Jan-05 20:21:27.495127 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 20:21:27.495222 - [DEBUG] Target name: foo
44 2019-Jan-05 20:21:27.495303 - [DEBUG] Walking in function: foo
45 2019-Jan-05 20:21:27.495366 - [DEBUG] Function already visited or only declaration: foo
46 2019-Jan-05 20:21:27.495430 - [DEBUG] Found static call-site: %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
47 2019-Jan-05 20:21:27.495733 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 20:21:27.495792 - [DEBUG] Target name: getenv
49 2019-Jan-05 20:21:27.495868 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 20:21:27.495930 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 20:21:27.495994 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
52 2019-Jan-05 20:21:27.496278 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 20:21:27.496338 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-05 20:21:27.496412 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-05 20:21:27.496474 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-05 20:21:27.496538 - [INFO] Call graph has been constructed
57 2019-Jan-05 20:21:27.496599 - [INFO] Performing analysis: plugin
58 2019-Jan-05 20:21:27.496665 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2019-Jan-05 20:21:27.497169 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %ret = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22
Got call instruction
Dumping facts
=============
=============


  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Dumping facts
=============
=============


  br i1 %tobool, label %if.then, label %if.else4, !dbg !24, !phasar.instruction.id !25
Got branch instruction
Dumping facts
=============
=============


  br i1 %tobool, label %if.then, label %if.else4, !dbg !24, !phasar.instruction.id !25
Got branch instruction
Dumping facts
=============
=============


  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
=============

Added line number: 10

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
=============

Added line number: 10
Added line number: 10

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 10
Added line number: 10
Added line number: 10

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 10
Added line number: 10
Added line number: 10

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10

  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10

  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 10

  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 12
Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 10

  br label %if.end, !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 12
Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 10

  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 14
Added line number: 10
Added line number: 10
Added line number: 10

  br label %if.end, !phasar.instruction.id !47
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 14
Added line number: 12
Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 10

  br label %if.end5, !dbg !48, !phasar.instruction.id !49
Got branch instruction
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
=============

Added line number: 14
Added line number: 12
Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12

  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  br label %if.end5, !phasar.instruction.id !53
Got branch instruction
Dumping facts
=============
=============


  %1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55
=============

Added line number: 14
Added line number: 12
Added line number: 11
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 12
Added line number: 20

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  br label %if.end, !dbg !42, !phasar.instruction.id !43
Dumping facts
=============
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  br label %if.end5, !dbg !48, !phasar.instruction.id !49
Got branch instruction
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
=============


  br label %if.end, !phasar.instruction.id !47
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
=============


  br label %if.end5, !dbg !48, !phasar.instruction.id !49
Got branch instruction
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
=============


  %1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46
  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41
  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37
  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39
  %1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55
=============


  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %ret = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46

  br label %if.end5, !phasar.instruction.id !53
Got branch instruction

  store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41

  store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23
Got operands checking instruction (icmp)

  %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts

  br i1 %tobool, label %if.then, label %if.else4, !dbg !24, !phasar.instruction.id !25
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36

  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact

  %0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39

  br label %if.end, !phasar.instruction.id !47

  br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32
Got branch instruction
Adding conditional branch instruction fact

  %1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55
Got load instruction
Adding load instruction fact

  br label %if.end, !dbg !42, !phasar.instruction.id !43

  br label %if.end5, !dbg !48, !phasar.instruction.id !49
Got branch instruction

  store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52
Got store instruction
Removed 0 memory locations from facts

  ret i32 %1, !dbg !56, !phasar.instruction.id !57worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 15
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %ret, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%ret = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @foo(), !dbg !20, !phasar.instruction.id !22, ID: 6
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46, ID: 17
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br label %if.end5, !phasar.instruction.id !53, ID: 21
Facts:
	EMPTY


Instruction:
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !23, ID: 7
Facts:
	EMPTY


Instruction:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %if.then, label %if.else4, !dbg !24, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9


Instruction:
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
Facts:
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br label %if.end, !phasar.instruction.id !47, ID: 18
Facts:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46, ID: 17
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10


Instruction:
%1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55, ID: 22
Facts:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46, ID: 17
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14


Instruction:
br label %if.end, !dbg !42, !phasar.instruction.id !43, ID: 16
Facts:
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
br label %if.end5, !dbg !48, !phasar.instruction.id !49, ID: 19
Facts:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !46, ID: 17
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
br i1 %tobool2, label %if.then3, label %if.else, !dbg !31, !phasar.instruction.id !32, ID: 11


Instruction:
store i32 100, i32* %ret, align 4, !dbg !50, !phasar.instruction.id !52, ID: 20
Facts:
	EMPTY


Instruction:
ret i32 %1, !dbg !56, !phasar.instruction.id !57, ID: 23
Facts:
store i32 100, i32* %ret, align 4, !dbg !44, !phasar.instruction.id !60 2019-Jan-05 20:21:27.553911 - [INFO] Write results to file
61 2019-Jan-05 20:21:27.554087 - [INFO] Shutdown llvm and the analysis framework.

46, ID: 17
store i32 %0, i32* %ret, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15
store i32 100, i32* %a, align 4, !dbg !35, !phasar.instruction.id !37, ID: 13
%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !29, ID: 9
call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !17), !dbg !35, !phasar.instruction.id !36, ID: 12
%tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !30, ID: 10
%0 = load i32, i32* %a, align 4, !dbg !38, !phasar.instruction.id !39, ID: 14
%1 = load i32, i32* %ret, align 4, !dbg !54, !phasar.instruction.id !55, ID: 22


