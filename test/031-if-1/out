0 2019-Jan-04 17:20:03.265916 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-04 17:20:03.266324 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-04 17:20:03.266678 - [INFO] No configuration file is used.
3 2019-Jan-04 17:20:03.266755 - [INFO] Program options have been successfully parsed.
4 2019-Jan-04 17:20:03.266845 - [INFO] Check program options for logical errors.
5 2019-Jan-04 17:20:03.266935 - [INFO] Set-up IR database.
6 2019-Jan-04 17:20:03.271985 - [INFO] Constructed the analysis controller.
7 2019-Jan-04 17:20:03.272097 - [INFO] Found the following IR files for this project: 
8 2019-Jan-04 17:20:03.272158 - [INFO] 	main.ll
9 2019-Jan-04 17:20:03.272217 - [INFO] Check for chosen entry points.
10 2019-Jan-04 17:20:03.272278 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-04 17:20:03.272336 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-04 17:20:03.272396 - [INFO] Preprocess module: main.ll
13 2019-Jan-04 17:20:03.272734 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-04 17:20:03.272873 - [INFO] Running ValueAnnotationPass
15 2019-Jan-04 17:20:03.273201 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-04 17:20:03.273265 - [INFO] Allocated Types    : 2
17 2019-Jan-04 17:20:03.273329 - [INFO] Allocation Sites   : 4
18 2019-Jan-04 17:20:03.273387 - [INFO] Basic Blocks       : 3
19 2019-Jan-04 17:20:03.273444 - [INFO] Calls Sites        : 4
20 2019-Jan-04 17:20:03.273501 - [INFO] Functions          : 3
21 2019-Jan-04 17:20:03.273559 - [INFO] Globals            : 1
22 2019-Jan-04 17:20:03.273616 - [INFO] Global Pointer     : 1
23 2019-Jan-04 17:20:03.273673 - [INFO] Instructions       : 19
24 2019-Jan-04 17:20:03.273730 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-04 17:20:03.273788 - [INFO] Store Instructions : 4
26 2019-Jan-04 17:20:03.273845 - [INFO]  
27 2019-Jan-04 17:20:03.273919 - [INFO]   i32
28 2019-Jan-04 17:20:03.273981 - [INFO]   i8*
29 2019-Jan-04 17:20:03.274448 - [DEBUG] Analyzing function: main
30 2019-Jan-04 17:20:03.275318 - [INFO] Reconstruct the class hierarchy.
31 2019-Jan-04 17:20:03.275394 - [INFO] Construct type hierarchy
32 2019-Jan-04 17:20:03.275455 - [DEBUG] Analyse types in module: main.ll
33 2019-Jan-04 17:20:03.275617 - [DEBUG] Reconstruct virtual function table for module: main.ll
34 2019-Jan-04 17:20:03.275685 - [INFO] Reconstruction of class hierarchy completed.
35 2019-Jan-04 17:20:03.275747 - [INFO] Starting CallGraphAnalysisType: OTF
36 2019-Jan-04 17:20:03.275873 - [DEBUG] Walking in function: main
37 2019-Jan-04 17:20:03.275965 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i8** %taint, metadata !19, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 6
38 2019-Jan-04 17:20:03.276294 - [DEBUG] Found 1 possible target(s)
39 2019-Jan-04 17:20:03.276354 - [DEBUG] Target name: llvm.dbg.declare
40 2019-Jan-04 17:20:03.276436 - [DEBUG] Walking in function: llvm.dbg.declare
41 2019-Jan-04 17:20:03.276499 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
42 2019-Jan-04 17:20:03.276563 - [DEBUG] Found static call-site: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
43 2019-Jan-04 17:20:03.276862 - [DEBUG] Found 1 possible target(s)
44 2019-Jan-04 17:20:03.276921 - [DEBUG] Target name: getenv
45 2019-Jan-04 17:20:03.277000 - [DEBUG] Walking in function: getenv
46 2019-Jan-04 17:20:03.277062 - [DEBUG] Function already visited or only declaration: getenv
47 2019-Jan-04 17:20:03.277126 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %ret, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30, ID: 9
48 2019-Jan-04 17:20:03.277383 - [DEBUG] Found 1 possible target(s)
49 2019-Jan-04 17:20:03.277441 - [DEBUG] Target name: llvm.dbg.declare
50 2019-Jan-04 17:20:03.277516 - [DEBUG] Walking in function: llvm.dbg.declare
51 2019-Jan-04 17:20:03.277578 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
52 2019-Jan-04 17:20:03.277659 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13
53 2019-Jan-04 17:20:03.277916 - [DEBUG] Found 1 possible target(s)
54 2019-Jan-04 17:20:03.277975 - [DEBUG] Target name: llvm.dbg.declare
55 2019-Jan-04 17:20:03.278049 - [DEBUG] Walking in function: llvm.dbg.declare
56 2019-Jan-04 17:20:03.278111 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
57 2019-Jan-04 17:20:03.278173 - [INFO] Call graph has been constructed
58 2019-Jan-04 17:20:03.278258 - [INFO] Performing analysis: plugin
59 2019-Jan-04 17:20:03.278326 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
60 2019-Jan-04 17:20:03.278819 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i8*, align 8, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %ret = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !18
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i8** %taint, metadata !19, metadata !22), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
=============

Adding line number: 10

  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
=============

Adding line number: 10
Adding line number: 10

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30
Got call instruction
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
=============

Adding line number: 10
Adding line number: 10

  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
=============

Adding line number: 10
Adding line number: 10
Adding line number: 13

  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
=============

Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 13

  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============

Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 13
Adding line number: 13

  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============

Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 13
Adding line number: 13

  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============

Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 14
Adding line number: 13
Adding line number: 13

  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
Dumping facts
=============
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============

Adding line number: 14
Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 14
Adding line number: 13
Adding line number: 13

  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============

Adding line number: 14
Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 14
Adding line number: 13
Adding line number: 15
Adding line number: 13

  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============

Adding line number: 15
Adding line number: 14
Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 14
Adding line number: 13
Adding line number: 15
Adding line number: 13

  br label %if.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============

Adding line number: 15
Adding line number: 14
Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 14
Adding line number: 13
Adding line number: 15
Adding line number: 13

  %2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  %2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50
=============

Adding line number: 15
Adding line number: 14
Adding line number: 10
Adding line number: 10
Adding line number: 13
Adding line number: 14
Adding line number: 13
Adding line number: 15
Adding line number: 18

  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
=============


  call void @llvm.dbg.declare(metadata i32* %ret, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30
Got call instruction
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
=============


  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
=============


  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
=============


  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============


  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============


  %2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  %2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50
=============


  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
Dumping facts
=============
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============


  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
Dumping facts
=============
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============


  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============


  br label %if.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
=============


  %2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46
  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42
  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41
  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44
  %2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50
=============


  call void @llvm.dbg.declare(metadata i8** %taint, metadata !19, metadata !22), !dbg !23, !phasar.instruction.id !24
Got call instruction

  %taint = alloca i8*, align 8, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %ret = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46

  store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42

  store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !18
Got store instruction
Removed 0 memory locations from facts

  %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33
Got load instruction
Adding load instruction fact

  call void @llvm.dbg.declare(metadata i32* %ret, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41

  %a = alloca i32, align 4, !phasar.instruction.id !17
Got operands checking instruction (alloca)

  %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35
Got operands checking instruction (icmp)
Adding fact

  %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44

  %2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50
Got load instruction
Adding load instruction fact

  br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37
Got branch instruction
Adding conditional branch instruction fact

  br label %if.end, !dbg !47, !phasar.instruction.id !48

  ret i32 %2, !dbg !51, !phasar.instruction.id !52worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i8** %taint, metadata !19, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 6
Facts:
	EMPTY


Instruction:
%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2
Facts:
	EMPTY


Instruction:
%ret = alloca i32, align 4, !phasar.instruction.id !16, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !14, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46, ID: 16
Facts:
store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11
%1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12


Instruction:
store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
Facts:
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11
br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12


Instruction:
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
Facts:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7


Instruction:
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !18, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
Facts:
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7


Instruction:
call void @llvm.dbg.declare(metadata i32* %ret, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30, ID: 9
Facts:
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13
Facts:
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11
br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !17, ID: 4
Facts:
	EMPTY


Instruction:
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11
Facts:
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10


Instruction:
%1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
Facts:
store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11
br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12


Instruction:
%2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50, ID: 18
Facts:
store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46, ID: 16
store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11
%1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12


Instruction:
br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12
Facts:
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11


Instruction:
br label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 17
Facts:
store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46, ID: 16
store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11
%1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12


Instruction:
ret i32 %2, !dbg !51, !phasar.instruction.id !52, ID: 19
Facts:
store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46, ID: 16
store i32 42, i61 2019-Jan-04 17:20:03.335349 - [INFO] Write results to file
62 2019-Jan-04 17:20:03.335525 - [INFO] Shutdown llvm and the analysis framework.

32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7
%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10
call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13
%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11
%1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15
%2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50, ID: 18


