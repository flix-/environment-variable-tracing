0 2019-Jan-05 14:31:27.285630 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 14:31:27.286039 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 14:31:27.286385 - [INFO] No configuration file is used.
3 2019-Jan-05 14:31:27.286462 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 14:31:27.286552 - [INFO] Check program options for logical errors.
5 2019-Jan-05 14:31:27.286641 - [INFO] Set-up IR database.
6 2019-Jan-05 14:31:27.291588 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 14:31:27.291699 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 14:31:27.291760 - [INFO] 	main.ll
9 2019-Jan-05 14:31:27.291819 - [INFO] Check for chosen entry points.
10 2019-Jan-05 14:31:27.291880 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 14:31:27.291939 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 14:31:27.291999 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 14:31:27.292339 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 14:31:27.292467 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 14:31:27.292808 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 14:31:27.292871 - [INFO] Allocated Types    : 1
17 2019-Jan-05 14:31:27.292936 - [INFO] Allocation Sites   : 2
18 2019-Jan-05 14:31:27.292994 - [INFO] Basic Blocks       : 7
19 2019-Jan-05 14:31:27.293051 - [INFO] Calls Sites        : 3
20 2019-Jan-05 14:31:27.293109 - [INFO] Functions          : 4
21 2019-Jan-05 14:31:27.293167 - [INFO] Globals            : 1
22 2019-Jan-05 14:31:27.293224 - [INFO] Global Pointer     : 1
23 2019-Jan-05 14:31:27.293282 - [INFO] Instructions       : 19
24 2019-Jan-05 14:31:27.293339 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 14:31:27.293397 - [INFO] Store Instructions : 4
26 2019-Jan-05 14:31:27.293454 - [INFO]  
27 2019-Jan-05 14:31:27.293528 - [INFO]   i32
28 2019-Jan-05 14:31:27.293988 - [DEBUG] Analyzing function: main
29 2019-Jan-05 14:31:27.294215 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 14:31:27.294284 - [INFO] Construct type hierarchy
31 2019-Jan-05 14:31:27.294345 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 14:31:27.294504 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 14:31:27.294573 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 14:31:27.294635 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 14:31:27.294742 - [DEBUG] Walking in function: main
36 2019-Jan-05 14:31:27.294832 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
37 2019-Jan-05 14:31:27.295159 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 14:31:27.295219 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 14:31:27.295304 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 14:31:27.295367 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 14:31:27.295432 - [DEBUG] Found static call-site: %call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22, ID: 6
42 2019-Jan-05 14:31:27.295689 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 14:31:27.295749 - [DEBUG] Target name: foo
44 2019-Jan-05 14:31:27.295829 - [DEBUG] Walking in function: foo
45 2019-Jan-05 14:31:27.295890 - [DEBUG] Function already visited or only declaration: foo
46 2019-Jan-05 14:31:27.295954 - [DEBUG] Found static call-site: %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
47 2019-Jan-05 14:31:27.296250 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 14:31:27.296308 - [DEBUG] Target name: getenv
49 2019-Jan-05 14:31:27.296385 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 14:31:27.296446 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 14:31:27.296508 - [INFO] Call graph has been constructed
52 2019-Jan-05 14:31:27.296569 - [INFO] Performing analysis: plugin
53 2019-Jan-05 14:31:27.296651 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
54 2019-Jan-05 14:31:27.297157 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction
Dumping facts
=============
=============


  br label %while.cond, !dbg !19, !phasar.instruction.id !20
Got branch instruction
Dumping facts
=============
=============


  %call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22
Got call instruction
Dumping facts
=============
=============


  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Dumping facts
=============
=============


  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
=============


  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
=============


  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  br label %while.cond1, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Dumping facts
=============
=============


  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
=============

Added line number: 11

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Added line number: 11
Added line number: 11
Added line number: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Added line number: 11
Added line number: 11
Added line number: 11

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Added line number: 12
Added line number: 11
Added line number: 11
Added line number: 11

  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Added line number: 12
Added line number: 11
Added line number: 11
Added line number: 11

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction
Dumping facts
=============
=============


  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Added line number: 12
Added line number: 11
Added line number: 11
Added line number: 11

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  %call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22
Got call instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Added line number: 12
Added line number: 11
Added line number: 11
Added line number: 11

  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Added line number: 12
Added line number: 11
Added line number: 11
Added line number: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Added line number: 12
Added line number: 11
Added line number: 11
Added line number: 11

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Got store instruction
Removed 1 memory locations from facts
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Added line number: 11
Added line number: 11

  br label %while.cond1, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22
Got call instruction

  br label %while.cond, !dbg !19, !phasar.instruction.id !20
Got branch instruction

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Got store instruction
Removed 1 memory locations from facts

  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Got operands checking instruction (icmp)

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36

  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31

  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction
Removed 0 memory locations from facts

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction

  br label %while.cond1, !dbg !28, !phasar.instruction.id !29
Got branch instruction

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32

  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44
Got branch instruction

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33

  ret i32 %0, !dbg !47, !phasar.instruction.id !48worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 9
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22, ID: 6
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br label %while.cond, !dbg !19, !phasar.instruction.id !20, ID: 5
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46, ID: 18
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28,55 2019-Jan-05 14:31:27.336632 - [INFO] Write results to file
56 2019-Jan-05 14:31:27.336822 - [INFO] Shutdown llvm and the analysis framework.

 !phasar.instruction.id !32, ID: 12


Instruction:
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br label %while.cond1, !dbg !28, !phasar.instruction.id !29, ID: 10
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39, ID: 15
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44, ID: 17
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
ret i32 %0, !dbg !47, !phasar.instruction.id !48, ID: 19
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


