0 2018-Dec-31 15:54:29.499619 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-31 15:54:29.500040 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-31 15:54:29.500383 - [INFO] No configuration file is used.
3 2018-Dec-31 15:54:29.500460 - [INFO] Program options have been successfully parsed.
4 2018-Dec-31 15:54:29.500558 - [INFO] Check program options for logical errors.
5 2018-Dec-31 15:54:29.500648 - [INFO] Set-up IR database.
6 2018-Dec-31 15:54:29.505730 - [INFO] Constructed the analysis controller.
7 2018-Dec-31 15:54:29.505846 - [INFO] Found the following IR files for this project: 
8 2018-Dec-31 15:54:29.505908 - [INFO] 	main.ll
9 2018-Dec-31 15:54:29.505968 - [INFO] Check for chosen entry points.
10 2018-Dec-31 15:54:29.506029 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-31 15:54:29.506088 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-31 15:54:29.506171 - [INFO] Preprocess module: main.ll
13 2018-Dec-31 15:54:29.506503 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-31 15:54:29.506626 - [INFO] Running ValueAnnotationPass
15 2018-Dec-31 15:54:29.506975 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-31 15:54:29.507039 - [INFO] Allocated Types    : 1
17 2018-Dec-31 15:54:29.507103 - [INFO] Allocation Sites   : 2
18 2018-Dec-31 15:54:29.507161 - [INFO] Basic Blocks       : 7
19 2018-Dec-31 15:54:29.507218 - [INFO] Calls Sites        : 3
20 2018-Dec-31 15:54:29.507275 - [INFO] Functions          : 4
21 2018-Dec-31 15:54:29.507333 - [INFO] Globals            : 1
22 2018-Dec-31 15:54:29.507390 - [INFO] Global Pointer     : 1
23 2018-Dec-31 15:54:29.507448 - [INFO] Instructions       : 19
24 2018-Dec-31 15:54:29.507505 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-31 15:54:29.507562 - [INFO] Store Instructions : 4
26 2018-Dec-31 15:54:29.507620 - [INFO]  
27 2018-Dec-31 15:54:29.507699 - [INFO]   i32
28 2018-Dec-31 15:54:29.508132 - [DEBUG] Analyzing function: main
29 2018-Dec-31 15:54:29.508369 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-31 15:54:29.508432 - [INFO] Construct type hierarchy
31 2018-Dec-31 15:54:29.508492 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-31 15:54:29.508653 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-31 15:54:29.508721 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-31 15:54:29.508783 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-31 15:54:29.508892 - [DEBUG] Walking in function: main
36 2018-Dec-31 15:54:29.508977 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
37 2018-Dec-31 15:54:29.509308 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-31 15:54:29.509367 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-31 15:54:29.509454 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-31 15:54:29.509559 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-31 15:54:29.509624 - [DEBUG] Found static call-site: %call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22, ID: 6
42 2018-Dec-31 15:54:29.509877 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-31 15:54:29.509936 - [DEBUG] Target name: foo
44 2018-Dec-31 15:54:29.510016 - [DEBUG] Walking in function: foo
45 2018-Dec-31 15:54:29.510078 - [DEBUG] Function already visited or only declaration: foo
46 2018-Dec-31 15:54:29.510142 - [DEBUG] Found static call-site: %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
47 2018-Dec-31 15:54:29.510448 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-31 15:54:29.510506 - [DEBUG] Target name: getenv
49 2018-Dec-31 15:54:29.510583 - [DEBUG] Walking in function: getenv
50 2018-Dec-31 15:54:29.510645 - [DEBUG] Function already visited or only declaration: getenv
51 2018-Dec-31 15:54:29.510707 - [INFO] Call graph has been constructed
52 2018-Dec-31 15:54:29.510768 - [INFO] Performing analysis: plugin
53 2018-Dec-31 15:54:29.510852 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
54 2018-Dec-31 15:54:29.511340 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction
Removing memory location
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction
Dumping facts
=============
=============


  br label %while.cond, !dbg !19, !phasar.instruction.id !20
Got branch instruction
Dumping facts
=============
=============


  %call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22
Got call instruction
Dumping facts
=============
=============


  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Dumping facts
=============
=============


  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
=============


  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
=============


  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27
Got store instruction
Removing memory location
Dumping facts
=============
=============


  br label %while.cond1, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Dumping facts
=============
=============


  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
=============

Adding line: 11

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Adding line: 11
Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Adding line: 11
Adding line: 11
Adding line: 11

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Adding line: 12
Adding line: 11
Adding line: 11
Adding line: 11

  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Adding line: 12
Adding line: 11
Adding line: 11
Adding line: 11

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Got store instruction
Removing memory location
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction
Dumping facts
=============
=============


  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Got store instruction
Removing memory location
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Adding line: 12
Adding line: 11
Adding line: 11
Adding line: 11

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  %call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22
Got call instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Adding line: 12
Adding line: 11
Adding line: 11
Adding line: 11

  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Adding line: 12
Adding line: 11
Adding line: 11
Adding line: 11

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============

Adding line: 12
Adding line: 11
Adding line: 11
Adding line: 11

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
Dumping facts
=============
  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33
=============


  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Got store instruction
Removing memory location
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27
Got store instruction
Removing memory location
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============

Adding line: 11
Adding line: 11

  br label %while.cond1, !dbg !28, !phasar.instruction.id !29
Got branch instruction
Dumping facts
=============
  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31
  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22
Got call instruction

  br label %while.cond, !dbg !19, !phasar.instruction.id !20
Got branch instruction

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41
Got store instruction
Removing memory location

  %tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23
Got operands checking instruction (icmp)

  store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36

  %call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31

  store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27
Got store instruction
Removing memory location

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction
Removing memory location

  %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46
Got load instruction

  br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24
Got branch instruction

  br label %while.cond1, !dbg !28, !phasar.instruction.id !29
Got branch instruction

  %tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32

  br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39

  br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44
Got branch instruction

  br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33

  ret i32 %0, !dbg !47, !phasar.instruction.id !48worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 9
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%call = call i32 (...) @foo(), !dbg !21, !phasar.instruction.id !22, ID: 6
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br label %while.cond, !dbg !19, !phasar.instruction.id !20, ID: 5
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %rc, align 4, !dbg !40, !phasar.instruction.id !41, ID: 16
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !19, !phasar.instruction.id !23, ID: 7
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
store i32 100, i32* %rc, align 4, !dbg !25, !phasar.instruction.id !27, ID: 9
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46, ID: 18
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28,55 2018-Dec-31 15:54:29.552238 - [INFO] Write results to file
56 2018-Dec-31 15:54:29.552427 - [INFO] Shutdown llvm and the analysis framework.

 !phasar.instruction.id !32, ID: 12


Instruction:
br i1 %tobool, label %while.body, label %while.end5, !dbg !19, !phasar.instruction.id !24, ID: 8
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br label %while.cond1, !dbg !28, !phasar.instruction.id !29, ID: 10
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
br label %while.cond1, !dbg !28, !llvm.loop !37, !phasar.instruction.id !39, ID: 15
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
br label %while.cond, !dbg !19, !llvm.loop !42, !phasar.instruction.id !44, ID: 17
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


Instruction:
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13
Facts:
store i32 42, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 14
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12
br i1 %tobool3, label %while.body4, label %while.end, !dbg !28, !phasar.instruction.id !33, ID: 13


Instruction:
ret i32 %0, !dbg !47, !phasar.instruction.id !48, ID: 19
Facts:
%call2 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !30, !phasar.instruction.id !31, ID: 11
%tobool3 = icmp ne i32 %call2, 0, !dbg !28, !phasar.instruction.id !32, ID: 12


