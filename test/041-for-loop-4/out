0 2018-Dec-30 13:54:43.965212 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-30 13:54:43.965663 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-30 13:54:43.966008 - [INFO] No configuration file is used.
3 2018-Dec-30 13:54:43.966084 - [INFO] Program options have been successfully parsed.
4 2018-Dec-30 13:54:43.966183 - [INFO] Check program options for logical errors.
5 2018-Dec-30 13:54:43.966272 - [INFO] Set-up IR database.
6 2018-Dec-30 13:54:43.972650 - [INFO] Constructed the analysis controller.
7 2018-Dec-30 13:54:43.972763 - [INFO] Found the following IR files for this project: 
8 2018-Dec-30 13:54:43.972824 - [INFO] 	main.ll
9 2018-Dec-30 13:54:43.972882 - [INFO] Check for chosen entry points.
10 2018-Dec-30 13:54:43.972943 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-30 13:54:43.973001 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-30 13:54:43.973061 - [INFO] Preprocess module: main.ll
13 2018-Dec-30 13:54:43.973426 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-30 13:54:43.973561 - [INFO] Running ValueAnnotationPass
15 2018-Dec-30 13:54:43.974010 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-30 13:54:43.974073 - [INFO] Allocated Types    : 1
17 2018-Dec-30 13:54:43.974146 - [INFO] Allocation Sites   : 4
18 2018-Dec-30 13:54:43.974204 - [INFO] Basic Blocks       : 9
19 2018-Dec-30 13:54:43.974261 - [INFO] Calls Sites        : 4
20 2018-Dec-30 13:54:43.974318 - [INFO] Functions          : 3
21 2018-Dec-30 13:54:43.974375 - [INFO] Globals            : 1
22 2018-Dec-30 13:54:43.974432 - [INFO] Global Pointer     : 1
23 2018-Dec-30 13:54:43.974490 - [INFO] Instructions       : 33
24 2018-Dec-30 13:54:43.974547 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-30 13:54:43.974604 - [INFO] Store Instructions : 6
26 2018-Dec-30 13:54:43.974661 - [INFO]  
27 2018-Dec-30 13:54:43.974743 - [INFO]   i32
28 2018-Dec-30 13:54:43.975364 - [DEBUG] Analyzing function: main
29 2018-Dec-30 13:54:43.975700 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-30 13:54:43.975766 - [INFO] Construct type hierarchy
31 2018-Dec-30 13:54:43.975826 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-30 13:54:43.976027 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-30 13:54:43.976096 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-30 13:54:43.976158 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-30 13:54:43.976270 - [DEBUG] Walking in function: main
36 2018-Dec-30 13:54:43.976357 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2018-Dec-30 13:54:43.976748 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-30 13:54:43.976808 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-30 13:54:43.976895 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-30 13:54:43.976958 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-30 13:54:43.977022 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7
42 2018-Dec-30 13:54:43.977347 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-30 13:54:43.977406 - [DEBUG] Target name: llvm.dbg.declare
44 2018-Dec-30 13:54:43.977481 - [DEBUG] Walking in function: llvm.dbg.declare
45 2018-Dec-30 13:54:43.977543 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2018-Dec-30 13:54:43.977607 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39, ID: 13
47 2018-Dec-30 13:54:43.977928 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-30 13:54:43.977987 - [DEBUG] Target name: llvm.dbg.declare
49 2018-Dec-30 13:54:43.978061 - [DEBUG] Walking in function: llvm.dbg.declare
50 2018-Dec-30 13:54:43.978123 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2018-Dec-30 13:54:43.978186 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
52 2018-Dec-30 13:54:43.978573 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-30 13:54:43.978632 - [DEBUG] Target name: getenv
54 2018-Dec-30 13:54:43.978713 - [DEBUG] Walking in function: getenv
55 2018-Dec-30 13:54:43.978775 - [DEBUG] Function already visited or only declaration: getenv
56 2018-Dec-30 13:54:43.978871 - [INFO] Call graph has been constructed
57 2018-Dec-30 13:54:43.978933 - [INFO] Performing analysis: plugin
58 2018-Dec-30 13:54:43.978999 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
59 2018-Dec-30 13:54:43.979481 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %i = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %j = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24
Got call instruction

  store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25
Got store instruction

  br label %for.cond, !dbg !26, !phasar.instruction.id !27
Got branch instruction

  %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30
Got load instruction

  %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39
Got call instruction

  store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40
Got store instruction

  br label %for.cond1, !dbg !41, !phasar.instruction.id !42
Got branch instruction

  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
Got load instruction

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
Got call instruction
Adding call instruction fact
Adding line: 10

  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
Got operands checking instruction (icmp)
Adding fact
Adding line: 10
Adding line: 10

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Got branch instruction
Adding conditional branch instruction fact
Adding line: 10
Adding line: 10
Adding line: 10

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Got branch instruction
Adding conditional branch instruction fact
Adding line: 10
Adding line: 10
Adding line: 10

  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10

  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10

  br label %for.inc, !dbg !57, !phasar.instruction.id !58
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10

  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10

  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  br label %for.inc4, !dbg !67, !phasar.instruction.id !68
Got branch instruction
Adding line: 10
Adding line: 10

  %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70
Got load instruction
Adding line: 10
Adding line: 10

  %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71
Got operands checking instruction (add)
Adding line: 10
Adding line: 10

  store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72
Got store instruction
Adding line: 10
Adding line: 10

  br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76
Got branch instruction
Adding line: 10
Adding line: 10

  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction

  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
Got operands checking instruction (icmp)
Adding fact

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Got branch instruction
Adding conditional branch instruction fact

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Got branch instruction
Adding conditional branch instruction fact

  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54

  br label %for.inc4, !dbg !67, !phasar.instruction.id !68
Got branch instruction

  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56

  br label %for.inc, !dbg !57, !phasar.instruction.id !58

  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60

  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61

  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62

  br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66

  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70
Got load instruction

  %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71
Got operands checking instruction (add)

  store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72
Got store instruction

  br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76
Got branch instruction

  %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30
Got load instruction
Adding line: 10
Adding line: 10

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding line: 10
Adding line: 10

  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding line: 10
Adding line: 10

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding line: 10
Adding line: 10

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39
Got call instruction
Adding line: 10
Adding line: 10

  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Adding line: 10
Adding line: 10

  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  br label %for.inc4, !dbg !67, !phasar.instruction.id !68
Got branch instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40
Got store instruction
Adding line: 10
Adding line: 10

  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70
Got load instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  br label %for.cond1, !dbg !41, !phasar.instruction.id !42
Got branch instruction

  br label %for.inc, !dbg !57, !phasar.instruction.id !58
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71
Got operands checking instruction (add)
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72
Got store instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76
Got branch instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30
Got load instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 10

  %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39
Got call instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Adding load instruction fact
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 15
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10

  store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40
Got store instruction
Removing store instruction
Adding line: 11
Adding line: 10
Adding line: 10
Adding line: 10
Adding line: 11
Adding line: 10
Adding line: 10

  br label %for.cond1, !dbg !41, !phasar.instruction.id !42
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %i = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47

  store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40
Got store instruction
Removing store instruction

  store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25
Got store instruction

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction

  %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)

  call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24
Got call instruction

  %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30
Got load instruction

  br label %for.cond, !dbg !26, !phasar.instruction.id !27
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39
Got call instruction

  %j = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45

  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Adding load instruction fact

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction

  br label %for.cond1, !dbg !41, !phasar.instruction.id !42
Got branch instruction

  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49

  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54

  %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70
Got load instruction

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51

  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60

  br label %for.inc, !dbg !57, !phasar.instruction.id !58

  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61

  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62

  br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66

  br label %for.inc4, !dbg !67, !phasar.instruction.id !68
Got branch instruction

  %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71
Got operands checking instruction (add)

  store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72
Got store instruction

  br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76
Got branch instruction

  ret i32 %5, !dbg !79, !phasar.instruction.id !80worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 17
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40, ID: 14
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30, ID: 10
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.cond, !dbg !26, !phasar.instruction.id !27, ID: 9
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39, ID: 13
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78, ID: 32
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34, ID: 12
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.cond1, !dbg !41, !phasar.instruction.id !42, ID: 15
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24


Instruction:
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70, ID: 28
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.inc, !dbg !57, !phasar.instruction.id !58, ID: 22
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66, ID: 26
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.inc4, !dbg !67, !phasar.instruction.id !68, ID: 27
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71, ID: 29
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72, ID: 30
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, 60 2018-Dec-30 13:54:44.072614 - [INFO] Write results to file
61 2018-Dec-30 13:54:44.072799 - [INFO] Shutdown llvm and the analysis framework.

!phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76, ID: 31
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
ret i32 %5, !dbg !79, !phasar.instruction.id !80, ID: 33
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78, ID: 32
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


