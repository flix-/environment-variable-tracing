0 2018-Dec-29 21:15:58.151997 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-29 21:15:58.152429 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-29 21:15:58.152780 - [INFO] No configuration file is used.
3 2018-Dec-29 21:15:58.152858 - [INFO] Program options have been successfully parsed.
4 2018-Dec-29 21:15:58.152957 - [INFO] Check program options for logical errors.
5 2018-Dec-29 21:15:58.153047 - [INFO] Set-up IR database.
6 2018-Dec-29 21:15:58.157305 - [INFO] Constructed the analysis controller.
7 2018-Dec-29 21:15:58.157419 - [INFO] Found the following IR files for this project: 
8 2018-Dec-29 21:15:58.157480 - [INFO] 	main.ll
9 2018-Dec-29 21:15:58.157538 - [INFO] Check for chosen entry points.
10 2018-Dec-29 21:15:58.157599 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-29 21:15:58.157657 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-29 21:15:58.157717 - [INFO] Preprocess module: main.ll
13 2018-Dec-29 21:15:58.158062 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-29 21:15:58.158206 - [INFO] Running ValueAnnotationPass
15 2018-Dec-29 21:15:58.158498 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-29 21:15:58.158562 - [INFO] Allocated Types    : 1
17 2018-Dec-29 21:15:58.158625 - [INFO] Allocation Sites   : 2
18 2018-Dec-29 21:15:58.158683 - [INFO] Basic Blocks       : 4
19 2018-Dec-29 21:15:58.158740 - [INFO] Calls Sites        : 2
20 2018-Dec-29 21:15:58.158797 - [INFO] Functions          : 3
21 2018-Dec-29 21:15:58.158854 - [INFO] Globals            : 1
22 2018-Dec-29 21:15:58.158911 - [INFO] Global Pointer     : 1
23 2018-Dec-29 21:15:58.158968 - [INFO] Instructions       : 12
24 2018-Dec-29 21:15:58.159025 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-29 21:15:58.159082 - [INFO] Store Instructions : 2
26 2018-Dec-29 21:15:58.159139 - [INFO]  
27 2018-Dec-29 21:15:58.159220 - [INFO]   i32
28 2018-Dec-29 21:15:58.159576 - [DEBUG] Analyzing function: main
29 2018-Dec-29 21:15:58.159792 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-29 21:15:58.159855 - [INFO] Construct type hierarchy
31 2018-Dec-29 21:15:58.159915 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-29 21:15:58.160069 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-29 21:15:58.160138 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-29 21:15:58.160201 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-29 21:15:58.160308 - [DEBUG] Walking in function: main
36 2018-Dec-29 21:15:58.160394 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
37 2018-Dec-29 21:15:58.160683 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-29 21:15:58.160743 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-29 21:15:58.160831 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-29 21:15:58.160894 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-29 21:15:58.160959 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
42 2018-Dec-29 21:15:58.161227 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-29 21:15:58.161286 - [DEBUG] Target name: getenv
44 2018-Dec-29 21:15:58.161366 - [DEBUG] Walking in function: getenv
45 2018-Dec-29 21:15:58.161428 - [DEBUG] Function already visited or only declaration: getenv
46 2018-Dec-29 21:15:58.161517 - [INFO] Call graph has been constructed
47 2018-Dec-29 21:15:58.161581 - [INFO] Performing analysis: plugin
48 2018-Dec-29 21:15:58.161647 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
49 2018-Dec-29 21:15:58.162139 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction

  br label %do.body, !dbg !19, !llvm.loop !20, !phasar.instruction.id !22
Got branch instruction

  store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25
Got store instruction

  br label %do.cond, !dbg !26, !phasar.instruction.id !27
Got branch instruction

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
Got call instruction
Adding call instruction fact
Adding line: 11

  %tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact
Adding line: 11
Adding line: 11

  br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31
Got branch instruction
Adding conditional branch instruction fact
Adding line: 11
Adding line: 11
Adding line: 11

  br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31
Got branch instruction
Adding conditional branch instruction fact
Adding line: 11
Adding line: 11
Adding line: 11

  %0 = load i32, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !33
Got load instruction
Adding line: 11
Adding line: 11

  %tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30
Got operands checking instruction (icmp)
Adding fact

  br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31
Got branch instruction
Adding conditional branch instruction fact

  br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31
Got branch instruction
Adding conditional branch instruction fact

  store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 11

  %0 = load i32, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !33
Got load instruction

  br label %do.cond, !dbg !26, !phasar.instruction.id !27
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 11

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 11

  %tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 11

  br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 11

  br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 11

  store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25

  %0 = load i32, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !33
Got load instruction
Adding load instruction fact
Adding line: 11
Adding line: 10
Adding line: 11
Adding line: 13

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18
Got call instruction

  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  br label %do.body, !dbg !19, !llvm.loop !20, !phasar.instruction.id !22
Got branch instruction

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  br label %do.cond, !dbg !26, !phasar.instruction.id !27

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29

  store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14
Got store instruction

  %tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30

  %0 = load i32, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !33
Got load instruction
Adding load instruction fact

  br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31

  ret i32 %0, !dbg !34, !phasar.instruction.id !35worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 5
worklist size: 6
worklist size: 6
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4
Facts:
	EMPTY


Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
br label %do.body, !dbg !19, !llvm.loop !20, !phasar.instruction.id !22, ID: 5
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
br label %do.cond, !dbg !26, !phasar.instruction.id !27, ID: 7
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30, ID: 9
br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31, ID: 10


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30, ID: 9
br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31, ID: 10


Instruction:
store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30, ID: 9
br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31, ID: 10


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30, ID: 9
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30, ID: 9
br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31, ID: 10


Instruction:
%0 = load i32, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !33, ID: 11
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30, ID: 9
br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31, ID: 10


Instruction:
br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31, ID: 10
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30, ID: 9
br i1 %tobool, label %do.body, label %do.end, !dbg !26, !llvm.loop !20, !phasar.instruction.id !31, ID: 10

50 2018-Dec-29 21:15:58.175261 - [INFO] Write results to file
51 2018-Dec-29 21:15:58.175436 - [INFO] Shutdown llvm and the analysis framework.


Instruction:
ret i32 %0, !dbg !34, !phasar.instruction.id !35, ID: 12
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !29, ID: 8
store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6
%tobool = icmp ne i32 %call, 0, !dbg !26, !phasar.instruction.id !30, ID: 9
%0 = load i32, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !33, ID: 11


