0 2019-Jan-05 14:31:18.430767 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 14:31:18.431173 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 14:31:18.431518 - [INFO] No configuration file is used.
3 2019-Jan-05 14:31:18.431594 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 14:31:18.431684 - [INFO] Check program options for logical errors.
5 2019-Jan-05 14:31:18.431774 - [INFO] Set-up IR database.
6 2019-Jan-05 14:31:18.435769 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 14:31:18.435875 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 14:31:18.435936 - [INFO] 	main.ll
9 2019-Jan-05 14:31:18.435995 - [INFO] Check for chosen entry points.
10 2019-Jan-05 14:31:18.436056 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 14:31:18.436114 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 14:31:18.436174 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 14:31:18.436514 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 14:31:18.436639 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 14:31:18.436935 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 14:31:18.436998 - [INFO] Allocated Types    : 1
17 2019-Jan-05 14:31:18.437062 - [INFO] Allocation Sites   : 3
18 2019-Jan-05 14:31:18.437120 - [INFO] Basic Blocks       : 1
19 2019-Jan-05 14:31:18.437177 - [INFO] Calls Sites        : 3
20 2019-Jan-05 14:31:18.437235 - [INFO] Functions          : 3
21 2019-Jan-05 14:31:18.437363 - [INFO] Globals            : 1
22 2019-Jan-05 14:31:18.437421 - [INFO] Global Pointer     : 1
23 2019-Jan-05 14:31:18.437479 - [INFO] Instructions       : 14
24 2019-Jan-05 14:31:18.437536 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 14:31:18.437594 - [INFO] Store Instructions : 3
26 2019-Jan-05 14:31:18.437651 - [INFO]  
27 2019-Jan-05 14:31:18.437726 - [INFO]   i32
28 2019-Jan-05 14:31:18.438106 - [DEBUG] Analyzing function: main
29 2019-Jan-05 14:31:18.438341 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 14:31:18.438410 - [INFO] Construct type hierarchy
31 2019-Jan-05 14:31:18.438470 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 14:31:18.438619 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 14:31:18.438688 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 14:31:18.438750 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 14:31:18.438860 - [DEBUG] Walking in function: main
36 2019-Jan-05 14:31:18.438945 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2019-Jan-05 14:31:18.439238 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 14:31:18.439298 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 14:31:18.439384 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 14:31:18.439447 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 14:31:18.439511 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
42 2019-Jan-05 14:31:18.439772 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 14:31:18.439831 - [DEBUG] Target name: getenv
44 2019-Jan-05 14:31:18.439911 - [DEBUG] Walking in function: getenv
45 2019-Jan-05 14:31:18.439974 - [DEBUG] Function already visited or only declaration: getenv
46 2019-Jan-05 14:31:18.440037 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29, ID: 11
47 2019-Jan-05 14:31:18.440256 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 14:31:18.440315 - [DEBUG] Target name: llvm.dbg.declare
49 2019-Jan-05 14:31:18.440389 - [DEBUG] Walking in function: llvm.dbg.declare
50 2019-Jan-05 14:31:18.440451 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2019-Jan-05 14:31:18.440514 - [INFO] Call graph has been constructed
52 2019-Jan-05 14:31:18.440592 - [INFO] Performing analysis: plugin
53 2019-Jan-05 14:31:18.440691 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
54 2019-Jan-05 14:31:18.441188 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============

Added line number: 8

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============

Added line number: 8
Added line number: 8

  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============

Added line number: 8
Added line number: 8
Added line number: 8

  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
Got operands checking instruction (select)
Adding fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============

Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8

  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============

Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8

  call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29
Got call instruction
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============

Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8

  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
=============

Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 9

  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
=============

Added line number: 8
Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 9

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============


  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============


  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
Got operands checking instruction (select)
Adding fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============


  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29
Got call instruction
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============


  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
=============


  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
=============


  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
Got operands checking instruction (zext)
Adding fact

  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts

  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
Got operands checking instruction (select)
Adding fact

  call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29
Got call instruction

  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact

  ret i32 0, !dbg !33, !phasar.instruction.id !34worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
Facts:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32, ID: 13
Facts:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9
%1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
Facts:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9


Instruction:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9
Facts:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelem55 2019-Jan-05 14:31:18.465349 - [INFO] Write results to file
56 2019-Jan-05 14:31:18.465524 - [INFO] Shutdown llvm and the analysis framework.

entptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9


Instruction:
ret i32 0, !dbg !33, !phasar.instruction.id !34, ID: 14
Facts:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32, ID: 13
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9
%1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31, ID: 12


