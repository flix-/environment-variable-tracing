0 2018-Dec-30 13:54:38.300553 - [DEBUG] Set-up the command-line parameters
1 2018-Dec-30 13:54:38.300982 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2018-Dec-30 13:54:38.301346 - [INFO] No configuration file is used.
3 2018-Dec-30 13:54:38.301424 - [INFO] Program options have been successfully parsed.
4 2018-Dec-30 13:54:38.301517 - [INFO] Check program options for logical errors.
5 2018-Dec-30 13:54:38.301608 - [INFO] Set-up IR database.
6 2018-Dec-30 13:54:38.306812 - [INFO] Constructed the analysis controller.
7 2018-Dec-30 13:54:38.306926 - [INFO] Found the following IR files for this project: 
8 2018-Dec-30 13:54:38.306988 - [INFO] 	main.ll
9 2018-Dec-30 13:54:38.307048 - [INFO] Check for chosen entry points.
10 2018-Dec-30 13:54:38.307109 - [INFO] link all llvm modules into a single module for WPA ...

11 2018-Dec-30 13:54:38.307168 - [INFO] link all llvm modules into a single module for WPA ended

12 2018-Dec-30 13:54:38.307228 - [INFO] Preprocess module: main.ll
13 2018-Dec-30 13:54:38.307573 - [INFO] Running GeneralStatisticsPass
14 2018-Dec-30 13:54:38.307713 - [INFO] Running ValueAnnotationPass
15 2018-Dec-30 13:54:38.308055 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2018-Dec-30 13:54:38.308119 - [INFO] Allocated Types    : 1
17 2018-Dec-30 13:54:38.308183 - [INFO] Allocation Sites   : 3
18 2018-Dec-30 13:54:38.308241 - [INFO] Basic Blocks       : 4
19 2018-Dec-30 13:54:38.308298 - [INFO] Calls Sites        : 5
20 2018-Dec-30 13:54:38.308356 - [INFO] Functions          : 5
21 2018-Dec-30 13:54:38.308414 - [INFO] Globals            : 1
22 2018-Dec-30 13:54:38.308472 - [INFO] Global Pointer     : 1
23 2018-Dec-30 13:54:38.308529 - [INFO] Instructions       : 21
24 2018-Dec-30 13:54:38.308587 - [INFO] Memory Intrinsics  : 0
25 2018-Dec-30 13:54:38.308645 - [INFO] Store Instructions : 3
26 2018-Dec-30 13:54:38.308703 - [INFO]  
27 2018-Dec-30 13:54:38.308780 - [INFO]   i32
28 2018-Dec-30 13:54:38.309280 - [DEBUG] Analyzing function: main
29 2018-Dec-30 13:54:38.309541 - [INFO] Reconstruct the class hierarchy.
30 2018-Dec-30 13:54:38.309611 - [INFO] Construct type hierarchy
31 2018-Dec-30 13:54:38.309672 - [DEBUG] Analyse types in module: main.ll
32 2018-Dec-30 13:54:38.309827 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2018-Dec-30 13:54:38.309896 - [INFO] Reconstruction of class hierarchy completed.
34 2018-Dec-30 13:54:38.309958 - [INFO] Starting CallGraphAnalysisType: OTF
35 2018-Dec-30 13:54:38.310066 - [DEBUG] Walking in function: main
36 2018-Dec-30 13:54:38.310152 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2018-Dec-30 13:54:38.310475 - [DEBUG] Found 1 possible target(s)
38 2018-Dec-30 13:54:38.310535 - [DEBUG] Target name: llvm.dbg.declare
39 2018-Dec-30 13:54:38.310620 - [DEBUG] Walking in function: llvm.dbg.declare
40 2018-Dec-30 13:54:38.310684 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2018-Dec-30 13:54:38.310749 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
42 2018-Dec-30 13:54:38.311043 - [DEBUG] Found 1 possible target(s)
43 2018-Dec-30 13:54:38.311102 - [DEBUG] Target name: getenv
44 2018-Dec-30 13:54:38.311183 - [DEBUG] Walking in function: getenv
45 2018-Dec-30 13:54:38.311246 - [DEBUG] Function already visited or only declaration: getenv
46 2018-Dec-30 13:54:38.311310 - [DEBUG] Found static call-site: %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2018-Dec-30 13:54:38.311548 - [DEBUG] Found 1 possible target(s)
48 2018-Dec-30 13:54:38.311607 - [DEBUG] Target name: foo
49 2018-Dec-30 13:54:38.311685 - [DEBUG] Walking in function: foo
50 2018-Dec-30 13:54:38.311747 - [DEBUG] Function already visited or only declaration: foo
51 2018-Dec-30 13:54:38.311812 - [DEBUG] Found static call-site: %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
52 2018-Dec-30 13:54:38.312065 - [DEBUG] Found 1 possible target(s)
53 2018-Dec-30 13:54:38.312125 - [DEBUG] Target name: bar
54 2018-Dec-30 13:54:38.312225 - [DEBUG] Walking in function: bar
55 2018-Dec-30 13:54:38.312288 - [DEBUG] Function already visited or only declaration: bar
56 2018-Dec-30 13:54:38.312353 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39, ID: 18
57 2018-Dec-30 13:54:38.312601 - [DEBUG] Found 1 possible target(s)
58 2018-Dec-30 13:54:38.312660 - [DEBUG] Target name: llvm.dbg.declare
59 2018-Dec-30 13:54:38.312734 - [DEBUG] Walking in function: llvm.dbg.declare
60 2018-Dec-30 13:54:38.312797 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2018-Dec-30 13:54:38.312860 - [INFO] Call graph has been constructed
62 2018-Dec-30 13:54:38.312922 - [INFO] Performing analysis: plugin
63 2018-Dec-30 13:54:38.312989 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so'
64 2018-Dec-30 13:54:38.313471 - [INFO] Solving plugin: mono
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/EnvironmentVariableTainting/libEnvironmentVariableTainting.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact
Adding line: 8

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
Got operands checking instruction (icmp)
Adding fact
Adding line: 8
Adding line: 8

  br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Adding line: 8
Adding line: 8
Adding line: 8

  br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact
Adding line: 8
Adding line: 8
Adding line: 8

  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  br label %land.end, !phasar.instruction.id !33
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34
Got phi node instruction
Adding phi node instruction fact (constant)
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
Got operands checking instruction (zext)
Adding fact
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
Got store instruction
Adding store instruction
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
Got call instruction
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8

  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 9

  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
Got store instruction
Adding store instruction
Adding line: 9
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 8
Adding line: 9

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
Got operands checking instruction (icmp)
Adding fact

  br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact

  br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact

  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26

  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27

  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29

  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29

  %0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34
Got phi node instruction
Adding phi node instruction fact (constant)

  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32

  br label %land.end, !phasar.instruction.id !33

  %0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34
Got phi node instruction
Adding phi node instruction fact (constant)

  %land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
Got operands checking instruction (zext)
Adding fact

  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
Got store instruction
Adding store instruction

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
Got call instruction

  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact

  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
Got store instruction
Adding store instruction

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42
Got store instruction
Adding store instruction

  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
Got store instruction
Adding store instruction

  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22
Got operands checking instruction (icmp)
Adding fact

  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction

  br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24
Got branch instruction
Adding conditional branch instruction fact

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39
Got call instruction

  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26

  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27

  %land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35
Got operands checking instruction (zext)
Adding fact

  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29

  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32

  br label %land.end, !phasar.instruction.id !33

  %0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34
Got phi node instruction
Adding phi node instruction fact (constant)

  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41
Got load instruction
Adding load instruction fact

  ret i32 0, !dbg !43, !phasar.instruction.id !44worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 17
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42, ID: 20
Facts:
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19


Instruction:
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39, ID: 18
Facts:
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8


Instruction:
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10


Instruction:
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10


Instruction:
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 165 2018-Dec-30 13:54:38.348449 - [INFO] Write results to file
66 2018-Dec-30 13:54:38.348644 - [INFO] Shutdown llvm and the analysis framework.

2


Instruction:
br label %land.end, !phasar.instruction.id !33, ID: 14
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13


Instruction:
%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15
Facts:
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19
Facts:
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15


Instruction:
ret i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21
Facts:
store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42, ID: 20
store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7
%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9
%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10
%land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16
%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12
%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13
%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15
%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19


