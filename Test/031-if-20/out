PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !19, metadata !20), !dbg !21, !phasar.instruction.id !22, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a1 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %nt = alloca i32, align 4, !phasar.instruction.id !17, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %taint, metadata !23, metadata !20), !dbg !24, !phasar.instruction.id !25, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !18, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 false, label %if.then, label %if.else, !dbg !29, !phasar.instruction.id !36, ID: 15 in function: main
D:	%cmp = icmp eq i32 %0, 0, !dbg !32, !phasar.instruction.id !33, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

--- IFDS START RESULT RECORD ---
N: br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%cmp = icmp eq i32 %0, 0, !dbg !32, !phasar.instruction.id !33, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %taint, align 4, !dbg !29, !phasar.instruction.id !31, ID: 12 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %cmp = icmp eq i32 %0, 0, !dbg !32, !phasar.instruction.id !33, ID: 13 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 25 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !20), !dbg !40, !phasar.instruction.id !41, ID: 17

D:	store i32 2, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 18
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a1, metadata !45, metadata !20), !dbg !47, !phasar.instruction.id !48, ID: 20

D:	store i32 3, i32* %a1, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
A:	%a1 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

--- IFDS START RESULT RECORD ---
N: br label %if.end, !dbg !43, !phasar.instruction.id !44, ID: 19 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 2, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 18
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !20), !dbg !40, !phasar.instruction.id !41, ID: 17

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

--- IFDS START RESULT RECORD ---
N: br label %if.end, !phasar.instruction.id !50, ID: 22 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata i32* %a1, metadata !45, metadata !20), !dbg !47, !phasar.instruction.id !48, ID: 20

D:	store i32 3, i32* %a1, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
A:	%a1 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

--- IFDS START RESULT RECORD ---
N: br i1 true, label %if.then, label %if.else, !dbg !34, !phasar.instruction.id !37, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	%cmp = icmp eq i32 %0, 0, !dbg !32, !phasar.instruction.id !33, ID: 13

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !20), !dbg !40, !phasar.instruction.id !41, ID: 17 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%cmp = icmp eq i32 %0, 0, !dbg !32, !phasar.instruction.id !33, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 2, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 18 in function: main
D:	%cmp = icmp eq i32 %0, 0, !dbg !32, !phasar.instruction.id !33, ID: 13

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !20), !dbg !40, !phasar.instruction.id !41, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a1, metadata !45, metadata !20), !dbg !47, !phasar.instruction.id !48, ID: 20 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%cmp = icmp eq i32 %0, 0, !dbg !32, !phasar.instruction.id !33, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 3, i32* %a1, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a1, metadata !45, metadata !20), !dbg !47, !phasar.instruction.id !48, ID: 20

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%cmp = icmp eq i32 %0, 0, !dbg !32, !phasar.instruction.id !33, ID: 13

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %nt, metadata !51, metadata !20), !dbg !52, !phasar.instruction.id !53, ID: 23 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	br i1 %cmp, label %cond.true, label %cond.false, !dbg !34, !phasar.instruction.id !35, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !20), !dbg !40, !phasar.instruction.id !41, ID: 17

D:	store i32 2, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 18
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a1, metadata !45, metadata !20), !dbg !47, !phasar.instruction.id !48, ID: 20

D:	store i32 3, i32* %a1, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
A:	%a1 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %nt, align 4, !dbg !52, !phasar.instruction.id !54, ID: 24 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 3, i32* %a1, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
A:	%a1 = alloca i32, align 4, !phasar.instruction.id !16, ID[TRACK] Searching end of tainted branch label for BB: entry
[TRACK] End of tainted block label: if.end
[TRACK] End of tainted branch label: if.end
[TRACK] Searching end of tainted branch label for BB: entry
[TRACK] End of tainted block label: if.end
[TRACK] End of tainted branch label: if.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1550311260-trace.txt
: 5

D:	call void @llvm.dbg.declare(metadata i32* %a1, metadata !45, metadata !20), !dbg !47, !phasar.instruction.id !48, ID: 20

D:	store i32 2, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 18
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !20), !dbg !40, !phasar.instruction.id !41, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

--- IFDS START RESULT RECORD ---
N: ret i32 %1, !dbg !57, !phasar.instruction.id !58, ID: 26 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !26, !phasar.instruction.id !27, ID: 10

D:	store i32 %call, i32* %taint, align 4, !dbg !24, !phasar.instruction.id !28, ID: 11
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !20), !dbg !40, !phasar.instruction.id !41, ID: 17

D:	store i32 2, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 18
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a1, metadata !45, metadata !20), !dbg !47, !phasar.instruction.id !48, ID: 20

D:	store i32 3, i32* %a1, align 4, !dbg !47, !phasar.instruction.id !49, ID: 21
A:	%a1 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5


