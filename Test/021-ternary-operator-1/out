0 2019-Jan-05 22:32:17.169903 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 22:32:17.170318 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 22:32:17.170667 - [INFO] No configuration file is used.
3 2019-Jan-05 22:32:17.170743 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 22:32:17.170839 - [INFO] Check program options for logical errors.
5 2019-Jan-05 22:32:17.170929 - [INFO] Set-up IR database.
6 2019-Jan-05 22:32:17.174989 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 22:32:17.175098 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 22:32:17.175159 - [INFO] 	main.ll
9 2019-Jan-05 22:32:17.175218 - [INFO] Check for chosen entry points.
10 2019-Jan-05 22:32:17.175279 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 22:32:17.175337 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 22:32:17.175398 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 22:32:17.175734 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 22:32:17.175865 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 22:32:17.176150 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 22:32:17.176214 - [INFO] Allocated Types    : 1
17 2019-Jan-05 22:32:17.176278 - [INFO] Allocation Sites   : 3
18 2019-Jan-05 22:32:17.176335 - [INFO] Basic Blocks       : 1
19 2019-Jan-05 22:32:17.176393 - [INFO] Calls Sites        : 3
20 2019-Jan-05 22:32:17.176450 - [INFO] Functions          : 3
21 2019-Jan-05 22:32:17.176508 - [INFO] Globals            : 1
22 2019-Jan-05 22:32:17.176565 - [INFO] Global Pointer     : 1
23 2019-Jan-05 22:32:17.176622 - [INFO] Instructions       : 14
24 2019-Jan-05 22:32:17.176680 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 22:32:17.176737 - [INFO] Store Instructions : 3
26 2019-Jan-05 22:32:17.176794 - [INFO]  
27 2019-Jan-05 22:32:17.176868 - [INFO]   i32
28 2019-Jan-05 22:32:17.177234 - [DEBUG] Analyzing function: main
29 2019-Jan-05 22:32:17.177462 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 22:32:17.177525 - [INFO] Construct type hierarchy
31 2019-Jan-05 22:32:17.177584 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 22:32:17.177757 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 22:32:17.177828 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 22:32:17.177890 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 22:32:17.178000 - [DEBUG] Walking in function: main
36 2019-Jan-05 22:32:17.178086 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
37 2019-Jan-05 22:32:17.178385 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 22:32:17.178445 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 22:32:17.178531 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 22:32:17.178593 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 22:32:17.178657 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
42 2019-Jan-05 22:32:17.178924 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 22:32:17.178982 - [DEBUG] Target name: getenv
44 2019-Jan-05 22:32:17.179062 - [DEBUG] Walking in function: getenv
45 2019-Jan-05 22:32:17.179125 - [DEBUG] Function already visited or only declaration: getenv
46 2019-Jan-05 22:32:17.179189 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29, ID: 11
47 2019-Jan-05 22:32:17.179408 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 22:32:17.179467 - [DEBUG] Target name: llvm.dbg.declare
49 2019-Jan-05 22:32:17.179541 - [DEBUG] Walking in function: llvm.dbg.declare
50 2019-Jan-05 22:32:17.179603 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2019-Jan-05 22:32:17.179665 - [INFO] Call graph has been constructed
52 2019-Jan-05 22:32:17.179743 - [INFO] Performing analysis: plugin
53 2019-Jan-05 22:32:17.179810 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/MonoIntraEnvironmentVariableTracing/libMonoIntraEnvironmentVariableTracing.so'
54 2019-Jan-05 22:32:17.180304 - [INFO] Solving plugin: monoIntraEnvironmentVariableTracing
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/MonoIntraEnvironmentVariableTracing/libMonoIntraEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
=============

Added line number: 8

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
=============

Added line number: 8
Added line number: 8

  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
=============

Added line number: 8
Added line number: 8
Added line number: 8

  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
Got operands checking instruction (select)
Adding fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============

Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8

  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============

Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8

  call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29
Got call instruction
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============

Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8

  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
=============

Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 9

  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 8
Added line number: 9

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
=============


  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
Got operands checking instruction (zext)
Adding fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
=============


  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
Got operands checking instruction (select)
Adding fact
Dumping facts
=============
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============


  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29
Got call instruction
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
=============


  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
=============


  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
=============


  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %a = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24
Got operands checking instruction (zext)
Adding fact

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15
Got store instruction
Removed 0 memory locations from facts

  %cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23
Got operands checking instruction (icmp)
Adding fact

  call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29
Got call instruction

  %cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25
Got operands checking instruction (select)
Adding fact

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19
Got call instruction

  %1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31
Got load instruction
Adding load instruction fact

  ret i32 0, !dbg !33, !phasar.instruction.id !34worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32, ID: 13
Facts:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9
%1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
Facts:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9


Instruction:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !27, metadata !17), !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9


Instruction:
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9
Facts:
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5
Facts:
	EMPTY


Instruction:
%1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !ph55 2019-Jan-05 22:32:17.204866 - [INFO] Write results to file
56 2019-Jan-05 22:32:17.205056 - [INFO] Shutdown llvm and the analysis framework.

asar.instruction.id !21, ID: 6
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9


Instruction:
ret i32 0, !dbg !33, !phasar.instruction.id !34, ID: 14
Facts:
store i32 %1, i32* %a, align 4, !dbg !28, !phasar.instruction.id !32, ID: 13
store i32 %cond, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !26, ID: 10
%0 = zext i1 %cmp to i64, !dbg !20, !phasar.instruction.id !24, ID: 8
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6
%cmp = icmp eq i32 %call, 0, !dbg !22, !phasar.instruction.id !23, ID: 7
%cond = select i1 %cmp, i32 0, i32 1, !dbg !20, !phasar.instruction.id !25, ID: 9
%1 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31, ID: 12


