PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
Line numbers output file: main-line-numbers.txt
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK]   %retval = alloca %struct.s2, align 8, !phasar.instruction.id !24
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Added patchable memory location (caller <- callee)
[TRACK] Source:
[TRACK]   %retval = alloca %struct.s2, align 8, !phasar.instruction.id !24
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK]   %call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Patched memory location (ret/store)
[TRACK] Source:
[TRACK]   %call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK]   %s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK]   %t13 = alloca i8*, align 8, !phasar.instruction.id !15
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34
[TRACK] Destination:
[TRACK]   %retval = alloca %struct.s2, align 8, !phasar.instruction.id !24
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34
[TRACK] Added patchable memory location (caller <- callee)
[TRACK] Source:
[TRACK]   %retval = alloca %struct.s2, align 8, !phasar.instruction.id !24
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34
[TRACK] Destination:
[TRACK]   %call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34
[TRACK] Patched memory location (ret/store)
[TRACK] Source:
[TRACK]   %call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34
[TRACK] Destination:
[TRACK]   %s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34
[TRACK] Destination:
[TRACK]   %t2 = alloca i8*, align 8, !phasar.instruction.id !16
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %retval = alloca %struct.s2, align 8, !phasar.instruction.id !24, ID: 1 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 16, i32 8, i1 false), !dbg !37, !phasar.instruction.id !41, ID: 10 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32, ID: 4
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35, ID: 21 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32, ID: 4 in function: foo
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 19 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !25, metadata !26), !dbg !27, !phasar.instruction.id !28, ID: 2 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6 in function: foo
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 3 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 3

--- IFDS START RESULT RECORD ---
N: %s21 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !37, !phasar.instruction.id !38, ID: 7 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32, ID: 4
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %0 = bitcast %struct.s2* %retval to i8*, !dbg !37, !phasar.instruction.id !39, ID: 8 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32, ID: 4
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %1 = bitcast %struct.s2* %s21 to i8*, !dbg !37, !phasar.instruction.id !40, ID: 9 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32, ID: 4
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %2 = bitcast %struct.s2* %retval to { i8*, i8* }*, !dbg !42, !phasar.instruction.id !43, ID: 11 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !24, ID: 1
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32, ID: 4
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !24, ID: 1
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %3 = load { i8*, i8* }, { i8*, i8* }* %2, align 8, !dbg !42, !phasar.instruction.id !44, ID: 12 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !24, ID: 1
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32, ID: 4
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !24, ID: 1
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

--- IFDS START RESULT RECORD ---
N: ret { i8*, i8* } %3, !dbg !42, !phasar.instruction.id !45, ID: 13 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !24, ID: 1
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	store i8* %call, i8** %t2, align 8, !dbg !35, !phasar.instruction.id !36, ID: 6
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !31, !phasar.instruction.id !32, ID: 4
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !24, ID: 1
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t13 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t2 = alloca i8*, align 8, !phasar.instruction.id !16, ID: 18 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !55, metadata !26), !dbg !56, !phasar.instruction.id !57, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s2* %s21, metadata !66, metadata !26), !dbg !67, !phasar.instruction.id !68, ID: 25 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %0 = bitcast %struct.s2* %s21 to { i8*, i8* }*, !dbg !45, !phasar.instruction.id !47, ID: 27 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %2 = extractvalue { i8*, i8* } %call2, 0, !dbg !45, !phasar.instruction.id !49, ID: 29 in function: main
D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%2 = extractvalue { i8*, i8* } %call2, 0, !dbg !45, !phasar.instruction.id !49, ID: 29

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %4 = extractvalue { i8*, i8* } %call2, 1, !dbg !45, !phasar.instruction.id !52, ID: 32 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	%4 = extractvalue { i8*, i8* } %call2, 1, !dbg !45, !phasar.instruction.id !52, ID: 32

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %t13, metadata !78, metadata !26), !dbg !79, !phasar.instruction.id !80, ID: 34 in function: main
D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: %t14 = getelementptr inbounds %struct.s2, %struct.s2* %s21, i32 0, i32 0, !dbg !57, !phasar.instruction.id !58, ID: 35 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %5 = load i8*, i8** %t14, align 8, !dbg !57, !phasar.instruction.id !59, ID: 36 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %5, i8** %t13, align 8, !dbg !55, !phasar.instruction.id !60, ID: 37 in function: main
D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	%5 = load i8*, i8** %t14, align 8, !dbg !57, !phasar.instruction.id !59, ID: 36

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %t2, metadata !85, metadata !26), !dbg !86, !phasar.instruction.id !87, ID: 38 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t13 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 17

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t25 = getelementptr inbounds %struct.s2, %struct.s2* %s21, i32 0, i32 1, !dbg !64, !phasar.instruction.id !65, ID: 39 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t13 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 17

--- IFDS START RESULT RECORD ---
N: %6 = load i8*, i8** %t25, align 8, !dbg !64, !phasar.instruction.id !66, ID: 40 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t13 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 17

D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: store i8* %6, i8** %t2, align 8, !dbg !62, !phasar.instruction.id !67, ID: 41 in function: main
D:	%6 = load i8*, i8** %t25, align 8, !dbg !64, !phasar.instruction.id !66, ID: 40

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t13 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 17

D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !68, !phasar.instruction.id !69, ID: 42 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 24
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 15
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 3, !dbg !36, !phasar.instruction.id !37, ID: 22
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t13 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 17

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !16, ID: 18

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !33, !phasar
.instruction.id !34, ID: 5

D:	%call2 = call { i8*, i8* } @foo(%struct.s1* byval align 8 %s1), !dbg !45, !phasar.instruction.id !46, ID: 26
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !38, !phasar.instruction.id !39, ID: 23

D:	store i8* %2, i8** %1, align 8, !dbg !45, !phasar.instruction.id !50, ID: 30
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !45, !phasar.instruction.id !48, ID: 28

D:	store i8* %4, i8** %3, align 8, !dbg !45, !phasar.instruction.id !53, ID: 33
A:	%s21 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 16
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !45, !phasar.instruction.id !51, ID: 31

D:	@zero_value = constant i2 0, align 4, ID: -1


