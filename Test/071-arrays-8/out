PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
[TRACK] Searching end of tainted branch label for BB: entry
[TRACK] End of tainted block label: if.end
[TRACK] End of tainted branch label: if.end
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55
[TRACK] Destination:
[TRACK]   %t1 = alloca i8*, align 8, !phasar.instruction.id !17
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55
[TRACK] Destination:
[TRACK]   %t2 = alloca i8*, align 8, !phasar.instruction.id !18
[TRACK] Searching end of tainted branch label for BB: entry
[TRACK] End of tainted block label: if.end
[TRACK] End of tainted branch label: if.end
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55
[TRACK] Destination:
[TRACK] i8* %0### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 24, i32 8, i1 false), !dbg !107, !phasar.instruction.id !110, ID: 51 in function: main
D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata [2 x [2 x %struct.s]]* %str_array, metadata !24, metadata !39), !dbg !40, !phasar.instruction.id !41, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %str_array_temp = alloca %struct.s, align 8, !phasar.instruction.id !16, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !14, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %nt3 = alloca i8*, align 8, !phasar.instruction.id !22, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !23, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %nt2 = alloca i8*, align 8, !phasar.instruction.id !21, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %str_array_temp2 = alloca %struct.s, align 8, !phasar.instruction.id !20, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %nt1 = alloca i8*, align 8, !phasar.instruction.id !19, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20 in function: main
D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

--- IFDS START RESULT RECORD ---
N: %cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18 in function: main
D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %2 = load i8*, i8** %arrayidx4, align 8, !dbg !65, !phasar.instruction.id !73, ID: 28 in function: main
D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16 in function: main
D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14

--- IFDS START RESULT RECORD ---
N: br label %if.end, !dbg !60, !phasar.instruction.id !61, ID: 21 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %t1, metadata !62, metadata !39), !dbg !63, !phasar.instruction.id !64, ID: 22 in function: main
D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 14

--- IFDS START RESULT RECORD ---
N: %arrayidx2 = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !65, !phasar.instruction.id !66, ID: 23 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %arrayidx3 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx2, i64 0, i64 0, !dbg !65, !phasar.instruction.id !67, ID: 24 in function: main
D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %b = getelementptr inbounds %struct.s, %struct.s* %arrayidx3, i32 0, i32 1, !dbg !68, !phasar.instruction.id !69, ID: 25 in function: main
D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

--- IFDS START RESULT RECORD ---
N: %taint = getelementptr inbounds %struct.t, %struct.t* %b, i32 0, i32 0, !dbg !70, !phasar.instruction.id !71, ID: 26 in function: main
D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* %taint, i64 0, i64 0, !dbg !65, !phasar.instruction.id !72, ID: 27 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

--- IFDS START RESULT RECORD ---
N: store i8* %2, i8** %t1, align 8, !dbg !63, !phasar.instruction.id !74, ID: 29 in function: main
D:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = bitcast %struct.s* %str_array_temp to i8*, !dbg !56, !phasar.instruction.id !58, ID: 19

D:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%0 = bitcast %struct.s* %arrayidx1 to i8*, !dbg !56, !phasar.instruction.id !57, ID: 18

D:	%cmp = icmp ne i8* %call, null, !dbg !45, !phasar.instruction.id !46, ID: 13

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %t2, metadata !75, metadata !39), !dbg !76, !phasar.instruction.id !77, ID: 30 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %arrayidx5 = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !78, !phasar.instruction.id !79, ID: 31 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

--- IFDS START RESULT RECORD ---
N: %arrayidx6 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx5, i64 0, i64 0, !dbg !78, !phasar.instruction.id !80, ID: 32 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %b7 = getelementptr inbounds %struct.s, %struct.s* %arrayidx6, i32 0, i32 1, !dbg !81, !phasar.instruction.id !82, ID: 33 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %taint8 = getelementptr inbounds %struct.t, %struct.t* %b7, i32 0, i32 0, !dbg !83, !phasar.instruction.id !84, ID: 34 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %arrayidx9 = getelementptr inbounds [2 x i8*], [2 x i8*]* %taint8, i64 0, i64 1, !dbg !78, !phasar.instruction.id !85, ID: 35 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %3 = load i8*, i8** %arrayidx9, align 8, !dbg !78, !phasar.instruction.id !86, ID: 36 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: store i8* %3, i8** %t2, align 8, !dbg !76, !phasar.instruction.id !87, ID: 37 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %nt1, metadata !88, metadata !39), !dbg !89, !phasar.instruction.id !90, ID: 38 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %arrayidx10 = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !91, !phasar.instruction.id !92, ID: 39 in function: main
D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %arrayidx11 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx10, i64 0, i64 1, !dbg !91, !phasar.instruction.id !93, ID: 40 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %b12 = getelementptr inbounds %struct.s, %struct.s* %arrayidx11, i32 0, i32 1, !dbg !94, !phasar.instruction.id !95, ID: 41 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

--- IFDS START RESULT RECORD ---
N: %taint13 = getelementptr inbounds %struct.t, %struct.t* %b12, i32 0, i32 0, !dbg !96, !phasar.instruction.id !97, ID: 42 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %arrayidx14 = getelementptr inbounds [2 x i8*], [2 x i8*]* %taint13, i64 0, i64 0, !dbg !91, !phasar.instruction.id !98, ID: 43 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

--- IFDS START RESULT RECORD ---
N: %4 = load i8*, i8** %arrayidx14, align 8, !dbg !91, !phasar.instruction.id !99, ID: 44 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

--- IFDS START RESULT RECORD ---
N: store i8* %4, i8** %nt1, align 8, !dbg !89, !phasar.instruction.id !100, ID: 45 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp2, metadata !101, metadata !39), !dbg !102, !phasar.instruction.id !103, ID: 46 in function: main
D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %arrayidx15 = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !104, !phasar.instruction.id !105, ID: 47 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %arrayidx16 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx15, i64 0, i64 0, !dbg !104, !phasar.instruction.id !106, ID: 48 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

--- IFDS START RESULT RECORD ---
N: %5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %6 = bitcast %struct.s* %str_array_temp2 to i8*, !dbg !107, !phasar.instruction.id !109, ID: 50 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%str_array = alloca [2 x [2 x %struct.s]], align 16, !phasar.instruction.id !15, ID: 2
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !53, !phasar.instruction.id !54, ID: 16
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx, i64 0, i64 0, !dbg !53, !phasar.instruction.id !55, ID: 17

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %nt2, metadata !111, metadata !39), !dbg !112, !phasar.instruction.id !113, ID: 52 in function: main
D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

--- IFDS START RESULT RECORD ---
N: %arrayidx17 = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !114, !phasar.instruction.id !115, ID: 53 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

--- IFDS START RESULT RECORD ---
N: %arrayidx18 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx17, i64 0, i64 0, !dbg !114, !phasar.instruction.id !116, ID: 54 in function: main
D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %b19 = getelementptr inbounds %struct.s, %struct.s* %arrayidx18, i32 0, i32 1, !dbg !117, !phasar.instruction.id !118, ID: 55 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

--- IFDS START RESULT RECORD ---
N: %taint20 = getelementptr inbounds %struct.t, %struct.t* %b19, i32 0, i32 0, !dbg !119, !phasar.instruction.id !120, ID: 56 in function: main
D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %arrayidx21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %taint20, i64 0, i64 0, !dbg !114, !phasar.instruction.id !121, ID: 57 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

--- IFDS START RESULT RECORD ---
N: %7 = load i8*, i8** %arrayidx21, align 8, !dbg !114, !phasar.instruction.id !122, ID: 58 in function: main
D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: store i8* %7, i8** %nt2, align 8, !dbg !112, !phasar.instruction.id !123, ID: 59 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%5 = bitcast %struct.s* %arrayidx16 to i8*, !dbg !107, !phasar.instruction.id !108, ID: 49

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %nt3, metadata !124, metadata !39), !dbg !125, !phasar.instruction.id !126, ID: 60 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

--- IFDS START RESULT RECORD ---
N: %arrayidx22 = getelementptr inbounds [2 x [2 x %struct.s]], [2 x [2 x %struct.s]]* %str_array, i64 0, i64 0, !dbg !127, !phasar.instruction.id !128, ID: 61 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %arrayidx23 = getelementptr inbounds [2 x %struct.s], [2 x %struct.s]* %arrayidx22, i64 0, i64 0, !dbg !127, !phasar.instruction.id !129, ID: 62 in function: main
D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: %b24 = getelementptr inbounds %struct.s, %struct.s* %arrayidx23, i32 0, i32 1, !dbg !130, !phasar.instruction.id !131, ID: 63 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint25 = getelementptr inbounds %struct.t, %struct.t* %b24, i32 0, i32 0, !dbg !132, !phasar.instruction.id !133, ID: 64 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

--- IFDS START RESULT RECORD ---
N: %arrayidx26 = getelementptr inbounds [2 x i8*], [2 x i8*]* %taint25, i64 0, i64 1, !dbg !127, !phasar.instruction.id !134, ID: 65 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1550311271-trace.txt
 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %8 = load i8*, i8** %arrayidx26, align 8, !dbg !127, !phasar.instruction.id !135, ID: 66 in function: main
D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

--- IFDS START RESULT RECORD ---
N: store i8* %8, i8** %nt3, align 8, !dbg !125, !phasar.instruction.id !136, ID: 67 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !137, !phasar.instruction.id !138, ID: 68 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !42, !phasar.instruction.id !44, ID: 12

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !dbg !56, !phasar.instruction.id !59, ID: 20
A:	%t2 = alloca i8*, align 8, !phasar.instruction.id !18, ID: 5

D:	call void @llvm.dbg.declare(metadata %struct.s* %str_array_temp, metadata !49, metadata !39), !dbg !51, !phasar.instruction.id !52, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1


