PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !12

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %rc = alloca i32, align 4, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %i = alloca i32, align 4, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15

Got store instruction
[TRACK]:i32 0
[TRACK]: srcMemLocation: 0
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !17), !dbg !22, !phasar.instruction.id !23

getNormalFlowFunction()
  store i32 0, i32* %i, align 4, !dbg !22, !phasar.instruction.id !24

Got store instruction
[TRACK]:i32 0
[TRACK]: srcMemLocation: 0
getNormalFlowFunction()
  br label %for.cond, !dbg !25, !phasar.instruction.id !26

Got branch instruction
getSummaryFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29

getNormalFlowFunction()
  %tobool = icmp ne i32 %call, 0, !dbg !30, !phasar.instruction.id !31

Got operands checking instruction (icmp)
getNormalFlowFunction()
  br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32

Got branch instruction
getNormalFlowFunction()
  %0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35

Got load instruction
getNormalFlowFunction()
  store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37

Got store instruction
[TRACK]:  %0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35
[TRACK]: srcMemLocation: 1
[TRACK]   %i = alloca i32, align 4, !phasar.instruction.id !14
getNormalFlowFunction()
  br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32

Got branch instruction
getNormalFlowFunction()
  %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49

Got load instruction
[TRACK]:  %0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35
[TRACK]: srcMemLocation: 1
[TRACK]   %i = alloca i32, align 4, !phasar.instruction.id !14
getNormalFlowFunction()
  br label %for.inc, !dbg !38, !phasar.instruction.id !39

Got branch instruction
getNormalFlowFunction()
  %1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !41

Got load instruction
getNormalFlowFunction()
  %inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42

Got operands checking instruction (add)
getNormalFlowFunction()
  store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43

Got store instruction
[TRACK]:  %inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42
[TRACK]: srcMemLocation: 0
getNormalFlowFunction()
  br label %for.cond, !dbg !44, !llvm.loop !45, !phasar.instruction.id !47

Got branch instruction
getSummaryFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29

[TRACK]:  %0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35
[TRACK]: srcMemLocation: 1
[TRACK]   %i = alloca i32, align 4, !phasar.instruction.id !14
getCallToRetFlowFunction()
getSummaryFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29

[TRACK]:  %0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35
[TRACK]: srcMemLocation: 1
[TRACK]   %i = alloca i32, align 4, !phasar.instruction.id !14
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %i = alloca i32, align 4, !phasar.instruction.id !14
[TRACK] Destination:
[TRACK]   %rc = alloca i32, align 4, !phasar.instruction.id !13
[TRACK]:  %inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42
[TRACK]: srcMemLocation: 0
[TRACK]:  %inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42
[TRACK]: srcMemLocation: 0
[TRACK]:  %inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42
[TRACK]: srcMemLocation: 0
[TRACK]:  %inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42
[TRACK]: srcMemLocation: 0
getSummaryFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29

[TRACK]:  %0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35
[TRACK]: srcMemLocation: 1
[TRACK]   %i = alloca i32, align 4, !phasar.instruction.id !14
getSummaryFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29

[TRACK]:  %0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35
[TRACK]: srcMemLocation: 1
[TRACK]   %i = alloca i32, align 4, !phasar.instruction.id !14
[TRACK]:  %inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42
[TRACK]: srcMemLocation: 0
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getCallFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !17), !dbg !22, !phasar.instruction.id !23### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: br label %for.cond, !dbg !25, !phasar.instruction.id !26, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

D:	%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15

D:	%inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42, ID: 16

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

D:	%0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %i, align 4, !dbg !22, !phasar.instruction.id !24, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !17), !dbg !22, !phasar.instruction.id !23, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %i, align 4, !dbg !33, !phasar.instruction.id !35, ID: 12 in function: main
D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !30, !phasar.instruction.id !31, ID: 10 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

--- IFDS START RESULT RECORD ---
N: %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 19 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%tobool = icmp ne i32 %call, 0, !dbg !30, !phasar.instruction.id !31, ID: 10

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instructi

on.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

--- IFDS START RESULT RECORD ---
N: br label %for.inc, !dbg !38, !phasar.instruction.id !39, ID: 14 in function: main
D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %inc = add nsw i32 %1, 1, !dbg !40, !phasar.instruction.id !42, ID: 16 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

D:	%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !41, ID: 15

--- IFDS START RESULT RECORD ---
N: br label %for.cond, !dbg !44, !llvm.loop !45, !phasar.instruction.id !47, ID: 18 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %tobool, label %for.body, label %for.end, !dbg !30, !phasar.instruction.id !32, ID: 11
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: ret i32 %2, !dbg !50, !phasar.instruction.id !51, ID: 20 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !40, !phasar.instruction.id !43, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %0, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !49, ID: 19


No IFDS report available!