PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %tainted = alloca i8*, align 8, !phasar.instruction.id !16

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !36, metadata !18), !dbg !43, !phasar.instruction.id !44

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !45, metadata !18), !dbg !48, !phasar.instruction.id !49

getSummaryFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !33, !phasar.instruction.id !34

getNormalFlowFunction()
  store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35

Got store instruction
getNormalFlowFunction()
  %0 = load i8*, i8** %tainted, align 8, !dbg !36, !phasar.instruction.id !37

Got load instruction
getNormalFlowFunction()
  %cmp = icmp ne i8* %0, null, !dbg !38, !phasar.instruction.id !39

Got operands checking instruction (icmp)
getNormalFlowFunction()
  %conv = zext i1 %cmp to i32, !dbg !38, !phasar.instruction.id !40

Got operands checking instruction (zext)
getNormalFlowFunction()
  %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42

Got GEP instruction
getNormalFlowFunction()
  %a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44

Got GEP instruction
getNormalFlowFunction()
  store i32 %conv, i32* %a, align 4, !dbg !45, !phasar.instruction.id !46

Got store instruction
getNormalFlowFunction()
  %s21 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !47, !phasar.instruction.id !48

Got GEP instruction
getNormalFlowFunction()
  %a2 = getelementptr inbounds %struct.s2, %struct.s2* %s21, i32 0, i32 0, !dbg !49, !phasar.instruction.id !50

Got GEP instruction
getNormalFlowFunction()
  %1 = load i32, i32* %a2, align 4, !dbg !49, !phasar.instruction.id !51

Got load instruction
getSummaryFlowFunction()
  call void @foo(i32 %1), !dbg !52, !phasar.instruction.id !53

getCallFlowFunction()
  call void @foo(i32 %1), !dbg !52, !phasar.instruction.id !53

getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @foo(i32 %1), !dbg !52, !phasar.instruction.id !53

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42
[TRACK]   %a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44
[TRACK] Destination:
[TRACK] i32 %a
getNormalFlowFunction()
  %a.addr = alloca i32, align 4, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %t1 = alloca i32, align 4, !phasar.instruction.id !15

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 %a, i32* %a.addr, align 4, !phasar.instruction.id !16

Got store instruction
[TRACK] Patched memory location (arg/store)
[TRACK] Source:
[TRACK] i32 %a
[TRACK] Destination:
[TRACK]   %a.addr = alloca i32, align 4, !phasar.instruction.id !14
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t1, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23

getNormalFlowFunction()
  %0 = load i32, i32* %a.addr, align 4, !dbg !24, !phasar.instruction.id !25

Got load instruction
getNormalFlowFunction()
  store i32 %0, i32* %t1, align 4, !dbg !22, !phasar.instruction.id !26

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %a.addr = alloca i32, align 4, !phasar.instruction.id !14
[TRACK] Destination:
[TRACK]   %t1 = alloca i32, align 4, !phasar.instruction.id !15
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getRetFlowFunction()
getSummaryFlowFunction()
  call void @foo(i32 %1), !dbg !52, !phasar.instruction.id !53

getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @foo(i32 %1), !dbg !52, !phasar.instruction.id !53

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t1, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23

getCallToRetFlowFunction()
getCallToRetFlowFunction()
getCallFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !33, !phasar.instruction.id !34

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !36, metadata !18), !dbg !43, !phasar.instruction.id !44

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !45, metadata !18), !dbg !48, !phasar.instruction.id !49

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t1, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42
[TRACK]   %a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44
[TRACK] Destination:
[TRACK] i32 %a### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %a.addr = alloca i32, align 4, !phasar.instruction.id !14, ID: 1 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i32 %a, ID: foo.0

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %a.addr, align 4, !dbg !24, !phasar.instruction.id !25, ID: 6 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%a.addr = alloca i32, align 4, !phasar.instruction.id !14, ID: 1

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !14, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !33, !phasar.instruction.id !34, ID: 15 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 4 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%a.addr = alloca i32, align 4, !phasar.instruction.id !14, ID: 1

--- IFDS START RESULT RECORD ---
N: store i32 %0, i32* %t1, align 4, !dbg !22, !phasar.instruction.id !26, ID: 7 in function: foo
D:	%0 = load i32, i32* %a.addr, align 4, !dbg !24, !phasar.instruction.id !25, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%a.addr = alloca i32, align 4, !phasar.instruction.id !14, ID: 1

--- IFDS START RESULT RECORD ---
N: store i32 %a, i32* %a.addr, align 4, !phasar.instruction.id !16, ID: 3 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i32 %a, ID: foo.0

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %t1, metadata !21, metadata !18), !dbg !22, !phasar.instruction.id !23, ID: 5 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%a.addr = alloca i32, align 4, !phasar.instruction.id !14, ID: 1

--- IFDS START RESULT RECORD ---
N: %t1 = alloca i32, align 4, !phasar.instruction.id !15, ID: 2 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i32 %a, ID: foo.0

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret void, !dbg !27, !phasar.instruction.id !28, ID: 8 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%a.addr = alloca i32, align 4, !phasar.instruction.id !14, ID: 1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i32, align 4, !phasar.instruction.id !15, ID: 2

--- IFDS START RESULT RECORD ---
N: %tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !36, metadata !18), !dbg !43, !phasar.instruction.id !44, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %tainted, metadata !45, metadata !18), !dbg !48, !phasar.instruction.id !49, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !33, !phasar.instruction.id !34, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i8*, i8** %tainted, align 8, !dbg !36, !phasar.instruction.id !37, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

--- IFDS START RESULT RECORD ---
N: %cmp = icmp ne i8* %0, null, !dbg !38, !phasar.instruction.id !39, ID: 18 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

D:	%0 = load i8*, i8** %tainted, align 8, !dbg !36, !phasar.instruction.id !37, ID: 17

--- IFDS START RESULT RECORD ---
N: %conv = zext i1 %cmp to i32, !dbg !38, !phasar.instruction.id !40, ID: 19 in function: main
D:	%cmp = icmp ne i8* %0, null, !dbg !38, !phasar.instruction.id !39, ID: 18

D:	%0 = load i8*, i8** %tainted, align 8, !dbg !36, !phasar.instruction.id !37, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

--- IFDS START RESULT RECORD ---
N: %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

D:	%0 = load i8*, i8** %tainted, align 8, !dbg !36, !phasar.instruction.id !37, ID: 17

D:	%cmp = icmp ne i8* %0, null, !dbg !38, !phasar.instruction.id !39, ID: 18

D:	%conv = zext i1 %cmp to i32, !dbg !38, !phasar.instruction.id !40, ID: 19

--- IFDS START RESULT RECORD ---
N: %a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21 in function: main
D:	%0 = load i8*, i8** %tainted, align 8, !dbg !36, !phasar.instruction.id !37, ID: 17

D:	%conv = zext i1 %cmp to i32, !dbg !38, !phasar.instruction.id !40, ID: 19

D:	%cmp = icmp ne i8* %0, null, !dbg !38, !phasar.instruction.id !39, ID: 18

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %conv, i32* %a, align 4, !dbg !45, !phasar.instruction.id !46, ID: 22 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

D:	%0 = load i8*, i8** %tainted, align 8, !dbg !36, !phasar.instruction.id !37, ID: 17

D:	%cmp = icmp ne i8* %0, null, !dbg !38, !phasar.instruction.id !39, ID: 18

D:	%conv = zext i1 %cmp to i32, !dbg !38, !phasar.instruction.id !40, ID: 19

--- IFDS START RESULT RECORD ---
N: %s21 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !47, !phasar.instruction.id !48, ID: 23 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %conv, i32* %a, align 4, !dbg !45, !phasar.instruction.id !46, ID: 22
A:	%s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15, ID: 10
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42, ID: 20
A:	%a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

--- IFDS START RESULT RECORD ---
N: %a2 = getelementptr inbounds %struct.s2, %struc
t.s2* %s21, i32 0, i32 0, !dbg !49, !phasar.instruction.id !50, ID: 24 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

D:	store i32 %conv, i32* %a, align 4, !dbg !45, !phasar.instruction.id !46, ID: 22
A:	%s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15, ID: 10
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42, ID: 20
A:	%a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %a2, align 4, !dbg !49, !phasar.instruction.id !51, ID: 25 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

D:	store i32 %conv, i32* %a, align 4, !dbg !45, !phasar.instruction.id !46, ID: 22
A:	%s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15, ID: 10
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42, ID: 20
A:	%a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21

--- IFDS START RESULT RECORD ---
N: call void @foo(i32 %1), !dbg !52, !phasar.instruction.id !53, ID: 26 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

D:	store i32 %conv, i32* %a, align 4, !dbg !45, !phasar.instruction.id !46, ID: 22
A:	%s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15, ID: 10
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42, ID: 20
A:	%a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21

D:	%1 = load i32, i32* %a2, align 4, !dbg !49, !phasar.instruction.id !51, ID: 25

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !54, !phasar.instruction.id !55, ID: 27 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !31, !phasar.instruction.id !35, ID: 16
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !16, ID: 11

D:	store i32 %conv, i32* %a, align 4, !dbg !45, !phasar.instruction.id !46, ID: 22
A:	%s1 = alloca %struct.s1, align 4, !phasar.instruction.id !15, ID: 10
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 0, !dbg !41, !phasar.instruction.id !42, ID: 20
A:	%a = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21

D:	%1 = load i32, i32* %a2, align 4, !dbg !49, !phasar.instruction.id !51, ID: 25


No IFDS report available!