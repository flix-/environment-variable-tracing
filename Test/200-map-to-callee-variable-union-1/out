PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !12

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %f = alloca %union.a, align 8, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %union.a* %f, metadata !40, metadata !21), !dbg !41, !phasar.instruction.id !42

getSummaryFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25

getNormalFlowFunction()
  %tainted = bitcast %union.a* %f to i8**, !dbg !26, !phasar.instruction.id !27

Got operands checking instruction (bitcast)
getNormalFlowFunction()
  store i8* %call, i8** %tainted, align 8, !dbg !28, !phasar.instruction.id !29

Got store instruction
getNormalFlowFunction()
  %coerce.dive = getelementptr inbounds %union.a, %union.a* %f, i32 0, i32 0, !dbg !30, !phasar.instruction.id !31

Got GEP instruction
getNormalFlowFunction()
  %0 = load i8*, i8** %coerce.dive, align 8, !dbg !30, !phasar.instruction.id !32

Got load instruction
getSummaryFlowFunction()
  call void @foo(i8* %0), !dbg !30, !phasar.instruction.id !33

getCallFlowFunction()
  call void @foo(i8* %0), !dbg !30, !phasar.instruction.id !33

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %f = alloca %union.a, align 8, !phasar.instruction.id !13
[TRACK] Destination:
[TRACK] i8* %f.coerce
getNormalFlowFunction()
  %f = alloca %union.a, align 8, !phasar.instruction.id !16

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %tainted = alloca i8*, align 8, !phasar.instruction.id !17

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %coerce.dive = getelementptr inbounds %union.a, %union.a* %f, i32 0, i32 0, !phasar.instruction.id !18

Got GEP instruction
getNormalFlowFunction()
  store i8* %f.coerce, i8** %coerce.dive, align 8, !phasar.instruction.id !19

Got store instruction
[TRACK] Patched memory location (arg/store)
[TRACK] Source:
[TRACK] i8* %f.coerce
[TRACK] Destination:
[TRACK]   %f = alloca %union.a, align 8, !phasar.instruction.id !16
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %union.a* %f, metadata !20, metadata !21), !dbg !22, !phasar.instruction.id !23

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !24, metadata !21), !dbg !25, !phasar.instruction.id !26

getNormalFlowFunction()
  %tainted1 = bitcast %union.a* %f to i8**, !dbg !27, !phasar.instruction.id !28

Got operands checking instruction (bitcast)
getNormalFlowFunction()
  %0 = load i8*, i8** %tainted1, align 8, !dbg !27, !phasar.instruction.id !29

Got load instruction
getNormalFlowFunction()
  store i8* %0, i8** %tainted, align 8, !dbg !25, !phasar.instruction.id !30

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %f = alloca %union.a, align 8, !phasar.instruction.id !16
[TRACK] Destination:
[TRACK]   %tainted = alloca i8*, align 8, !phasar.instruction.id !17
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getRetFlowFunction()
getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @foo(i8* %0), !dbg !30, !phasar.instruction.id !33

getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @foo(i8* %0), !dbg !30, !phasar.instruction.id !33

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %union.a* %f, metadata !20, metadata !21), !dbg !22, !phasar.instruction.id !23

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !24, metadata !21), !dbg !25, !phasar.instruction.id !26

getCallToRetFlowFunction()
getCallFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata %union.a* %f, metadata !40, metadata !21), !dbg !41, !phasar.instruction.id !42

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata %union.a* %f, metadata !20, metadata !21), !dbg !22, !phasar.instruction.id !23

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !24, metadata !21), !dbg !25, !phasar.instruction.id !26

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %f = alloca %union.a, align 8, !phasar.instruction.id !13
[TRACK] Destination:
[TRACK] i8* %f.coerce### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %f = alloca %union.a, align 8, !phasar.instruction.id !16, ID: 1 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i8* %f.coerce, ID: foo.0

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %coerce.dive = getelementptr inbounds %union.a, %union.a* %f, i32 0, i32 0, !phasar.instruction.id !18, ID: 3 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i8* %f.coerce, ID: foo.0

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tainted1 = bitcast %union.a* %f to i8**, !dbg !27, !phasar.instruction.id !28, ID: 7 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !16, ID: 1

--- IFDS START RESULT RECORD ---
N: %0 = load i8*, i8** %tainted1, align 8, !dbg !27, !phasar.instruction.id !29, ID: 8 in function: foo
D:	%tainted1 = bitcast %union.a* %f to i8**, !dbg !27, !phasar.instruction.id !28, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !16, ID: 1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 15 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %union.a* %f, metadata !20, metadata !21), !dbg !22, !phasar.instruction.id !23, ID: 5 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !16, ID: 1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %0, i8** %tainted, align 8, !dbg !25, !phasar.instruction.id !30, ID: 9 in function: foo
D:	%tainted1 = bitcast %union.a* %f to i8**, !dbg !27, !phasar.instruction.id !28, ID: 7

D:	%0 = load i8*, i8** %tainted1, align 8, !dbg !27, !phasar.instruction.id !29, ID: 8

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !16, ID: 1

--- IFDS START RESULT RECORD ---
N: store i8* %f.coerce, i8** %coerce.dive, align 8, !phasar.instruction.id !19, ID: 4 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i8* %f.coerce, ID: foo.0

--- IFDS START RESULT RECORD ---
N: %tainted = alloca i8*, align 8, !phasar.instruction.id !17, ID: 2 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i8* %f.coerce, ID: foo.0

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret void, !dbg !31, !phasar.instruction.id !32, ID: 10 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !16, ID: 1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !17, ID: 2

--- IFDS START RESULT RECORD ---
N: %f = alloca %union.a, align 8, !phasar.instruction.id !13, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %tainted, metadata !24, metadata !21), !dbg !25, !phasar.instruction.id !26, ID: 6 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !16, ID: 1

--- IFDS STA
RT RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %union.a* %f, metadata !40, metadata !21), !dbg !41, !phasar.instruction.id !42, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tainted = bitcast %union.a* %f to i8**, !dbg !26, !phasar.instruction.id !27, ID: 16 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %tainted, align 8, !dbg !28, !phasar.instruction.id !29, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !24, !phasar.instruction.id !25, ID: 15

--- IFDS START RESULT RECORD ---
N: %coerce.dive = getelementptr inbounds %union.a, %union.a* %f, i32 0, i32 0, !dbg !30, !phasar.instruction.id !31, ID: 18 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !28, !phasar.instruction.id !29, ID: 17
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !13, ID: 12

--- IFDS START RESULT RECORD ---
N: %0 = load i8*, i8** %coerce.dive, align 8, !dbg !30, !phasar.instruction.id !32, ID: 19 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !28, !phasar.instruction.id !29, ID: 17
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !13, ID: 12

--- IFDS START RESULT RECORD ---
N: call void @foo(i8* %0), !dbg !30, !phasar.instruction.id !33, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !28, !phasar.instruction.id !29, ID: 17
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !13, ID: 12

D:	%0 = load i8*, i8** %coerce.dive, align 8, !dbg !30, !phasar.instruction.id !32, ID: 19

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !34, !phasar.instruction.id !35, ID: 21 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !28, !phasar.instruction.id !29, ID: 17
A:	%f = alloca %union.a, align 8, !phasar.instruction.id !13, ID: 12

D:	%0 = load i8*, i8** %coerce.dive, align 8, !dbg !30, !phasar.instruction.id !32, ID: 19


No IFDS report available!