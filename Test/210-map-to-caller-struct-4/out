PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %retval = alloca %struct.s2, align 8, !phasar.instruction.id !17
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Added patchable memory location (caller <- callee)
[TRACK] Source:
[TRACK]   %retval = alloca %struct.s2, align 8, !phasar.instruction.id !17
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36
[TRACK] Destination:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK]   %1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36
[TRACK] Patched memory location (ret/store)
[TRACK] Source:
[TRACK]   %call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %t1 = alloca i8*, align 8, !phasar.instruction.id !15
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK]   %3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %retval = alloca %struct.s2, align 8, !phasar.instruction.id !17, ID: 1 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 16, i32 8, i1 false), !dbg !35, !phasar.instruction.id !39, ID: 11 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 2
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30, ID: 5
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = bitcast %struct.s2* %retval to i8*, !dbg !35, !phasar.instruction.id !37, ID: 9 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 2
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30, ID: 5
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

--- IFDS START RESULT RECORD ---
N: %coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %2 = extractvalue { i8*, i8* } %call, 0, !dbg !33, !phasar.instruction.id !37, ID: 25 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30, ID: 5 in function: foo
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 19 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !19, metadata !24), !dbg !25, !phasar.instruction.id !26, ID: 3 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7 in function: foo
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 4 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 2 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = bitcast %struct.s2* %s21 to i8*, !dbg !35, !phasar.instruction.id !38, ID: 10 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 2
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30, ID: 5
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6 in function: foo
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s21 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !35, !phasar.instruction.id !36, ID: 8 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 2
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30, ID: 5
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 15 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %2 = bitcast %struct.s2* %retval to { i8*, i8* }*, !dbg !40, !phasar.instruction.id !41, ID: 12 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !17, ID: 1
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 2
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30, ID: 5
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %3 = load { i8*, i8* }, { i8*, i8* }* %2, align 8, !dbg !40, !phasar.instruction.id !42, ID: 13 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !17, ID: 1
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 2
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30, ID: 5
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

--- IFDS START RESULT RECORD ---
N: ret { i8*, i8* } %3, !dbg !40, !phasar.instruction.id !43, ID: 14 in function: foo
D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%retval = alloca %struct.s2, align 8, !phasar.instruction.id !17, ID: 1
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %call, i8** %t2, align 8, !dbg !33, !phasar.instruction.id !34, ID: 7
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 2
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !29, !phasar.instruction.id !30, ID: 5
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t1 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 18 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !53, metadata !24), !dbg !54, !phasar.instruction.id !55, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = bitcast %struct.s2* %coerce to { i8*, i8* }*, !dbg !33, !phasar.instruction.id !35, ID: 23 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%2 = extractvalue { i8*, i8* } %call, 0, !dbg !33, !phasar.instruction.id !37, ID: 25

--- IFDS START RESULT RECORD ---
N: %3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %4 = extractvalue { i8*, i8* } %call, 1, !dbg !33, !phasar.instruction.id !40, ID: 28 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	%4 = extractvalue { i8*, i8* } %call, 1, !dbg !33, !phasar.instruction.id !40, ID: 28

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %5 = bitcast %struct.s2* %s2 to i8*, !dbg !33, !phasar.instruction.id !42, ID: 30 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

--- IFDS START RESULT RECORD ---
N: %6 = bitcast %struct.s2* %coerce to i8*, !dbg !33, !phasar.instruction.id !43, ID: 31 in function: main
D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

--- IFDS START RESULT RECORD ---
N: call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 16, i32 8, i1 false), !dbg !33, !phasar.instruction.id !44, ID: 32 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %t1, metadata !70, metadata !24), !dbg !71, !phasar.instruction.id !72, ID: 33 in function: main
D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

--- IFDS START RESULT RECORD ---
N: %s21 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !48, !phasar.instruction.id !49, ID: 34 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t2 = getelementptr inbounds %struct.s2, %struct.s2* %s21, i32 0, i32 0, !dbg !50, !phasar.instruction.id !51, ID: 35 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

--- IFDS START RESULT RECORD ---
N: %7 = load i8*, i8** %t2, align 8, !dbg !50, !phasar.instruction.id !52, ID: 36 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %7, i8** %t1, align 8, !dbg !46, !phasar.instruction.id !53, ID: 37 in function: main
D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%7 = load i8*, i8** %t2, align 8, !dbg !50, !phasar.instruction.id !52, ID: 36

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !54, !phasar.instruction.id !55, ID: 38 in function: main
D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !15, ID: 18

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	%call = call { i8*, i8* } @foo(), !dbg !33, !phasar.instruction.id !34, ID: 22
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%t2 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 0, !dbg !31, !phasar.instruction.id !32, ID: 6

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %2, i8** %1, align 8, !dbg !33, !phasar.instruction.id !38, ID: 26
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 0, !dbg !33, !phasar.instruction.id !36, ID: 24

D:	store i8* %4, i8** %3, a
lign 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%coerce = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 17
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	store i8* %4, i8** %3, align 8, !dbg !33, !phasar.instruction.id !41, ID: 29
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 21
A:	%3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %0, i32 0, i32 1, !dbg !33, !phasar.instruction.id !39, ID: 27

D:	@zero_value = constant i2 0, align 4, ID: -1


