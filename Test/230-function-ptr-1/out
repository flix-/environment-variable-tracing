PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !12

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %foo_ptr = alloca i8* (%struct.s1*)*, align 8, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %ret = alloca i8*, align 8, !phasar.instruction.id !15

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %t12 = alloca i8*, align 8, !phasar.instruction.id !16

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !51, metadata !26), !dbg !52, !phasar.instruction.id !53

getSummaryFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35

getNormalFlowFunction()
  %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37

Got GEP instruction
getNormalFlowFunction()
  %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39

Got GEP instruction
getNormalFlowFunction()
  store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8* (%struct.s1*)** %foo_ptr, metadata !62, metadata !26), !dbg !64, !phasar.instruction.id !65

getNormalFlowFunction()
  store i8* (%struct.s1*)* @foo, i8* (%struct.s1*)** %foo_ptr, align 8, !dbg !46, !phasar.instruction.id !48

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !67, metadata !26), !dbg !68, !phasar.instruction.id !69

getNormalFlowFunction()
  %0 = load i8* (%struct.s1*)*, i8* (%struct.s1*)** %foo_ptr, align 8, !dbg !52, !phasar.instruction.id !53

Got load instruction
getSummaryFlowFunction()
  %call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54

getCallFlowFunction()
  %call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39
getNormalFlowFunction()
  %tainted = alloca i8*, align 8, !phasar.instruction.id !24

Got operands checking instruction (alloca)
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !25, metadata !26), !dbg !27, !phasar.instruction.id !28

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !29, metadata !26), !dbg !30, !phasar.instruction.id !31

getNormalFlowFunction()
  %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !32, !phasar.instruction.id !33

Got GEP instruction
getNormalFlowFunction()
  %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !34, !phasar.instruction.id !35

Got GEP instruction
getNormalFlowFunction()
  %0 = load i8*, i8** %t1, align 8, !dbg !34, !phasar.instruction.id !36

Got load instruction
getNormalFlowFunction()
  store i8* %0, i8** %tainted, align 8, !dbg !30, !phasar.instruction.id !37

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK]   %tainted = alloca i8*, align 8, !phasar.instruction.id !24
getNormalFlowFunction()
  %1 = load i8*, i8** %tainted, align 8, !dbg !38, !phasar.instruction.id !39

Got load instruction
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getRetFlowFunction()
[TRACK] Added patchable memory location (caller <- callee)
[TRACK] Source:
[TRACK]   %tainted = alloca i8*, align 8, !phasar.instruction.id !24
[TRACK] Destination:
[TRACK]   %call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54
getNormalFlowFunction()
  store i8* %call1, i8** %ret, align 8, !dbg !50, !phasar.instruction.id !55

Got store instruction
[TRACK] Patched memory location (ret/store)
[TRACK] Source:
[TRACK]   %call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54
[TRACK] Destination:
[TRACK]   %ret = alloca i8*, align 8, !phasar.instruction.id !15
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %t12, metadata !74, metadata !26), !dbg !75, !phasar.instruction.id !76

getNormalFlowFunction()
  %1 = load i8*, i8** %ret, align 8, !dbg !59, !phasar.instruction.id !60

Got load instruction
getNormalFlowFunction()
  store i8* %1, i8** %t12, align 8, !dbg !57, !phasar.instruction.id !61

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %ret = alloca i8*, align 8, !phasar.instruction.id !15
[TRACK] Destination:
[TRACK]   %t12 = alloca i8*, align 8, !phasar.instruction.id !16
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %t12, metadata !74, metadata !26), !dbg !75, !phasar.instruction.id !76

getCallToRetFlowFunction()
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8* (%struct.s1*)** %foo_ptr, metadata !62, metadata !26), !dbg !64, !phasar.instruction.id !65

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !67, metadata !26), !dbg !68, !phasar.instruction.id !69

getSummaryFlowFunction()
  %call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !25, metadata !26), !dbg !27, !phasar.instruction.id !28

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !29, metadata !26), !dbg !30, !phasar.instruction.id !31

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %t12, metadata !74, metadata !26), !dbg !75, !phasar.instruction.id !76

getCallToRetFlowFunction()
getCallFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !51, metadata !26), !dbg !52, !phasar.instruction.id !53

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8* (%struct.s1*)** %foo_ptr, metadata !62, metadata !26), !dbg !64, !phasar.instruction.id !65

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !67, metadata !26), !dbg !68, !phasar.instruction.id !69

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39
[TRACK] Destination:
[TRACK] %struct.s1* %s1
[TRACK]   %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37
[TRACK]   %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39
getCallFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !25, metadata !26), !dbg !27, !phasar.instruction.id !28

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !29, metadata !26), !dbg !30, !phasar.instruction.id !31

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %t12, metadata !74, metadata !26), !dbg !75, !phasar.instruction.id !76### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %tainted = alloca i8*, align 8, !phasar.instruction.id !24, ID: 1 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35, ID: 17

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !25, metadata !26), !dbg !27, !phasar.instruction.id !28, ID: 2 in function: foo
D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 15 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %0, i8** %tainted, align 8, !dbg !30, !phasar.instruction.id !37, ID: 7 in function: foo
D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	%0 = load i8*, i8** %t1, align 8, !dbg !34, !phasar.instruction.id !36, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %tainted, metadata !29, metadata !26), !dbg !30, !phasar.instruction.id !31, ID: 3 in function: foo
D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !32, !phasar.instruction.id !33, ID: 4 in function: foo
D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !34, !phasar.instruction.id !35, ID: 5 in function: foo
D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i8*, i8** %t1, align 8, !dbg !34, !phasar.instruction.id !36, ID: 6 in function: foo
D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i8*, i8** %tainted, align 8, !dbg !38, !phasar.instruction.id !39, ID: 8 in function: foo
D:	%struct.s1* %s1, ID: foo.0
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !24, ID: 1

D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i8* %1, !dbg !40, !phasar.instruction.id !41, ID: 9 in function: foo
D:	%struct.s1* %s1, ID: foo.0
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !24, ID: 1

D:	%struct.s1* %s1, ID: foo.0
A:	%struct.s1* %s1, ID: foo.0
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	%1 = load i8*, i8** %tainted, align 8, !dbg !38, !phasar.instruction.id !39, ID: 8

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %foo_ptr = alloca i8* (%struct.s1*)*, align 8, !phasar.instruction.id !14, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %ret = alloca i8*, align 8, !phasar.instruction.id !15, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t12 = alloca i8*, align 8, !phasar.instruction.id !16, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !51, metadata !26), !dbg !52, !phasar.instruction.id !53, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35, ID: 17

--- IFDS START RESULT RECORD ---
N: %t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !34, !phasar.instruction.id !35, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8* (%struct.s1*)** %foo_ptr, metadata !62, metadata !26), !dbg !64, !phasar.instruction.id !65, ID: 21 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* (%struct.s1*)* @foo, i8* (%struct.s1*)** %foo_ptr, align 8, !dbg !46, !phasar.instruction.id !48, ID: 22 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %ret, metadata !67, metadata !26), !dbg !68, !phasar.instruction.id !69, ID: 23 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i8* (%struct.s1*)*, i8* (%struct.s1*)** %foo_ptr, align 8, !dbg !52, !phasar.instruction.id !53, ID: 24 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54, ID: 25 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call1, i8** %ret, align 8, !dbg !50, !phasar.instruction.id !55, ID: 26 in function: main
D:	%call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54, ID: 25
A:	%call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54, ID: 25

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %t12, metadata !74, metadata !26), !dbg !75, !phasar.instruction.id !76, ID: 27 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	%call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54, ID: 25
A:	%ret = alloca i8*, align 8, !phasar.instruction.id !15, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i8*, i8** %ret, align 8, !dbg !59, !phasar.instruction.id !60, ID: 28 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !

40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	%call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54, ID: 25
A:	%ret = alloca i8*, align 8, !phasar.instruction.id !15, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %1, i8** %t12, align 8, !dbg !57, !phasar.instruction.id !61, ID: 29 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	%call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54, ID: 25
A:	%ret = alloca i8*, align 8, !phasar.instruction.id !15, ID: 13

D:	%1 = load i8*, i8** %ret, align 8, !dbg !59, !phasar.instruction.id !60, ID: 28

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !62, !phasar.instruction.id !63, ID: 30 in function: main
D:	store i8* %call, i8** %t1, align 8, !dbg !40, !phasar.instruction.id !41, ID: 20
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 11
A:	%s2 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 1, !dbg !36, !phasar.instruction.id !37, ID: 18
A:	%t1 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 2, !dbg !38, !phasar.instruction.id !39, ID: 19

D:	%call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54, ID: 25
A:	%ret = alloca i8*, align 8, !phasar.instruction.id !15, ID: 13

D:	%call1 = call i8* %0(%struct.s1* byval align 8 %s1), !dbg !52, !phasar.instruction.id !54, ID: 25
A:	%t12 = alloca i8*, align 8, !phasar.instruction.id !16, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1


No IFDS report available!