PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !12

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %tainted = alloca i8*, align 8, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !14

Got store instruction
[TRACK]:i32 0
[TRACK]: srcMemLocation: 0
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !35, metadata !17), !dbg !36, !phasar.instruction.id !37

getSummaryFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22

getNormalFlowFunction()
  store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23

Got store instruction
[TRACK]:  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
[TRACK]: srcMemLocation: 0
getNormalFlowFunction()
  %0 = load i8*, i8** %tainted, align 8, !dbg !24, !phasar.instruction.id !25

Got load instruction
getSummaryFlowFunction()
  call void @foo(i8* %0), !dbg !26, !phasar.instruction.id !27

getCallFlowFunction()
  call void @foo(i8* %0), !dbg !26, !phasar.instruction.id !27

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %tainted = alloca i8*, align 8, !phasar.instruction.id !13
[TRACK] Destination:
[TRACK] i8* %tainted
getNormalFlowFunction()
  %tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %also_tainted = alloca i8*, align 8, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i8* %tainted, i8** %tainted.addr, align 8, !phasar.instruction.id !15

Got store instruction
[TRACK]:i8* %tainted
[TRACK]: srcMemLocation: 1
[TRACK] i8* %tainted
[TRACK] Patched memory location (arg/store)
[TRACK] Source:
[TRACK] i8* %tainted
[TRACK] Destination:
[TRACK]   %tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted.addr, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %also_tainted, metadata !20, metadata !17), !dbg !21, !phasar.instruction.id !22

getNormalFlowFunction()
  %0 = load i8*, i8** %tainted.addr, align 8, !dbg !23, !phasar.instruction.id !24

Got load instruction
getNormalFlowFunction()
  store i8* %0, i8** %also_tainted, align 8, !dbg !21, !phasar.instruction.id !25

Got store instruction
[TRACK]:  %0 = load i8*, i8** %tainted.addr, align 8, !dbg !23, !phasar.instruction.id !24
[TRACK]: srcMemLocation: 1
[TRACK]   %tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13
[TRACK]:  %0 = load i8*, i8** %tainted.addr, align 8, !dbg !23, !phasar.instruction.id !24
[TRACK]: srcMemLocation: 1
[TRACK]   %tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13
[TRACK] Destination:
[TRACK]   %also_tainted = alloca i8*, align 8, !phasar.instruction.id !14
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getRetFlowFunction()
getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @foo(i8* %0), !dbg !26, !phasar.instruction.id !27

getCallToRetFlowFunction()
[TRACK]:  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22
[TRACK]: srcMemLocation: 0
getSummaryFlowFunction()
  call void @foo(i8* %0), !dbg !26, !phasar.instruction.id !27

[TRACK]:i8* %tainted
[TRACK]: srcMemLocation: 1
[TRACK] i8* %tainted
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted.addr, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %also_tainted, metadata !20, metadata !17), !dbg !21, !phasar.instruction.id !22

[TRACK]:  %0 = load i8*, i8** %tainted.addr, align 8, !dbg !23, !phasar.instruction.id !24
[TRACK]: srcMemLocation: 1
[TRACK]   %tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13
getCallToRetFlowFunction()
getCallFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !35, metadata !17), !dbg !36, !phasar.instruction.id !37

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %tainted.addr, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %also_tainted, metadata !20, metadata !17), !dbg !21, !phasar.instruction.id !22

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %tainted = alloca i8*, align 8, !phasar.instruction.id !13
[TRACK] Destination:
[TRACK] i8* %tainted### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13, ID: 1 in function: foo
D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	i8* %tainted, ID: foo.0

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i8*, i8** %tainted.addr, align 8, !dbg !23, !phasar.instruction.id !24, ID: 6 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13, ID: 1

--- IFDS START RESULT RECORD ---
N: %tainted = alloca i8*, align 8, !phasar.instruction.id !13, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %tainted.addr, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 4 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13, ID: 1

--- IFDS START RESULT RECORD ---
N: store i8* %0, i8** %also_tainted, align 8, !dbg !21, !phasar.instruction.id !25, ID: 7 in function: foo
D:	%0 = load i8*, i8** %tainted.addr, align 8, !dbg !23, !phasar.instruction.id !24, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13, ID: 1

--- IFDS START RESULT RECORD ---
N: store i8* %tainted, i8** %tainted.addr, align 8, !phasar.instruction.id !15, ID: 3 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	i8* %tainted, ID: foo.0

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %also_tainted, metadata !20, metadata !17), !dbg !21, !phasar.instruction.id !22, ID: 5 in function: foo
D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13, ID: 1

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret void, !dbg !26, !phasar.instruction.id !27, ID: 8 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%tainted.addr = alloca i8*, align 8, !phasar.instruction.id !13, ID: 1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%also_tainted = alloca i8*, align 8, !phasar.instruction.id !14, ID: 2

--- IFDS START RESULT RECORD ---
N: %also_tainted = alloca i8*, align 8, !phasar.instruction.id !14, ID: 2 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	i8* %tainted, ID: foo.0

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %tainted, metadata !35, metadata !17), !dbg !36, !phasar.instruction.id !37, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14 
in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 13

--- IFDS START RESULT RECORD ---
N: %0 = load i8*, i8** %tainted, align 8, !dbg !24, !phasar.instruction.id !25, ID: 15 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !13, ID: 10

--- IFDS START RESULT RECORD ---
N: call void @foo(i8* %0), !dbg !26, !phasar.instruction.id !27, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !13, ID: 10

D:	%0 = load i8*, i8** %tainted, align 8, !dbg !24, !phasar.instruction.id !25, ID: 15

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !28, !phasar.instruction.id !29, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !19, !phasar.instruction.id !23, ID: 14
A:	%tainted = alloca i8*, align 8, !phasar.instruction.id !13, ID: 10

D:	%0 = load i8*, i8** %tainted, align 8, !dbg !24, !phasar.instruction.id !25, ID: 15


No IFDS report available!