PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !12

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %taint = alloca i32, align 4, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %a = alloca i32, align 4, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19

getSummaryFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21

getNormalFlowFunction()
  %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22

Got operands checking instruction (icmp)
getNormalFlowFunction()
  br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24

Got branch instruction
getSummaryFlowFunction()
  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

getNormalFlowFunction()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32

Got operands checking instruction (icmp)
getNormalFlowFunction()
  br label %land.end, !phasar.instruction.id !33

Got branch instruction
getNormalFlowFunction()
  %0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34

Got phi node instruction
getNormalFlowFunction()
  %land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35

Got operands checking instruction (zext)
getNormalFlowFunction()
  store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36

Got store instruction
getCallToRetFlowFunction()
getNormalFlowFunction()
  br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24

Got branch instruction
getSummaryFlowFunction()
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26

getNormalFlowFunction()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27

Got operands checking instruction (icmp)
getNormalFlowFunction()
  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29

Got branch instruction
getNormalFlowFunction()
  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29

Got branch instruction
getCallToRetFlowFunction()
getSummaryFlowFunction()
  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39

getNormalFlowFunction()
  %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41

Got load instruction
getNormalFlowFunction()
  store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
[TRACK]   %taint = alloca i32, align 4, !phasar.instruction.id !13
[TRACK] Destination:
[TRACK]   store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36
[TRACK]   %a = alloca i32, align 4, !phasar.instruction.id !14
getCallToRetFlowFunction()
getSummaryFlowFunction()
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26

getSummaryFlowFunction()
  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

getSummaryFlowFunction()
  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

getCallToRetFlowFunction()
getSummaryFlowFunction()
  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39

getSummaryFlowFunction()
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26

getCallToRetFlowFunction()
getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19

getCallFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21

getCallFlowFunction()
  %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26

getCallFlowFunction()
  %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !42, ID: 20 in function: main
D:	store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19

--- IFDS START RESULT RECORD ---
N: store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15

D:	%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13

D:	%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12

D:	%land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16

D:	%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %taint, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
L:	land.end

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !22, ID: 7 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10 in function: main
D:	br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
L:	land.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %land.ext = zext i1 %0 to i32, !dbg !28, !phasar.instruction.id !35, ID: 16 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	%0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15

D:	%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13

D:	%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9

--- IFDS START RESULT RECORD ---
N: br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11 in function: main
D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !25, !phasar.instruction.id !27, ID: 10

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
L:	land.end

D:	%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9

--- IFDS START RESULT RECORD ---
N: %call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12 in function: main
D:	br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
L:	land.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
L:	land.end

--- IFDS START RESULT RECORD ---
N: %tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13 in function: main
D:	br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
L:	land.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
L:	land.end

D:	%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12

--- IFDS START RESULT RECORD ---
N: br label %land.end, !phasar.instruction.id !33, ID: 14 in function: main
D:	br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
L:	land.end

D:	%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13

D:	%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12

D:	%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	br i1 %tobool, label %land.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
L:	land.end

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = phi i1 [ false, %lor.lhs.false ], [ %tobool4, %land.rhs ], !phasar.instruction.id !34, ID: 15 in function: main
D:	%call3 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 12

D:	%tobool4 = icmp ne i32 %call3, 0, !dbg !28, !phasar.instruction.id !32, ID: 13

D:	br i1 %tobool2, label %land.end, label %land.rhs, !dbg !28, !phasar.instruction.id !29, ID: 11
L:	land.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call1 = call i32 (...) @foo(), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !20, !phasar.instruction.id !21, ID: 6

D:	br i1 %tobool, label %l

and.rhs, label %lor.lhs.false, !dbg !23, !phasar.instruction.id !24, ID: 8
L:	land.end

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !17), !dbg !38, !phasar.instruction.id !39, ID: 18 in function: main
D:	store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %taint, align 4, !dbg !40, !phasar.instruction.id !41, ID: 19 in function: main
D:	store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !43, !phasar.instruction.id !44, ID: 21 in function: main
D:	store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %land.ext, i32* %taint, align 4, !dbg !18, !phasar.instruction.id !36, ID: 17
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1


No IFDS report available!