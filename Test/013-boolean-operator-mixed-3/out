PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %taint = alloca i32, align 4, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %a = alloca i32, align 4, !phasar.instruction.id !15

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20

getSummaryFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22

getNormalFlowFunction()
  %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23

Got operands checking instruction (icmp)
getNormalFlowFunction()
  br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25

Got branch instruction
getSummaryFlowFunction()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32

getNormalFlowFunction()
  %tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33

Got operands checking instruction (icmp)
getNormalFlowFunction()
  br label %lor.end, !dbg !29, !phasar.instruction.id !34

Got branch instruction
getNormalFlowFunction()
  %0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35

Got phi node instruction
getNormalFlowFunction()
  %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36

Got operands checking instruction (zext)
getNormalFlowFunction()
  store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37

Got store instruction
getCallToRetFlowFunction()
getNormalFlowFunction()
  br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25

Got branch instruction
getSummaryFlowFunction()
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27

getNormalFlowFunction()
  %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28

Got operands checking instruction (icmp)
getNormalFlowFunction()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30

Got branch instruction
getNormalFlowFunction()
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30

Got branch instruction
getCallToRetFlowFunction()
getSummaryFlowFunction()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32

getSummaryFlowFunction()
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27

getCallToRetFlowFunction()
getSummaryFlowFunction()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40

getNormalFlowFunction()
  %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42

Got load instruction
getNormalFlowFunction()
  store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %taint = alloca i32, align 4, !phasar.instruction.id !14
[TRACK] Destination:
[TRACK]   %a = alloca i32, align 4, !phasar.instruction.id !15
getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40

getSummaryFlowFunction()
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27

getCallToRetFlowFunction()
getCallFlowFunction()
  %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32

getCallFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20

getCallFlowFunction()
  %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %lor.end, !dbg !29, !phasar.instruction.id !34, ID: 15 in function: main
D:	%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

D:	%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %taint, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %lor.rhs, label %land.lhs.true, !dbg !24, !phasar.instruction.id !25, ID: 9 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 10 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool2 = icmp ne i32 %call1, 0, !dbg !26, !phasar.instruction.id !28, ID: 11 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16

D:	%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

--- IFDS START RESULT RECORD ---
N: br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !29, !phasar.instruction.id !30, ID: 12 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13

--- IFDS START RESULT RECORD ---
N: %0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16 in function: main
D:	%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

D:	%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%0 = phi i1 [ true, %land.lhs.true ], [ %tobool4, %lor.rhs ], !phasar.instruction.id !35, ID: 16

D:	%tobool4 = icmp ne i32 %call3, 0, !dbg !29, !phasar.instruction.id !33, ID: 14

D:	%lor.ext = zext i1 %0 to i32, !dbg !29, !phasar.instruction.id !36, ID: 17

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 8

D:	%call3 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0)), !dbg !31, !phasar.instruction.id !32, ID: 13

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !18), !dbg !39, !phasar.instruction.id !40, ID: 19 in function: main
D:	store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42, ID: 20 in function: main
D:	store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %1, i32* %a, align 4, !dbg !39, !phasar.instruction.id !43, ID: 21 in function: main
D:	store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !42, ID: 20

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N

: ret i32 0, !dbg !44, !phasar.instruction.id !45, ID: 22 in function: main
D:	store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %lor.ext, i32* %taint, align 4, !dbg !19, !phasar.instruction.id !37, ID: 18
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1


No IFDS report available!