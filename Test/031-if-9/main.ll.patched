; ModuleID = 'main.c'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"gude\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @main() #0 !dbg !7 {
entry:
  %retval = alloca i32, align 4
  %rc = alloca i32, align 4
  %taint = alloca i32, align 4
  %a = alloca i32, align 4
  %a20 = alloca i32, align 4
  %b = alloca i32, align 4
  %a22 = alloca i32, align 4
  %a25 = alloca i32, align 4
  %a28 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !11, metadata !12), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %taint, metadata !14, metadata !12), !dbg !15
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !16
  store i32 %call, i32* %taint, align 4, !dbg !15
  %call1 = call i32 (...) @foo(), !dbg !17
  %tobool = icmp ne i32 %call1, 0, !dbg !17
  br i1 %tobool, label %if.then, label %if.else9, !dbg !19

if.then:                                          ; preds = %entry
  %0 = load i32, i32* %taint, align 4, !dbg !20
  %tobool2 = icmp ne i32 %0, 0, !dbg !20
  br i1 %tobool2, label %if.then3, label %if.else7, !dbg !23

if.then3:                                         ; preds = %if.then
  %call4 = call i32 (...) @foo(), !dbg !24
  %tobool5 = icmp ne i32 %call4, 0, !dbg !24
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !27

if.then6:                                         ; preds = %if.then3
  store i32 1, i32* %rc, align 4, !dbg !28
  br label %if.end, !dbg !30

if.else:                                          ; preds = %if.then3
  store i32 1, i32* %rc, align 4, !dbg !31
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  store i32 1, i32* %rc, align 4, !dbg !33
  br label %if.end8, !dbg !34

if.else7:                                         ; preds = %if.then
  store i32 1, i32* %rc, align 4, !dbg !35
  br label %if.end8

if.end8:                                          ; preds = %if.else7, %if.end
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !12), !dbg !38
  store i32 100, i32* %a, align 4, !dbg !38
  br label %if.end27, !dbg !39

if.else9:                                         ; preds = %entry
  %call10 = call i32 (...) @foo(), !dbg !40
  %tobool11 = icmp ne i32 %call10, 0, !dbg !40
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !43

if.then12:                                        ; preds = %if.else9
  store i32 1, i32* %rc, align 4, !dbg !44
  br label %if.end26, !dbg !46

if.else13:                                        ; preds = %if.else9
  %call14 = call i32 (...) @foo(), !dbg !47
  %tobool15 = icmp ne i32 %call14, 0, !dbg !47
  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !50

if.then16:                                        ; preds = %if.else13
  store i32 100, i32* %rc, align 4, !dbg !51
  br label %if.end24, !dbg !53

if.else17:                                        ; preds = %if.else13
  %1 = load i32, i32* %taint, align 4, !dbg !54
  %tobool18 = icmp ne i32 %1, 0, !dbg !54
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !56

if.then19:                                        ; preds = %if.else17
  call void @llvm.dbg.declare(metadata i32* %a20, metadata !57, metadata !12), !dbg !59
  store i32 100, i32* %a20, align 4, !dbg !59
  call void @llvm.dbg.declare(metadata i32* %b, metadata !60, metadata !12), !dbg !61
  store i32 200, i32* %b, align 4, !dbg !61
  br label %if.end23, !dbg !62

if.else21:                                        ; preds = %if.else17
  call void @llvm.dbg.declare(metadata i32* %a22, metadata !63, metadata !12), !dbg !65
  store i32 100, i32* %a22, align 4, !dbg !65
  br label %if.end23

if.end23:                                         ; preds = %if.else21, %if.then19
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then16
  call void @llvm.dbg.declare(metadata i32* %a25, metadata !66, metadata !12), !dbg !67
  store i32 100, i32* %a25, align 4, !dbg !67
  br label %if.end26

if.end26:                                         ; preds = %if.end24, %if.then12
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end8
  call void @llvm.dbg.declare(metadata i32* %a28, metadata !68, metadata !12), !dbg !69
  store i32 1, i32* %a28, align 4, !dbg !69
  %2 = load i32, i32* %rc, align 4, !dbg !70
  %__IFDSENVIRONMENTVARIABLETRACING_DUMMY_BEFORE_RET__0 = urem i4711 4711, 4711
  ret i32 %2, !dbg !71
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @getenv(i8*) #2

declare i32 @foo(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 5.0.1 (tags/RELEASE_501/final 348479)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.c", directory: "/home/sebastian/.qt-creator-workspace/Phasar/Test/031-if-9")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 5.0.1 (tags/RELEASE_501/final 348479)"}
!7 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 6, type: !8, isLocal: false, isDefinition: true, scopeLine: 7, isOptimized: false, unit: !0, variables: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{!10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DILocalVariable(name: "rc", scope: !7, file: !1, line: 8, type: !10)
!12 = !DIExpression()
!13 = !DILocation(line: 8, column: 9, scope: !7)
!14 = !DILocalVariable(name: "taint", scope: !7, file: !1, line: 9, type: !10)
!15 = !DILocation(line: 9, column: 9, scope: !7)
!16 = !DILocation(line: 9, column: 17, scope: !7)
!17 = !DILocation(line: 11, column: 9, scope: !18)
!18 = distinct !DILexicalBlock(scope: !7, file: !1, line: 11, column: 9)
!19 = !DILocation(line: 11, column: 9, scope: !7)
!20 = !DILocation(line: 12, column: 13, scope: !21)
!21 = distinct !DILexicalBlock(scope: !22, file: !1, line: 12, column: 13)
!22 = distinct !DILexicalBlock(scope: !18, file: !1, line: 11, column: 16)
!23 = !DILocation(line: 12, column: 13, scope: !22)
!24 = !DILocation(line: 13, column: 17, scope: !25)
!25 = distinct !DILexicalBlock(scope: !26, file: !1, line: 13, column: 17)
!26 = distinct !DILexicalBlock(scope: !21, file: !1, line: 12, column: 20)
!27 = !DILocation(line: 13, column: 17, scope: !26)
!28 = !DILocation(line: 14, column: 20, scope: !29)
!29 = distinct !DILexicalBlock(scope: !25, file: !1, line: 13, column: 24)
!30 = !DILocation(line: 15, column: 13, scope: !29)
!31 = !DILocation(line: 16, column: 20, scope: !32)
!32 = distinct !DILexicalBlock(scope: !25, file: !1, line: 15, column: 20)
!33 = !DILocation(line: 18, column: 16, scope: !26)
!34 = !DILocation(line: 19, column: 9, scope: !26)
!35 = !DILocation(line: 20, column: 16, scope: !36)
!36 = distinct !DILexicalBlock(scope: !21, file: !1, line: 19, column: 16)
!37 = !DILocalVariable(name: "a", scope: !22, file: !1, line: 22, type: !10)
!38 = !DILocation(line: 22, column: 13, scope: !22)
!39 = !DILocation(line: 23, column: 5, scope: !22)
!40 = !DILocation(line: 24, column: 13, scope: !41)
!41 = distinct !DILexicalBlock(scope: !42, file: !1, line: 24, column: 13)
!42 = distinct !DILexicalBlock(scope: !18, file: !1, line: 23, column: 12)
!43 = !DILocation(line: 24, column: 13, scope: !42)
!44 = !DILocation(line: 25, column: 16, scope: !45)
!45 = distinct !DILexicalBlock(scope: !41, file: !1, line: 24, column: 20)
!46 = !DILocation(line: 26, column: 9, scope: !45)
!47 = !DILocation(line: 27, column: 17, scope: !48)
!48 = distinct !DILexicalBlock(scope: !49, file: !1, line: 27, column: 17)
!49 = distinct !DILexicalBlock(scope: !41, file: !1, line: 26, column: 16)
!50 = !DILocation(line: 27, column: 17, scope: !49)
!51 = !DILocation(line: 28, column: 20, scope: !52)
!52 = distinct !DILexicalBlock(scope: !48, file: !1, line: 27, column: 24)
!53 = !DILocation(line: 29, column: 13, scope: !52)
!54 = !DILocation(line: 30, column: 22, scope: !55)
!55 = distinct !DILexicalBlock(scope: !48, file: !1, line: 30, column: 22)
!56 = !DILocation(line: 30, column: 22, scope: !48)
!57 = !DILocalVariable(name: "a", scope: !58, file: !1, line: 31, type: !10)
!58 = distinct !DILexicalBlock(scope: !55, file: !1, line: 30, column: 29)
!59 = !DILocation(line: 31, column: 21, scope: !58)
!60 = !DILocalVariable(name: "b", scope: !58, file: !1, line: 32, type: !10)
!61 = !DILocation(line: 32, column: 21, scope: !58)
!62 = !DILocation(line: 33, column: 13, scope: !58)
!63 = !DILocalVariable(name: "a", scope: !64, file: !1, line: 34, type: !10)
!64 = distinct !DILexicalBlock(scope: !55, file: !1, line: 33, column: 20)
!65 = !DILocation(line: 34, column: 21, scope: !64)
!66 = !DILocalVariable(name: "a", scope: !49, file: !1, line: 36, type: !10)
!67 = !DILocation(line: 36, column: 17, scope: !49)
!68 = !DILocalVariable(name: "a", scope: !7, file: !1, line: 39, type: !10)
!69 = !DILocation(line: 39, column: 9, scope: !7)
!70 = !DILocation(line: 41, column: 12, scope: !7)
!71 = !DILocation(line: 41, column: 5, scope: !7)
