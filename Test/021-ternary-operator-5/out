PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %taint = alloca i32, align 4, !phasar.instruction.id !13
[TRACK] Destination:
[TRACK]   %a = alloca i32, align 4, !phasar.instruction.id !14### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %taint, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a4 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %nt = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %cmp = icmp eq i32 %call, 0, !dbg !24, !phasar.instruction.id !25, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 (...) @foo(), !dbg !22, !phasar.instruction.id !23, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %cmp, label %cond.true, label %cond.false, !dbg !22, !phasar.instruction.id !26, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !39, ID: 18 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %cond.end, !dbg !22, !phasar.instruction.id !29, ID: 12 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call2 = call i32 (...) @bar(), !dbg !30, !phasar.instruction.id !31, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %cond.end, !dbg !22, !phasar.instruction.id !32, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !22, !phasar.instruction.id !33, ID: 15 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	%cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !22, !phasar.instruction.id !33, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !35, metadata !19), !dbg !36, !phasar.instruction.id !37, ID: 17 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %0, i32* %a, align 4, !dbg !36, !phasar.instruction.id !40, ID: 19 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	%0 = load i32, i32* %taint, align 4, !dbg !38, !phasar.instruction.id !39, ID: 18

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %nt, metadata !41, metadata !19), !dbg !42, !phasar.instruction.id !43, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %nt, align 4, !dbg !44, !phasar.instruction.id !46, ID: 21 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %cmp3 = icmp eq i32 %1, 0, !dbg !47, !phasar.instruction.id !48, ID: 22 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %if.end, !dbg !56, !phasar.instruction.id !57, ID: 26 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !58, !phasar.instruction.id !59, ID: 27 in function: main
D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549913746-trace.txt
]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: br i1 %cmp3, label %if.then, label %if.end, !dbg !49, !phasar.instruction.id !50, ID: 23 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a4, metadata !51, metadata !19), !dbg !53, !phasar.instruction.id !54, ID: 24 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %a4, align 4, !dbg !53, !phasar.instruction.id !55, ID: 25 in function: main
D:	%call1 = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %cond, i32* %taint, align 4, !dbg !20, !phasar.instruction.id !34, ID: 16
A:	%taint = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1


