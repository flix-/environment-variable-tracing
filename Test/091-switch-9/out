PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !20, metadata !21), !dbg !22, !phasar.instruction.id !23, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %taint, metadata !24, metadata !21), !dbg !25, !phasar.instruction.id !26, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !19, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a7 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: br label %sw.bb, !dbg !37, !phasar.instruction.id !38, ID: 16 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%0 = load i32, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !31, ID: 13

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: br label %sw.bb2, !dbg !46, !phasar.instruction.id !47, ID: 20 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !41, !phasar.instruction.id !42, ID: 18

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %2 = load i32, i32* %taint, align 4, !dbg !64, !phasar.instruction.id !65, ID: 29 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !41, !phasar.instruction.id !42, ID: 18 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%1 = load i32, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !41, !phasar.instruction.id !42, ID: 18

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !41, !phasar.instruction.id !42, ID: 18

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !41, !phasar.instruction.id !42, ID: 18

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %sw.epilog, !dbg !52, !phasar.instruction.id !53, ID: 23 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !41, !phasar.instruction.id !42, ID: 18

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %1, label %sw.default1 [
    i32 0, label %sw.bb2
  ], !dbg !41, !phasar.instruction.id !42, ID: 18

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %sw.epilog4, !dbg !58, !phasar.instruction.id !59, ID: 26 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a5, metadata !60, metadata !21), !dbg !61, !phasar.instruction.id !62, ID: 27 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %a5, align 4, !dbg !61, !phasar.instruction.id !63, ID: 28 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %3 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76, ID: 34 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 0, i32* %a7, align 4, !dbg !70, !phasar.instruction.id !72, ID: 32
A:	%a7 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7

D:	call void @llvm.dbg.declare(metadata i32* %a7, metadata !68, metadata !21), !dbg !70, !phasar.instruction.id !71, ID: 31

D:	switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !66, !phasar.instruction.id !67, ID: 30

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: br label %sw.epilog8, !dbg !73, !phasar.instruction.id !74, ID: 33 in function: main
D:	store i32 0, i32* %a7, align 4, !dbg !70, !phasar.instruction.id !72, ID: 32
A:	%a7 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7

D:	call void @llvm.dbg.declare(metadata i32* %a7, metadata !68, metadata !21), !dbg !70, !phasar.instruction.id !71, ID: 31

D:	switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !66, !phasar.instruction.id !67, ID: 30

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

--- IFDS START RESULT RECORD ---
N: switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !66, !phasar.instruction.id !67, ID: 30 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%2 = load i32, i32* %taint, align 4, !dbg !64, !phasar.instruction.id !65, ID: 29

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a7, metadata !68, metadata !21), !dbg !70, !phasar.instruction.id !71, ID: 31 in function: main
D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !66, !phasar.instruction.id !67, ID: 30

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %a7, align 4, !dbg !70, !phasar.instruction.id !72, ID: 32 in function: main
D:	switch i32 %2, label %sw.epilog8 [
    i32 0, label %sw.bb6
  ], !dbg !66, !phasar.instruction.id !67, ID: 30

D:	call void @llvm.dbg.declare(metadata i32* %a7, metadata !68, metadata !21), !dbg !70, !phasar.instruction.id !71, ID: 31

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

--- IFDS START RESULT RECORD ---
N: ret i32 %3, !dbg !77, !phasar.instruction.id !78, ID: 35 in function: main
D:	store i32 0, i32* %a7, align 4, !dbg !70, !phasar.instruction.id !72, ID: 32
A:	%a7 = alloca i32, align 4, !phasar.instruction.id !18, ID: 7

D:	call void @llvm.dbg.declare(metadata i32* %a7, metadata !68, metadata !21), !dbg !70, !phasar.instruction.id !71, ID: 31

D:	%3 = load i32, i32* %rc, align 4, !dbg !75, !phasar.instruction.id !76, ID: 34

D:	store i32 1, i32* %a3, align 4, !dbg !55, !phasar.instruction.id !57, ID: 25
A:	%a3 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a3, metadata !54, metadata !21), !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 1, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 22
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !48, metadata !21), !dbg !49, !phasar.instruction.id !50, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !45, ID: 19
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !34, !phasar.instruction.id !36, ID: 15
A:	%rc = alloca i32, a[TRACK] Checking end of switch bb for: sw.epilog4
[TRACK] End of switch label: sw.epilog8
[TRACK] Checking end of switch bb for: sw.epilog4
[TRACK] End of switch label: sw.epilog8
[TRACK] Checking end of switch bb for: entry
[TRACK] End of switch label: sw.epilog4
[TRACK] Checking end of switch bb for: sw.bb
[TRACK] End of switch label: sw.epilog
[TRACK] Checking end of switch bb for: sw.bb
[TRACK] End of switch label: sw.epilog
[TRACK] Checking end of switch bb for: entry
[TRACK] End of switch label: sw.epilog4
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549967429-trace.txt
lign 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !25, !phasar.instruction.id !29, ID: 12
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !28, ID: 11


