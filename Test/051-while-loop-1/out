PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %while.cond, !dbg !19, !phasar.instruction.id !20, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7 in function: main
D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9 in function: main
D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6 in function: main
D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %while.cond, !dbg !19, !llvm.loop !35, !phasar.instruction.id !37, ID: 15 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8 in function: main
D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13 in function: main
D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10

D:	%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10 in function: main
D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8

--- IFDS START RESULT RECORD ---
N: br label %land.end, !phasar.instruction.id !29, ID: 11 in function: main
D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12 in function: main
D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !24, !phasar.instruction.id !25, ID: 8

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

--- IFDS START RESULT RECORD [TRACK] Searching end of tainted branch label for BB: while.cond
[TRACK] End of tainted block label: land.end
[TRACK] End of tainted branch label: land.end
[TRACK] Searching end of tainted branch label for BB: land.end
[TRACK] End of tainted block label: while.end
[TRACK] End of tainted branch label: while.end
[TRACK] Searching end of tainted branch label for BB: land.end
[TRACK] End of tainted block label: while.end
[TRACK] End of tainted branch label: while.end
[TRACK] Searching end of tainted branch label for BB: while.cond
[TRACK] End of tainted block label: land.end
[TRACK] End of tainted branch label: land.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1550311267-trace.txt
---
N: %1 = load i32, i32* %rc, align 4, !dbg !38, !phasar.instruction.id !39, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10

--- IFDS START RESULT RECORD ---
N: store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14 in function: main
D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10

D:	br i1 %0, label %while.body, label %while.end, !dbg !19, !phasar.instruction.id !31, ID: 13

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

--- IFDS START RESULT RECORD ---
N: ret i32 %1, !dbg !40, !phasar.instruction.id !41, ID: 17 in function: main
D:	%tobool = icmp ne i32 %call, 0, !dbg !21, !phasar.instruction.id !23, ID: 7

D:	%call1 = call i32 (...) @foo(), !dbg !26, !phasar.instruction.id !27, ID: 9

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !21, !phasar.instruction.id !22, ID: 6

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !24, !phasar.instruction.id !28, ID: 10

D:	%0 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !30, ID: 12

D:	store i32 100, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	ret i32 %1, !dbg !40, !phasar.instruction.id !41, ID: 17


