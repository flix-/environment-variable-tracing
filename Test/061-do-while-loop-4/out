PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: br label %do.body, !dbg !19, !llvm.loop !20, !phasar.instruction.id !22, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %do.body1, !dbg !26, !llvm.loop !27, !phasar.instruction.id !29, ID: 7 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %tobool, label %do.body1, label %do.end, !dbg !33, !llvm.loop !27, !phasar.instruction.id !38, ID: 12
L:	do.end

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !15, metadata !16), !dbg !17, !phasar.instruction.id !18, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %do.body1, label %do.end, !dbg !33, !llvm.loop !27, !phasar.instruction.id !38, ID: 12
L:	do.end

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

--- IFDS START RESULT RECORD ---
N: store i32 42, i32* %rc, align 4, !dbg !23, !phasar.instruction.id !25, ID: 6 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %do.cond, !dbg !33, !phasar.instruction.id !34, ID: 9 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %tobool, label %do.body1, label %do.end, !dbg !33, !llvm.loop !27, !phasar.instruction.id !38, ID: 12
L:	do.end

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !33, !phasar.instruction.id !37, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %do.body1, label %do.end, !dbg !33, !llvm.loop !27, !phasar.instruction.id !38, ID: 12
L:	do.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = [TRACK] Checking end of branch label for: do.cond
[TRACK] End of branch label: do.end
[TRACK] Checking end of branch label for: do.cond
[TRACK] End of branch label: do.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549637052-trace.txt
alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %do.body1, label %do.end, !dbg !33, !llvm.loop !27, !phasar.instruction.id !38, ID: 12 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%tobool = icmp ne i32 %call, 0, !dbg !33, !phasar.instruction.id !37, ID: 11

D:	br i1 %tobool, label %do.body1, label %do.end, !dbg !33, !llvm.loop !27, !phasar.instruction.id !38, ID: 12
L:	do.end

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %do.cond2, !dbg !39, !phasar.instruction.id !40, ID: 13 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %tobool, label %do.body1, label %do.end, !dbg !33, !llvm.loop !27, !phasar.instruction.id !38, ID: 12
L:	do.end

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call3 = call i32 (...) @foo(), !dbg !41, !phasar.instruction.id !42, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

--- IFDS START RESULT RECORD ---
N: %tobool4 = icmp ne i32 %call3, 0, !dbg !39, !phasar.instruction.id !43, ID: 15 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46, ID: 17 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool4, label %do.body, label %do.end5, !dbg !39, !llvm.loop !20, !phasar.instruction.id !44, ID: 16 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i32 %0, !dbg !47, !phasar.instruction.id !48, ID: 18 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !35, !phasar.instruction.id !36, ID: 10

D:	store i32 1, i32* %rc, align 4, !dbg !30, !phasar.instruction.id !32, ID: 8
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%0 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46, ID: 17


