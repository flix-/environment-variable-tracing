0 2019-Jan-05 22:32:23.946001 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 22:32:23.946416 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 22:32:23.946760 - [INFO] No configuration file is used.
3 2019-Jan-05 22:32:23.946836 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 22:32:23.946933 - [INFO] Check program options for logical errors.
5 2019-Jan-05 22:32:23.947021 - [INFO] Set-up IR database.
6 2019-Jan-05 22:32:23.953131 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 22:32:23.953243 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 22:32:23.953304 - [INFO] 	main.ll
9 2019-Jan-05 22:32:23.953363 - [INFO] Check for chosen entry points.
10 2019-Jan-05 22:32:23.953424 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 22:32:23.953482 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 22:32:23.953542 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 22:32:23.953878 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 22:32:23.954018 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 22:32:23.954501 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 22:32:23.954568 - [INFO] Allocated Types    : 1
17 2019-Jan-05 22:32:23.954633 - [INFO] Allocation Sites   : 4
18 2019-Jan-05 22:32:23.954691 - [INFO] Basic Blocks       : 9
19 2019-Jan-05 22:32:23.954749 - [INFO] Calls Sites        : 4
20 2019-Jan-05 22:32:23.954807 - [INFO] Functions          : 3
21 2019-Jan-05 22:32:23.954865 - [INFO] Globals            : 1
22 2019-Jan-05 22:32:23.954923 - [INFO] Global Pointer     : 1
23 2019-Jan-05 22:32:23.954981 - [INFO] Instructions       : 32
24 2019-Jan-05 22:32:23.955039 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 22:32:23.955098 - [INFO] Store Instructions : 6
26 2019-Jan-05 22:32:23.955155 - [INFO]  
27 2019-Jan-05 22:32:23.955231 - [INFO]   i32
28 2019-Jan-05 22:32:23.955832 - [DEBUG] Analyzing function: main
29 2019-Jan-05 22:32:23.956140 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 22:32:23.956203 - [INFO] Construct type hierarchy
31 2019-Jan-05 22:32:23.956264 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 22:32:23.956464 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 22:32:23.956533 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 22:32:23.956595 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 22:32:23.956707 - [DEBUG] Walking in function: main
36 2019-Jan-05 22:32:23.956793 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2019-Jan-05 22:32:23.957187 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 22:32:23.957246 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 22:32:23.957332 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 22:32:23.957395 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 22:32:23.957459 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7
42 2019-Jan-05 22:32:23.957797 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 22:32:23.957856 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 22:32:23.957931 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 22:32:23.957993 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 22:32:23.958057 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
47 2019-Jan-05 22:32:23.958419 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 22:32:23.958478 - [DEBUG] Target name: getenv
49 2019-Jan-05 22:32:23.958558 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 22:32:23.958621 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 22:32:23.958685 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
52 2019-Jan-05 22:32:23.959018 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 22:32:23.959077 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-05 22:32:23.959152 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-05 22:32:23.959214 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-05 22:32:23.959279 - [INFO] Call graph has been constructed
57 2019-Jan-05 22:32:23.959341 - [INFO] Performing analysis: plugin
58 2019-Jan-05 22:32:23.959407 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/MonoIntraEnvironmentVariableTracing/libMonoIntraEnvironmentVariableTracing.so'
59 2019-Jan-05 22:32:23.959912 - [INFO] Solving plugin: monoIntraEnvironmentVariableTracing
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/MonoIntraEnvironmentVariableTracing/libMonoIntraEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %i = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %j = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  br label %for.cond, !dbg !26, !phasar.instruction.id !27
Got branch instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
=============

Added line number: 9

  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 9
Added line number: 9

  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
=============

Added line number: 9
Added line number: 9
Added line number: 9

  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
=============

Added line number: 9
Added line number: 9
Added line number: 9

  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
=============

Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 10

  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 10

  br label %for.cond1, !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9
Added line number: 10

  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10

  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10

  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10

  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10

  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11

  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11

  br label %for.inc, !dbg !54, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11

  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10

  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10

  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10

  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 9

  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9

  br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 9

  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
Got load instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
=============

Added line number: 9
Added line number: 9

  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
=============


  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
=============


  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
=============


  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
=============


  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
Got load instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
=============


  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
=============


  br label %for.cond1, !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
=============


  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.inc, !dbg !54, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10

  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9

  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  br label %for.inc, !dbg !54, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
=============


  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
=============


  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============


  br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============


  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 15
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br label %for.cond1, !dbg !40, !phasar.instruction.id !41
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br label %for.inc3, !dbg !64, !phasar.instruction.id !65
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br label %for.inc, !dbg !54, !phasar.instruction.id !55
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============


  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============

Added line number: 11
Added line number: 10
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 9
Added line number: 9

  br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63
Dumping facts
=============
  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53
  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30
  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32
  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44
  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33
  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38
  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46
  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51
  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67
  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57
  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58
  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59
  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68
  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %i = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53

  store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30

  br label %for.cond, !dbg !26, !phasar.instruction.id !27
Got branch instruction

  store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25
Got store instruction
Removed 0 memory locations from facts

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts

  %tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32

  %0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44

  call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction

  %j = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  %4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75
Got load instruction
Adding load instruction fact

  br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33

  call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38

  br label %for.cond1, !dbg !40, !phasar.instruction.id !41

  %cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46

  %1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51

  %3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67

  br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48

  %2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57

  br label %for.inc, !dbg !54, !phasar.instruction.id !55

  %inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58

  store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59

  br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63

  br label %for.inc3, !dbg !64, !phasar.instruction.id !65

  %inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68

  store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69

  br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73

  ret i32 %4, !dbg !76, !phasar.instruction.id !77worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 24
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 25
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 18
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 1
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.cond, !dbg !26, !phasar.instruction.id !27, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
%4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75, ID: 31
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.cond1, !dbg !40, !phasar.instruction.id !41, ID: 15
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br i1 %cmp, label %for.body2, label %for.end, !dbg !47, !phasar.instruction.id !48, ID: 18
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.inc, !dbg !54, !phasar.instruction.id !55, ID: 21
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.cond1, !dbg !60, !llvm.loop !61, !phasar.instruction.id !63, ID: 25
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.inc3, !dbg !64, !phasar.instruction.id !65, ID: 26
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
br label %for.cond, !dbg !70, !llvm.loop !71, !phasar.instruction.id !73, ID: 30
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
br i1 %tobool, label %for.body, label %for.end5, !dbg !31, !phasar.instruction.id !33, ID: 12
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
sto60 2019-Jan-05 22:32:24.327114 - [INFO] Write results to file
61 2019-Jan-05 22:32:24.327317 - [INFO] Shutdown llvm and the analysis framework.

re i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


Instruction:
ret i32 %4, !dbg !76, !phasar.instruction.id !77, ID: 32
Facts:
store i32 %1, i32* %rc, align 4, !dbg !52, !phasar.instruction.id !53, ID: 20
store i32 0, i32* %j, align 4, !dbg !37, !phasar.instruction.id !39, ID: 14
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !28, !phasar.instruction.id !30, ID: 10
%tobool = icmp ne i32 %call, 0, !dbg !31, !phasar.instruction.id !32, ID: 11
%0 = load i32, i32* %j, align 4, !dbg !42, !phasar.instruction.id !44, ID: 16
%4 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75, ID: 31
call void @llvm.dbg.declare(metadata i32* %j, metadata !34, metadata !18), !dbg !37, !phasar.instruction.id !38, ID: 13
%cmp = icmp slt i32 %0, 10, !dbg !45, !phasar.instruction.id !46, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !49, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %i, align 4, !dbg !66, !phasar.instruction.id !67, ID: 27
%2 = load i32, i32* %j, align 4, !dbg !56, !phasar.instruction.id !57, ID: 22
%inc = add nsw i32 %2, 1, !dbg !56, !phasar.instruction.id !58, ID: 23
store i32 %inc, i32* %j, align 4, !dbg !56, !phasar.instruction.id !59, ID: 24
%inc4 = add nsw i32 %3, 1, !dbg !66, !phasar.instruction.id !68, ID: 28
store i32 %inc4, i32* %i, align 4, !dbg !66, !phasar.instruction.id !69, ID: 29


