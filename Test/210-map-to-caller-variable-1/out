PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !12

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %t = alloca i32, align 4, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %t2 = alloca i32, align 4, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t, metadata !31, metadata !14), !dbg !32, !phasar.instruction.id !33

getSummaryFlowFunction()
  %call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21

getCallFlowFunction()
  %call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21

getNormalFlowFunction()
  %t = alloca i32, align 4, !phasar.instruction.id !12

Got operands checking instruction (alloca)
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t, metadata !13, metadata !14), !dbg !15, !phasar.instruction.id !16

getSummaryFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !17, !phasar.instruction.id !18

getNormalFlowFunction()
  store i32 %call, i32* %t, align 4, !dbg !15, !phasar.instruction.id !19

Got store instruction
getNormalFlowFunction()
  %0 = load i32, i32* %t, align 4, !dbg !20, !phasar.instruction.id !21

Got load instruction
getNormalFlowFunction()
  %add = add nsw i32 %0, 1, !dbg !22, !phasar.instruction.id !23

Got operands checking instruction (add)
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getRetFlowFunction()
[TRACK] Added patchable memory location (caller <- callee)
[TRACK] Source:
[TRACK] Destination:
[TRACK]   %call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21
getNormalFlowFunction()
  store i32 %call, i32* %t, align 4, !dbg !18, !phasar.instruction.id !22

Got store instruction
[TRACK] Patched memory location (ret/store)
[TRACK] Source:
[TRACK]   %call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21
[TRACK] Destination:
[TRACK]   %t = alloca i32, align 4, !phasar.instruction.id !13
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t2, metadata !37, metadata !14), !dbg !38, !phasar.instruction.id !39

getNormalFlowFunction()
  %0 = load i32, i32* %t, align 4, !dbg !26, !phasar.instruction.id !27

Got load instruction
getNormalFlowFunction()
  store i32 %0, i32* %t2, align 4, !dbg !24, !phasar.instruction.id !28

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %t = alloca i32, align 4, !phasar.instruction.id !13
[TRACK] Destination:
[TRACK]   %t2 = alloca i32, align 4, !phasar.instruction.id !14
getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t2, metadata !37, metadata !14), !dbg !38, !phasar.instruction.id !39

getCallToRetFlowFunction()
getCallToRetFlowFunction()
getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t, metadata !13, metadata !14), !dbg !15, !phasar.instruction.id !16

getCallFlowFunction()
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !17, !phasar.instruction.id !18

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t, metadata !31, metadata !14), !dbg !32, !phasar.instruction.id !33

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32* %t2, metadata !37, metadata !14), !dbg !38, !phasar.instruction.id !39### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %t = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %call, i32* %t, align 4, !dbg !18, !phasar.instruction.id !22, ID: 14 in function: main
D:	%call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21, ID: 13
A:	%call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %t, metadata !13, metadata !14), !dbg !15, !phasar.instruction.id !16, ID: 2 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %call, i32* %t, align 4, !dbg !15, !phasar.instruction.id !19, ID: 4 in function: foo
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !17, !phasar.instruction.id !18, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !17, !phasar.instruction.id !18, ID: 3 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %add = add nsw i32 %0, 1, !dbg !22, !phasar.instruction.id !23, ID: 6 in function: foo
D:	store i32 %call, i32* %t, align 4, !dbg !15, !phasar.instruction.id !19, ID: 4
A:	%t = alloca i32, align 4, !phasar.instruction.id !12, ID: 1

D:	%0 = load i32, i32* %t, align 4, !dbg !20, !phasar.instruction.id !21, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %t, align 4, !dbg !20, !phasar.instruction.id !21, ID: 5 in function: foo
D:	store i32 %call, i32* %t, align 4, !dbg !15, !phasar.instruction.id !19, ID: 4
A:	%t = alloca i32, align 4, !phasar.instruction.id !12, ID: 1

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i32 %add, !dbg !24, !phasar.instruction.id !25, ID: 7 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%add = add nsw i32 %0, 1, !dbg !22, !phasar.instruction.id !23, ID: 6

D:	%0 = load i32, i32* %t, align 4, !dbg !20, !phasar.instruction.id !21, ID: 5

D:	store i32 %call, i32* %t, align 4, !dbg !15, !phasar.instruction.id !19, ID: 4
A:	%t = alloca i32, align 4, !phasar.instruction.id !12, ID: 1

--- IFDS START RESULT RECORD ---
N: %t = alloca i32, align 4, !phasar.instruction.id !13, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t2 = alloca i32, align 4, !phasar.instruction.id !14, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %t, metadata !31, metadata !14), !dbg !32, !phasar.instruction.id !33, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %t2, metadata !37, metadata !14), !dbg !38, !phasar.instruction.id !39, ID: 15 in function: main
D:	%call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21, ID: 13
A:	%t = alloca i32, align 4, !phasar.instruction.id !13, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %t, align 4, !dbg !26, !phasar.instruction.id !27, ID: 16 in function: main
D:	%call = call i32 @foo(), !dbg !20, !p

hasar.instruction.id !21, ID: 13
A:	%t = alloca i32, align 4, !phasar.instruction.id !13, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %0, i32* %t2, align 4, !dbg !24, !phasar.instruction.id !28, ID: 17 in function: main
D:	%call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21, ID: 13
A:	%t = alloca i32, align 4, !phasar.instruction.id !13, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%0 = load i32, i32* %t, align 4, !dbg !26, !phasar.instruction.id !27, ID: 16

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !29, !phasar.instruction.id !30, ID: 18 in function: main
D:	%call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21, ID: 13
A:	%t = alloca i32, align 4, !phasar.instruction.id !13, ID: 9

D:	%call = call i32 @foo(), !dbg !20, !phasar.instruction.id !21, ID: 13
A:	%t2 = alloca i32, align 4, !phasar.instruction.id !14, ID: 10

D:	@zero_value = constant i2 0, align 4, ID: -1


No IFDS report available!