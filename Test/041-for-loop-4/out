0 2019-Jan-05 22:32:24.622990 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 22:32:24.623409 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 22:32:24.623769 - [INFO] No configuration file is used.
3 2019-Jan-05 22:32:24.623845 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 22:32:24.623942 - [INFO] Check program options for logical errors.
5 2019-Jan-05 22:32:24.624031 - [INFO] Set-up IR database.
6 2019-Jan-05 22:32:24.630225 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 22:32:24.630336 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 22:32:24.630398 - [INFO] 	main.ll
9 2019-Jan-05 22:32:24.630457 - [INFO] Check for chosen entry points.
10 2019-Jan-05 22:32:24.630519 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 22:32:24.630577 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 22:32:24.630638 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 22:32:24.630982 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 22:32:24.631141 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 22:32:24.631575 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 22:32:24.631638 - [INFO] Allocated Types    : 1
17 2019-Jan-05 22:32:24.631703 - [INFO] Allocation Sites   : 4
18 2019-Jan-05 22:32:24.631761 - [INFO] Basic Blocks       : 9
19 2019-Jan-05 22:32:24.631819 - [INFO] Calls Sites        : 4
20 2019-Jan-05 22:32:24.631876 - [INFO] Functions          : 3
21 2019-Jan-05 22:32:24.631934 - [INFO] Globals            : 1
22 2019-Jan-05 22:32:24.631992 - [INFO] Global Pointer     : 1
23 2019-Jan-05 22:32:24.632049 - [INFO] Instructions       : 33
24 2019-Jan-05 22:32:24.632107 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 22:32:24.632164 - [INFO] Store Instructions : 6
26 2019-Jan-05 22:32:24.632222 - [INFO]  
27 2019-Jan-05 22:32:24.632297 - [INFO]   i32
28 2019-Jan-05 22:32:24.632908 - [DEBUG] Analyzing function: main
29 2019-Jan-05 22:32:24.633223 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 22:32:24.633287 - [INFO] Construct type hierarchy
31 2019-Jan-05 22:32:24.633348 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 22:32:24.633549 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 22:32:24.633618 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 22:32:24.633681 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 22:32:24.633793 - [DEBUG] Walking in function: main
36 2019-Jan-05 22:32:24.633879 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
37 2019-Jan-05 22:32:24.634274 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 22:32:24.634334 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 22:32:24.634459 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 22:32:24.634524 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 22:32:24.634588 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7
42 2019-Jan-05 22:32:24.634919 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 22:32:24.634978 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 22:32:24.635053 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 22:32:24.635115 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 22:32:24.635180 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39, ID: 13
47 2019-Jan-05 22:32:24.635505 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 22:32:24.635564 - [DEBUG] Target name: llvm.dbg.declare
49 2019-Jan-05 22:32:24.635638 - [DEBUG] Walking in function: llvm.dbg.declare
50 2019-Jan-05 22:32:24.635701 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
51 2019-Jan-05 22:32:24.635765 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
52 2019-Jan-05 22:32:24.636146 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 22:32:24.636206 - [DEBUG] Target name: getenv
54 2019-Jan-05 22:32:24.636286 - [DEBUG] Walking in function: getenv
55 2019-Jan-05 22:32:24.636349 - [DEBUG] Function already visited or only declaration: getenv
56 2019-Jan-05 22:32:24.636413 - [INFO] Call graph has been constructed
57 2019-Jan-05 22:32:24.636475 - [INFO] Performing analysis: plugin
58 2019-Jan-05 22:32:24.636542 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/MonoIntraEnvironmentVariableTracing/libMonoIntraEnvironmentVariableTracing.so'
59 2019-Jan-05 22:32:24.637049 - [INFO] Solving plugin: monoIntraEnvironmentVariableTracing
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/MonoIntraEnvironmentVariableTracing/libMonoIntraEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %i = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %j = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  br label %for.cond, !dbg !26, !phasar.instruction.id !27
Got branch instruction
Dumping facts
=============
=============


  %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30
Got load instruction
Dumping facts
=============
=============


  %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Dumping facts
=============
=============


  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Dumping facts
=============
=============


  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39
Got call instruction
Dumping facts
=============
=============


  store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  br label %for.cond1, !dbg !41, !phasar.instruction.id !42
Got branch instruction
Dumping facts
=============
=============


  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
Got load instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
=============

Added line number: 10

  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============

Added line number: 10
Added line number: 10
Added line number: 10

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============

Added line number: 10
Added line number: 10
Added line number: 10

  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============

Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10

  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10

  br label %for.inc, !dbg !57, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10

  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10

  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.inc4, !dbg !67, !phasar.instruction.id !68
Got branch instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70
Got load instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71
Got operands checking instruction (add)
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76
Got branch instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Dumping facts
=============
=============


  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
Got operands checking instruction (icmp)
Adding fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============


  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============


  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Got branch instruction
Adding conditional branch instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============


  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============


  br label %for.inc4, !dbg !67, !phasar.instruction.id !68
Got branch instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============


  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============


  br label %for.inc, !dbg !57, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
=============


  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
=============


  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
=============


  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============


  br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============


  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70
Got load instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============


  %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71
Got operands checking instruction (add)
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============


  store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============


  br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76
Got branch instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============


  %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30
Got load instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39
Got call instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.inc4, !dbg !67, !phasar.instruction.id !68
Got branch instruction
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============

Added line number: 10
Added line number: 10

  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70
Got load instruction
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.cond1, !dbg !41, !phasar.instruction.id !42
Got branch instruction
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
=============


  br label %for.inc, !dbg !57, !phasar.instruction.id !58
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71
Got operands checking instruction (add)
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76
Got branch instruction
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30
Got load instruction
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 10

  %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============


  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39
Got call instruction
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 15
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10

  store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40
Got store instruction
Removed 1 memory locations from facts
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
=============

Added line number: 11
Added line number: 10
Added line number: 10
Added line number: 10
Added line number: 11
Added line number: 10
Added line number: 10

  br label %for.cond1, !dbg !41, !phasar.instruction.id !42
Got branch instruction
Dumping facts
=============
  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47
  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45
  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49
  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54
  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60
  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %i = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47

  br label %for.cond, !dbg !26, !phasar.instruction.id !27
Got branch instruction

  store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40
Got store instruction
Removed 1 memory locations from facts

  store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25
Got store instruction
Removed 0 memory locations from facts

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !16
Got store instruction
Removed 0 memory locations from facts

  %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30
Got load instruction

  %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32
Got operands checking instruction (icmp)

  %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45

  %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78
Got load instruction
Adding load instruction fact

  br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34
Got branch instruction

  call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20
Got call instruction

  %j = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39
Got call instruction

  br label %for.cond1, !dbg !41, !phasar.instruction.id !42
Got branch instruction

  %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49

  %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54

  %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70
Got load instruction

  br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51

  %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60

  br label %for.inc, !dbg !57, !phasar.instruction.id !58

  %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61

  store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62

  br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66

  br label %for.inc4, !dbg !67, !phasar.instruction.id !68
Got branch instruction

  %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71
Got operands checking instruction (add)

  store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72
Got store instruction
Removed 0 memory locations from facts

  br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76
Got branch instruction

  ret i32 %5, !dbg !79, !phasar.instruction.id !80worklist size: 34
worklist size: 33
worklist size: 32
worklist size: 31
worklist size: 30
worklist size: 29
worklist size: 28
worklist size: 27
worklist size: 26
worklist size: 25
worklist size: 24
worklist size: 23
worklist size: 22
worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 17
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 4
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 3
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 2
worklist size: 1
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.cond, !dbg !26, !phasar.instruction.id !27, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40, ID: 14
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25, ID: 8
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30, ID: 10
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32, ID: 11
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78, ID: 32
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34, ID: 12
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6
Facts:
	EMPTY


Instruction:
%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39, ID: 13
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.cond1, !dbg !41, !phasar.instruction.id !42, ID: 15
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24


Instruction:
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70, ID: 28
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.inc, !dbg !57, !phasar.instruction.id !58, ID: 22
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66, ID: 26
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.inc4, !dbg !67, !phasar.instruction.id !68, ID: 27
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
%inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71, ID: 29
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72, ID: 30
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, 60 2019-Jan-05 22:32:24.825224 - [INFO] Write results to file
61 2019-Jan-05 22:32:24.825418 - [INFO] Shutdown llvm and the analysis framework.

!phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76, ID: 31
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


Instruction:
ret i32 %5, !dbg !79, !phasar.instruction.id !80, ID: 33
Facts:
store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17
%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16
%5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78, ID: 32
%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18
%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20
%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23
%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24
store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25


