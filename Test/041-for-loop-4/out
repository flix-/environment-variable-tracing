PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
[TRACK] Checking end of branch label for: for.cond1
[TRACK] End of branch label: for.end
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %j = alloca i32, align 4, !phasar.instruction.id !15
[TRACK] Destination:
[TRACK]   %rc = alloca i32, align 4, !phasar.instruction.id !13### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %i, align 4, !dbg !28, !phasar.instruction.id !30, ID: 10 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21 in function: main
D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	%2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17 in function: main
D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %j, align 4, !dbg !38, !phasar.instruction.id !40, ID: 14 in function: main
D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %i, align 4, !dbg !23, !phasar.instruction.id !25, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %i, metadata !21, metadata !18), !dbg !23, !phasar.instruction.id !24, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %for.cond, !dbg !26, !phasar.instruction.id !27, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %cmp = icmp slt i32 %0, 10, !dbg !31, !phasar.instruction.id !32, ID: 11 in function: main
D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78, ID: 32 in function: main
D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br i1 %cmp, label %for.body, label %for.end6, !dbg !33, !phasar.instruction.id !34, ID: 12 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38, !phasar.instruction.id !39, ID: 13 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

--- IFDS START RESULT RECORD ---
N: br label %for.cond1, !dbg !41, !phasar.instruction.id !42, ID: 15 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %2 = load i32, i32* %j, align 4, !dbg !52, !phasar.instruction.id !54, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

--- IFDS START RESULT RECORD ---
N: %4 = load i32, i32* %i, align 4, !dbg !69, !phasar.instruction.id !70, ID: 28 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19 in function: main
D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	%cmp2 = icmp slt i32 %1, %call, !dbg !48, !phasar.instruction.id !49, ID: 18

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23 in function: main
D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

--- IFDS START RESULT RECORD ---
N: br label %for.inc, !dbg !57, !phasar.instruction.id !58, ID: 22 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25 in function: main
D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%inc = add nsw i32 %3, 1, !dbg !59, !phasar.instruction.id !61, ID: 24

D:	%3 = load i32, i32* %j, align 4, !dbg !59, !phasar.instruction.id !60, ID: 23

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

--- IFDS START RESULT RECORD ---
N: br label %for.cond1, !dbg !63, !llvm.loop !64, !phasar.instruction.id !66, ID: 26 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %for.inc4, !dbg !67, !phasar.instruction.id !68, ID: 27 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %cmp2, label %for.body3, label %for.end, !dbg !50, !phasar.instruction.id !51, ID: 19
L:	for.end

D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %inc5 = add nsw i32 %4, 1, !dbg !69, !phasar.instruction.id !71, ID: 29 in function: main
D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instruction.id !45, ID: 16

--- IFDS START RESULT RECORD ---
N: store i32 %inc5, i32* %i, align 4, !dbg !69, !phasar.instruction.id !72, ID: 30 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	%1 = load i32, i32* %j, align 4, !dbg !43, !phasar.instructi
[TRACK] Checking end of branch label for: for.cond1
[TRACK] End of branch label: for.end
on.id !45, ID: 16

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %for.cond, !dbg !73, !llvm.loop !74, !phasar.instruction.id !76, ID: 31 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: ret i32 %5, !dbg !79, !phasar.instruction.id !80, ID: 33 in function: main
D:	store i32 %2, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 21
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !46, !phasar.instruction.id !47, ID: 17

D:	%5 = load i32, i32* %rc, align 4, !dbg !77, !phasar.instruction.id !78, ID: 32

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%j = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 %inc, i32* %j, align 4, !dbg !59, !phasar.instruction.id !62, ID: 25
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2


