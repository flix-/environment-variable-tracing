PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a1 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: br label %sw.bb, !dbg !35, !phasar.instruction.id !36, ID: 14 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12

D:	store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15

D:	store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

--- IFDS START RESULT RECORD ---
N: switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12

D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12

D:	store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %sw.epilog, !dbg !41, !phasar.instruction.id !42, ID: 17 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15

D:	store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12

D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a1, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18 in function: main
D:	switch i32 %0, label %sw.default [
    [TRACK] Checking end of switch bb for: entry
[TRACK] End of switch label: sw.epilog
[TRACK] Checking end of switch bb for: entry
[TRACK] End of switch label: sw.epilog
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549967428-trace.txt
i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15

D:	store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %a1, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i32 %1, !dbg !49, !phasar.instruction.id !50, ID: 21 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
A:	%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9

D:	%1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20

D:	store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
A:	%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1


