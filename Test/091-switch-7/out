0 2019-Jan-05 22:32:35.536347 - [DEBUG] Set-up the command-line parameters
1 2019-Jan-05 22:32:35.536752 - [INFO] Chosen operation mode: 'phasarLLVM'
2 2019-Jan-05 22:32:35.537102 - [INFO] No configuration file is used.
3 2019-Jan-05 22:32:35.537178 - [INFO] Program options have been successfully parsed.
4 2019-Jan-05 22:32:35.537275 - [INFO] Check program options for logical errors.
5 2019-Jan-05 22:32:35.537365 - [INFO] Set-up IR database.
6 2019-Jan-05 22:32:35.543833 - [INFO] Constructed the analysis controller.
7 2019-Jan-05 22:32:35.543960 - [INFO] Found the following IR files for this project: 
8 2019-Jan-05 22:32:35.544021 - [INFO] 	main.ll
9 2019-Jan-05 22:32:35.544080 - [INFO] Check for chosen entry points.
10 2019-Jan-05 22:32:35.544142 - [INFO] link all llvm modules into a single module for WPA ...

11 2019-Jan-05 22:32:35.544200 - [INFO] link all llvm modules into a single module for WPA ended

12 2019-Jan-05 22:32:35.544261 - [INFO] Preprocess module: main.ll
13 2019-Jan-05 22:32:35.544656 - [INFO] Running GeneralStatisticsPass
14 2019-Jan-05 22:32:35.544792 - [INFO] Running ValueAnnotationPass
15 2019-Jan-05 22:32:35.545141 - [INFO] GeneralStatisticsPass summary for module: 'main.ll'

16 2019-Jan-05 22:32:35.545204 - [INFO] Allocated Types    : 1
17 2019-Jan-05 22:32:35.545269 - [INFO] Allocation Sites   : 5
18 2019-Jan-05 22:32:35.545327 - [INFO] Basic Blocks       : 4
19 2019-Jan-05 22:32:35.545385 - [INFO] Calls Sites        : 5
20 2019-Jan-05 22:32:35.545442 - [INFO] Functions          : 3
21 2019-Jan-05 22:32:35.545500 - [INFO] Globals            : 1
22 2019-Jan-05 22:32:35.545557 - [INFO] Global Pointer     : 1
23 2019-Jan-05 22:32:35.545615 - [INFO] Instructions       : 21
24 2019-Jan-05 22:32:35.545672 - [INFO] Memory Intrinsics  : 0
25 2019-Jan-05 22:32:35.545730 - [INFO] Store Instructions : 5
26 2019-Jan-05 22:32:35.545787 - [INFO]  
27 2019-Jan-05 22:32:35.545861 - [INFO]   i32
28 2019-Jan-05 22:32:35.546377 - [DEBUG] Analyzing function: main
29 2019-Jan-05 22:32:35.546687 - [INFO] Reconstruct the class hierarchy.
30 2019-Jan-05 22:32:35.546751 - [INFO] Construct type hierarchy
31 2019-Jan-05 22:32:35.546812 - [DEBUG] Analyse types in module: main.ll
32 2019-Jan-05 22:32:35.546975 - [DEBUG] Reconstruct virtual function table for module: main.ll
33 2019-Jan-05 22:32:35.547043 - [INFO] Reconstruction of class hierarchy completed.
34 2019-Jan-05 22:32:35.547105 - [INFO] Starting CallGraphAnalysisType: OTF
35 2019-Jan-05 22:32:35.547220 - [DEBUG] Walking in function: main
36 2019-Jan-05 22:32:35.547306 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
37 2019-Jan-05 22:32:35.547641 - [DEBUG] Found 1 possible target(s)
38 2019-Jan-05 22:32:35.547701 - [DEBUG] Target name: llvm.dbg.declare
39 2019-Jan-05 22:32:35.547826 - [DEBUG] Walking in function: llvm.dbg.declare
40 2019-Jan-05 22:32:35.547891 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
41 2019-Jan-05 22:32:35.547955 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
42 2019-Jan-05 22:32:35.548222 - [DEBUG] Found 1 possible target(s)
43 2019-Jan-05 22:32:35.548281 - [DEBUG] Target name: llvm.dbg.declare
44 2019-Jan-05 22:32:35.548356 - [DEBUG] Walking in function: llvm.dbg.declare
45 2019-Jan-05 22:32:35.548418 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
46 2019-Jan-05 22:32:35.548482 - [DEBUG] Found static call-site: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
47 2019-Jan-05 22:32:35.548787 - [DEBUG] Found 1 possible target(s)
48 2019-Jan-05 22:32:35.548846 - [DEBUG] Target name: getenv
49 2019-Jan-05 22:32:35.548927 - [DEBUG] Walking in function: getenv
50 2019-Jan-05 22:32:35.548989 - [DEBUG] Function already visited or only declaration: getenv
51 2019-Jan-05 22:32:35.549054 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
52 2019-Jan-05 22:32:35.549333 - [DEBUG] Found 1 possible target(s)
53 2019-Jan-05 22:32:35.549392 - [DEBUG] Target name: llvm.dbg.declare
54 2019-Jan-05 22:32:35.549466 - [DEBUG] Walking in function: llvm.dbg.declare
55 2019-Jan-05 22:32:35.549529 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
56 2019-Jan-05 22:32:35.549593 - [DEBUG] Found static call-site: call void @llvm.dbg.declare(metadata i32* %a1, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
57 2019-Jan-05 22:32:35.549869 - [DEBUG] Found 1 possible target(s)
58 2019-Jan-05 22:32:35.549929 - [DEBUG] Target name: llvm.dbg.declare
59 2019-Jan-05 22:32:35.550004 - [DEBUG] Walking in function: llvm.dbg.declare
60 2019-Jan-05 22:32:35.550066 - [DEBUG] Function already visited or only declaration: llvm.dbg.declare
61 2019-Jan-05 22:32:35.550128 - [INFO] Call graph has been constructed
62 2019-Jan-05 22:32:35.550190 - [INFO] Performing analysis: plugin
63 2019-Jan-05 22:32:35.550256 - [DEBUG] Loading shared object library: '/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/MonoIntraEnvironmentVariableTracing/libMonoIntraEnvironmentVariableTracing.so'
64 2019-Jan-05 22:32:35.550769 - [INFO] Solving plugin: monoIntraEnvironmentVariableTracing
PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/MonoIntraEnvironmentVariableTracing/libMonoIntraEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - MonoIntraEnvironmentVariableTracing

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  %a1 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)
Dumping facts
=============
=============


  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction
Dumping facts
=============
=============


  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction
Dumping facts
=============
=============


  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact
Dumping facts
=============
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Added line number: 9

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============

Added line number: 9
Added line number: 9

  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
=============

Added line number: 9
Added line number: 9
Added line number: 10

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  br label %sw.bb, !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 16

  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 16
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 16

  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 16
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 10
Added line number: 16

  call void @llvm.dbg.declare(metadata i32* %a1, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
Got call instruction
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 16
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16

  store i32 0, i32* %a1, align 4, !dbg !44, !phasar.instruction.id !46
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 16
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 16

  %1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============

Added line number: 16
Added line number: 13
Added line number: 9
Added line number: 9
Added line number: 10
Added line number: 21
Added line number: 16

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
=============


  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
=============


  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
=============


  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact
Dumping facts
=============
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
=============


  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============


  br label %sw.bb, !dbg !35, !phasar.instruction.id !36
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
=============


  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
Dumping facts
=============
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============


  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============


  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============


  call void @llvm.dbg.declare(metadata i32* %a1, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
Got call instruction
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============


  store i32 0, i32* %a1, align 4, !dbg !44, !phasar.instruction.id !46
Got store instruction
Removed 0 memory locations from facts
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============


  %1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48
Got load instruction
Adding load instruction fact
Dumping facts
=============
  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40
  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34
  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
  %1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48
  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39
=============


  %rc = alloca i32, align 4, !phasar.instruction.id !13
Got operands checking instruction (alloca)

  %taint = alloca i32, align 4, !phasar.instruction.id !14
Got operands checking instruction (alloca)

  %retval = alloca i32, align 4, !phasar.instruction.id !12
Got operands checking instruction (alloca)

  store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40

  store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34

  store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27
Got store instruction
Removed 0 memory locations from facts
Adding memory location (store)

  %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26
Got call instruction
Adding call instruction fact

  store i32 0, i32* %retval, align 4, !phasar.instruction.id !17
Got store instruction
Removed 0 memory locations from facts

  br label %sw.bb, !dbg !35, !phasar.instruction.id !36

  %a1 = alloca i32, align 4, !phasar.instruction.id !16
Got operands checking instruction (alloca)

  %0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29
Got load instruction
Adding load instruction fact

  %1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48
Got load instruction
Adding load instruction fact

  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31
Got switch instruction
Adding switch instruction fact

  call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24
Got call instruction

  call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21
Got call instruction

  %a = alloca i32, align 4, !phasar.instruction.id !15
Got operands checking instruction (alloca)

  call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39

  br label %sw.epilog, !dbg !41, !phasar.instruction.id !42

  call void @llvm.dbg.declare(metadata i32* %a1, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45
Got call instruction

  store i32 0, i32* %a1, align 4, !dbg !44, !phasar.instruction.id !46
Got store instruction
Removed 0 memory locations from facts

  ret i32 %1, !dbg !49, !phasar.instruction.id !50worklist size: 21
worklist size: 20
worklist size: 19
worklist size: 18
worklist size: 17
worklist size: 16
worklist size: 15
worklist size: 14
worklist size: 13
worklist size: 13
worklist size: 13
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 14
worklist size: 13
worklist size: 12
worklist size: 11
worklist size: 10
worklist size: 9
worklist size: 8
worklist size: 7
worklist size: 6
worklist size: 5
worklist size: 4
worklist size: 3
worklist size: 2
worklist size: 1
LLVM-Intra-Monotone solver results:
-----------------------------------
Instruction:
%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2
Facts:
	EMPTY


Instruction:
%taint = alloca i32, align 4, !phasar.instruction.id !14, ID: 3
Facts:
	EMPTY


Instruction:
%retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1
Facts:
	EMPTY


Instruction:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
Facts:
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15


Instruction:
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
Facts:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
Facts:
	EMPTY


Instruction:
store i32 0, i32* %retval, align 4, !phasar.instruction.id !17, ID: 6
Facts:
	EMPTY


Instruction:
br label %sw.bb, !dbg !35, !phasar.instruction.id !36, ID: 14
Facts:
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
%a1 = alloca i32, align 4, !phasar.instruction.id !16, ID: 5
Facts:
	EMPTY


Instruction:
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9


Instruction:
%1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15


Instruction:
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
Facts:
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11


Instruction:
call void @llvm.dbg.declare(metadata i32* %taint, metadata !22, metadata !19), !dbg !23, !phasar.instruction.id !24, ID: 8
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %rc, metadata !18, metadata !19), !dbg !20, !phasar.instruction.id !21, ID: 7
Facts:
	EMPTY


Instruction:
%a = alloca i32, align 4, !phasar.instruction.id !15, ID: 4
Facts:
	EMPTY


Instruction:
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15
Facts:
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12


Instruction:
br label %sw.epilog, !dbg !41, !phasar.instruction.id !42, ID: 17
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15


Instruction:
call void @llvm.dbg.declare(metadata i32* %a1, metadata !43, metadata !19), !dbg !44, !phasar.instruction.id !45, ID: 18
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !30, !phasar.instruction.id !31, ID: 12
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15


Instruction:
store i32 0, i32* %a1, align 4, !dbg !44, !phasar.instruction.id !46, ID: 19
Facts:
store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15


Instruction:
ret i32 %1, !dbg !49, !phasar.instruction.id !50, ID: 21
Facts:
store65 2019-Jan-05 22:32:35.605675 - [INFO] Write results to file
66 2019-Jan-05 22:32:35.605857 - [INFO] Shutdown llvm and the analysis framework.

 i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 16
store i32 1, i32* %rc, align 4, !dbg !32, !phasar.instruction.id !34, ID: 13
store i32 %call, i32* %taint, align 4, !dbg !23, !phasar.instruction.id !27, ID: 10
%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 9
%0 = load i32, i32* %taint, align 4, !dbg !28, !phasar.instruction.id !29, ID: 11
%1 = load i32, i32* %rc, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20
call void @llvm.dbg.declare(metadata i32* %a, metadata !37, metadata !19), !dbg !38, !phasar.instruction.id !39, ID: 15


