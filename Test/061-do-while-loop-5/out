PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
[TRACK] Checking end of branch bb for: do.cond
[TRACK] End of branch bb: do.end
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %a = alloca i32, align 4, !phasar.instruction.id !14
[TRACK] Destination:
[TRACK]   %rc = alloca i32, align 4, !phasar.instruction.id !13### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !17, metadata !18), !dbg !19, !phasar.instruction.id !20, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %ut = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %do.body1, !dbg !25, !llvm.loop !27, !phasar.instruction.id !29, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %do.body, !dbg !21, !llvm.loop !22, !phasar.instruction.id !24, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %do.body2, label %do.end, !dbg !41, !llvm.loop !35, !phasar.instruction.id !46, ID: 15 in function: main
D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%tobool = icmp ne i32 %call, 0, !dbg !41, !phasar.instruction.id !45, ID: 14

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %tobool, label %do.body2, label %do.end, !dbg !41, !llvm.loop !35, !phasar.instruction.id !46, ID: 15

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !30, metadata !18), !dbg !32, !phasar.instruction.id !33, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: br label %do.body2, !dbg !34, !llvm.loop !35, !phasar.instruction.id !37, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11 in function: main
D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%tobool = icmp ne i32 %call, 0, !dbg !41, !phasar.instruction.id !45, ID: 14

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %do.body2, label %do.end, !dbg !41, !llvm.loop !35, !phasar.instruction.id !46, ID: 15

--- IFDS START RESULT RECORD ---
N: br label %do.cond, !dbg !41, !phasar.instruction.id !42, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %do.body2, label %do.end, !dbg !41, !llvm.loop !35, !phasar.instruction.id !46, ID: 15

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %do.body2, label %do.end, !dbg !41, !llvm.loop !35, !phasar.instruction.id !46, ID: 15

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !41, !phasar.instruction.id !45, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %tobool, label %do.body2, label %do.end, !dbg !41, !llvm.loop !35, !phasar.instruction.id !46, ID: 15

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %a, align 4, !dbg !47, !phasar.instruction.id !48, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %do.body2, label %do.end, !dbg !41, !llvm.loop !35, !phasar.instruction.id !46, ID: 15

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	%tobool = icmp ne i32 %call, 0, !dbg !41, !phasar.instruction.id !45, ID: 14

--- IFDS START RESULT RECORD ---
N: store i32 %0, i32* %rc, align 4, !dbg !49, !phasar.instruction.id !50, ID: 17 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	%tobool = icmp ne i32 %call, 0, !dbg !41, !phasar.instruction.id !45, ID: 14

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %ut, metadata !51, metadata !18), !dbg !52, !phasar.instruction.id !53, ID: 18 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %ut, align 4, !dbg !52, !phasar.instruction.id !54, ID: 19 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: br label %do.cond3, !dbg !55, !phasar.instruction.id !56, ID: 20 in function: main
D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call4 = call i32 (...) @foo(), !dbg !57, !phasar.instruction.id !58, ID: 21 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: %tobool5 = icmp ne i32 %call4, 0, !dbg !55, !phasar.instruction.id !59, ID: 22 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: br i1 %tobool5, label %do.body1, label %do.end6, !dbg !55, !llvm.loop !27, !phasar.instruction.id !60, ID: 23 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
[TRACK] Checking end of branch bb for: do.cond
[TRACK] End of branch bb: do.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1550168579-trace.txt

N: br label %do.cond7, !dbg !61, !phasar.instruction.id !62, ID: 24 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: %call8 = call i32 (...) @bar(), !dbg !63, !phasar.instruction.id !64, ID: 25 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: %tobool9 = icmp ne i32 %call8, 0, !dbg !61, !phasar.instruction.id !65, ID: 26 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !68, ID: 28 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: br i1 %tobool9, label %do.body, label %do.end10, !dbg !61, !llvm.loop !22, !phasar.instruction.id !66, ID: 27 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

--- IFDS START RESULT RECORD ---
N: ret i32 %1, !dbg !69, !phasar.instruction.id !70, ID: 29 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%a = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 1, i32* %a, align 4, !dbg !38, !phasar.instruction.id !40, ID: 11
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !43, !phasar.instruction.id !44, ID: 13

D:	%1 = load i32, i32* %rc, align 4, !dbg !67, !phasar.instruction.id !68, ID: 28


