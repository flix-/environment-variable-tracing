PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK] i32 %s.coerce0
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Patched memory location (arg/store)
[TRACK] Source:
[TRACK] i32 %s.coerce0
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %s = alloca %struct.s1, align 8, !phasar.instruction.id !19
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK]   %s = alloca %struct.s1, align 8, !phasar.instruction.id !19
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %retval = alloca %struct.s1, align 8, !phasar.instruction.id !18
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Added patchable memory location (caller <- callee)
[TRACK] Source:
[TRACK]   %retval = alloca %struct.s1, align 8, !phasar.instruction.id !18
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Patched memory location (ret/store)
[TRACK] Source:
[TRACK]   %call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK]   %tainted2 = alloca i8*, align 8, !phasar.instruction.id !17
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15
[TRACK]   %8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49
[TRACK] Destination:
[TRACK]   %s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14
[TRACK]   %8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49
[TRACK] Relocated memory location (memcpy/memmove)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15
[TRACK]   %6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46
[TRACK] Destination:
[TRACK]   %s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14
[TRACK]   %6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK] i32 %s.coerce0
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s = alloca %struct.s1, align 8, !phasar.instruction.id !19
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15
[TRACK]   %6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46
[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15
[TRACK]   %8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49
[TRACK] Destination:
[TRACK] i8* %1
[TRACK]   %8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 16, i32 8, i1 false), !dbg !29, !phasar.instruction.id !32, ID: 11 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i32 0, i32 0, !phasar.instruction.id !21, ID: 4 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i32 %s.coerce0, ID: foo.0
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %0 = bitcast %struct.s1* %s to { i32, i8* }*, !phasar.instruction.id !20, ID: 3 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i32 %s.coerce0, ID: foo.0
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i32 %s.coerce0, ID: foo.0
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !18, ID: 21 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %2 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i32 0, i32 1, !phasar.instruction.id !23, ID: 6 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: store i8* %s.coerce1, i8** %2, align 8, !phasar.instruction.id !24, ID: 7 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %s.coerce0, i32* %1, align 8, !phasar.instruction.id !22, ID: 5 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i32 %s.coerce0, ID: foo.0
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %4 = bitcast %struct.s1* %s to i8*, !dbg !29, !phasar.instruction.id !31, ID: 10 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s, metadata !25, metadata !26), !dbg !27, !phasar.instruction.id !28, ID: 8 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %retval = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 1 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	i32 %s.coerce0, ID: foo.0
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %3 = bitcast %struct.s1* %retval to i8*, !dbg !29, !phasar.instruction.id !30, ID: 9 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 15 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %5 = bitcast %struct.s1* %retval to { i32, i8* }*, !dbg !33, !phasar.instruction.id !34, ID: 12 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%retval = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 1
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %6 = load { i32, i8* }, { i32, i8* }* %5, align 8, !dbg !33, !phasar.instruction.id !35, ID: 13 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%retval = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 1
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: ret { i32, i8* } %6, !dbg !33, !phasar.instruction.id !36, ID: 14 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s = alloca %struct.s1, align 8, !phasar.instruction.id !19, ID: 2
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%retval = alloca %struct.s1, align 8, !phasar.instruction.id !18, ID: 1
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %not_tainted = alloca i32, align 4, !phasar.instruction.id !16, ID: 19 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tainted2 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s11, metadata !47, metadata !26), !dbg !48, !phasar.instruction.id !49, ID: 22 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s12, metadata !56, metadata !26), !dbg !57, !phasar.instruction.id !58, ID: 26 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = bitcast %struct.s1* %s11 to { i32, i8* }*, !dbg !38, !phasar.instruction.id !39, ID: 27 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i32 0, i32 0, !dbg !38, !phasar.instruction.id !40, ID: 28 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %2 = load i32, i32* %1, align 8, !dbg !38, !phasar.instruction.id !41, ID: 29 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %3 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %0, i32 0, i32 1, !dbg !38, !phasar.instruction.id !42, ID: 30 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %4 = load i8*, i8** %3, align 8, !dbg !38, !phasar.instruction.id !43, ID: 31 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32 in function: main
D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

--- IFDS START RESULT RECORD ---
N: %5 = bitcast %struct.s1* %coerce to { i32, i8* }*, !dbg !38, !phasar.instruction.id !45, ID: 33 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %7 = extractvalue { i32, i8* } %call1, 0, !dbg !38, !phasar.instruction.id !47, ID: 35 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%7 = extractvalue { i32, i8* } %call1, 0, !dbg !38, !phasar.instruction.id !47, ID: 35

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %9 = extractvalue { i32, i8* } %call1, 1, !dbg !38, !phasar.instruction.id !50, ID: 38 in function: main
D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

--- IFDS START RESULT RECORD ---
N: store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%9 = extractvalue { i32, i8* } %call1, 1, !dbg !38, !phasar.instruction.id !50, ID: 38

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %10 = bitcast %struct.s1* %s12 to i8*, !dbg !38, !phasar.instruction.id !52, ID: 40 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

--- IFDS START RESULT RECORD ---
N: %11 = bitcast %struct.s1* %coerce to i8*, !dbg !38, !phasar.instruction.id !53, ID: 41 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 8, i1 false), !dbg !38, !phasar.instruction.id !54, ID: 42 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %not_tainted, metadata !76, metadata !26), !dbg !77, !phasar.instruction.id !78, ID: 43 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

--- IFDS START RESULT RECORD ---
N: %a = getelementptr inbounds %struct.s1, %struct.s1* %s12, i32 0, i32 0, !dbg !58, !phasar.instruction.id !59, ID: 44 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

--- IFDS START RESULT RECORD ---
N: %12 = load i32, i32* %a, align 8, !dbg !58, !phasar.instruction.id !60, ID: 45 in function: main
D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

--- IFDS START RESULT RECORD ---
N: store i32 %12, i32* %not_tainted, align 4, !dbg !56, !phasar.instruction.id !61, ID: 46 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %tainted2, metadata !83, metadata !26), !dbg !84, !phasar.instruction.id !85, ID: 47 in function: main
D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

--- IFDS START RESULT RECORD ---
N: %tainted3 = getelementptr inbounds %struct.s1, %struct.s1* %s12, i32 0, i32 1, !dbg !65, !phasar.instruction.id !66, ID: 48 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

--- IFDS START RESULT RECORD ---
N: %13 = load i8*, i8** %tainted3, align 8, !dbg !65, !phasar.instruction.id !67, ID: 49 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

--- IFDS START RESULT RECORD ---
N: store i8* %13, i8** %tainted2, align 8, !dbg !63, !phasar.instruction.id !68, ID: 50 in function: main
D:	%13 = load i8*, i8** %tainted3, align 8, !dbg !65, !phasar.instruction.id !67, ID: 49

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !69, !phasar.instruction.id !70, ID: 51 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !29, !phasar.instruction.id !30, ID: 23

D:	store i8* %call, i8** %tainted, align 8, !dbg !33, !phasar.instruction.id !34, ID: 25
A:	%s11 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 16
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.inst
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549710529-trace.txt
ruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%tainted2 = alloca i8*, align 8, !phasar.instruction.id !17, ID: 20

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	%call1 = call { i32, i8* } @foo(i32 %2, i8* %4), !dbg !38, !phasar.instruction.id !44, ID: 32
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%tainted = getelementptr inbounds %struct.s1, %struct.s1* %s11, i32 0, i32 1, !dbg !31, !phasar.instruction.id !32, ID: 24

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	store i32 %7, i32* %6, align 8, !dbg !38, !phasar.instruction.id !48, ID: 36
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%6 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 0, !dbg !38, !phasar.instruction.id !46, ID: 34

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%s12 = alloca %struct.s1, align 8, !phasar.instruction.id !14, ID: 17
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	store i8* %9, i8** %8, align 8, !dbg !38, !phasar.instruction.id !51, ID: 39
A:	%coerce = alloca %struct.s1, align 8, !phasar.instruction.id !15, ID: 18
A:	%8 = getelementptr inbounds { i32, i8* }, { i32, i8* }* %5, i32 0, i32 1, !dbg !38, !phasar.instruction.id !49, ID: 37

D:	@zero_value = constant i2 0, align 4, ID: -1


