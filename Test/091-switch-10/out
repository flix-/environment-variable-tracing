PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !19, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %ut1 = alloca i8*, align 8, !phasar.instruction.id !20, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !15, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %taint, metadata !26, metadata !23), !dbg !29, !phasar.instruction.id !30, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !21, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !16, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %is_env_set, metadata !34, metadata !23), !dbg !35, !phasar.instruction.id !36, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

--- IFDS START RESULT RECORD ---
N: %0 = load i8*, i8** %taint, align 8, !dbg !37, !phasar.instruction.id !38, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

--- IFDS START RESULT RECORD ---
N: %cmp = icmp ne i8* %0, null, !dbg !39, !phasar.instruction.id !40, ID: 15 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

--- IFDS START RESULT RECORD ---
N: %conv = zext i1 %cmp to i32, !dbg !39, !phasar.instruction.id !41, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%cmp = icmp ne i8* %0, null, !dbg !39, !phasar.instruction.id !40, ID: 15

--- IFDS START RESULT RECORD ---
N: store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17 in function: main
D:	%cmp = icmp ne i8* %0, null, !dbg !39, !phasar.instruction.id !40, ID: 15

D:	%conv = zext i1 %cmp to i32, !dbg !39, !phasar.instruction.id !41, ID: 16

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %is_env_set, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

--- IFDS START RESULT RECORD ---
N: %2 = load i32, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60, ID: 26 in function: main
D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

--- IFDS START RESULT RECORD ---
N: %3 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75, ID: 34 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i32 1, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

--- IFDS START RESULT RECORD ---
N: switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !47, metadata !23), !dbg !49, !phasar.instruction.id !50, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 21 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !47, metadata !23), !dbg !49, !phasar.instruction.id !50, ID: 20

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

--- IFDS START RESULT RECORD ---
N: call void @abort() #5, !dbg !52, !phasar.instruction.id !53, ID: 22 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !47, metadata !23), !dbg !49, !phasar.instruction.id !50, ID: 20

D:	store i32 0, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 21
A:	%a = alloca i32, align 4, !phasar.instruction.id !19, ID: 6

--- IFDS START RESULT RECORD ---
N: unreachable, !dbg !52, !phasar.instruction.id !54, ID: 23 in function: main
D:	call void @abort() #5, !dbg !52, !phasar.instruction.id !53, ID: 22

D:	store i32 0, i32* %a, align 4, !dbg !49, !phasar.instruction.id !51, ID: 21
A:	%a = alloca i32, align 4, !phasar.instruction.id !19, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !47, metadata !23), !dbg !49, !phasar.instruction.id !50, ID: 20

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

--- IFDS START RESULT RECORD ---
N: br label %sw.epilog, !dbg !57, !phasar.instruction.id !58, ID: 25 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

--- IFDS START RESULT RECORD ---
N: ret i32 %3, !dbg !76, !phasar.instruction.id !77, ID: 35 in function: main
D:	%3 = load i32, i32* %rc, align 4, !dbg !74, !phasar.instruction.id !75, ID: 34

D:	store i32 1, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: switch i32 %2, label %sw.default3 [
    i32 0, label %sw.bb2
  ], !dbg !61, !phasar.instruction.id !62, ID: 27 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	%2 = load i32, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60, ID: 26

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

--- IFDS START RESULT RECORD ---
N: call void @abort() #5, !dbg !63, !phasar.instruction.id !65, ID: 28 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	switch i32 %2, label %sw.default3 [
    i32 0, label %sw.bb2
  ], !dbg !61, !phasar.instruction.id !62, ID: 27

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	%2 = load i32, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60, ID: 26

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

--- IFDS START RESULT RECORD ---
N: unreachable, !dbg !63, !phasar.instruction.id !66, ID: 29 in function: main
D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	switch i32 %2, label %sw.default3 [
    i32 0, label %sw.bb2
  ], !dbg !61, !phasar.instruction.id !62, ID: 27

D:	call void @abort() #5, !dbg !63, !phasar.instruction.id !65, ID: 28

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	%2 = load i32, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60, ID: 26

--- IFDS START RESULT RECORD ---
N: call void @abort() #5, !dbg !67, !phasar.instruction.id !68, ID: 30 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	%2 = load i32, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60, ID: 26

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	switch i32 %2, label %sw.default3 [
    i32 0, label %sw.bb2
  ], !dbg !61, !phasar.instruction.id !62, ID: 27

--- IFDS START RESULT RECORD ---
N: unreachable, !dbg !67, !phasar.instruction.id !69, ID: 31 in function: main
D:	%2 = load i32, i32* %rc, align 4, !dbg !59, !phasar.instruction.id !60, ID: 26

D:	call void @abort() #5, !dbg !67, !phasar.instruction.id !68, ID: 30

D:	switch i32 %2, label %sw.default3 [
    i32 0, label %sw.bb2
  ], !dbg !61, !phasar.instruction.id !62, ID: 27

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %ut1, metadata !70, metadata !23), !dbg !71, !phasar.instruction.id !72, ID: 32 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 1, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

--- IFDS START RESULT RECORD ---
N: store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i8** %ut1, align 8, !dbg !71, !phasar.instruction.id !73, ID: 33 in function: main
D:	@zero_value = constant i2 0, alig[TRACK] Checking end of switch bb for: entry
[TRACK] End of switch label: sw.epilog
[TRACK] Checking end of switch bb for: sw.default
[TRACK] End of switch label: 
[TRACK] No end of tainted switch label found! Unreachable or algorithm incomplete?
[TRACK] Checking end of switch bb for: sw.default
[TRACK] End of switch label: 
[TRACK] No end of tainted switch label found! Unreachable or algorithm incomplete?
[TRACK] Checking end of switch bb for: entry
[TRACK] End of switch label: sw.epilog
[TRACK] Checking end of switch bb for: entry
[TRACK] End of switch label: sw.epilog
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1550069424-trace.txt
n 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #4, !dbg !31, !phasar.instruction.id !32, ID: 11

D:	store i8* %call, i8** %taint, align 8, !dbg !29, !phasar.instruction.id !33, ID: 12
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !17, ID: 4

D:	store i32 %conv, i32* %is_env_set, align 4, !dbg !35, !phasar.instruction.id !42, ID: 17
A:	%is_env_set = alloca i32, align 4, !phasar.instruction.id !18, ID: 5

D:	store i32 1, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !16, ID: 3


