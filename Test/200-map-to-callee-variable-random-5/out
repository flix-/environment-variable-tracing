PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
init - makeIFDSEnvironmentVariableTracing
initialSeeds()
getNormalFlowFunction()
  %retval = alloca i32, align 4, !phasar.instruction.id !12

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store i32 0, i32* %retval, align 4, !phasar.instruction.id !15

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !85, metadata !34), !dbg !91, !phasar.instruction.id !92

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s2* %s2, metadata !93, metadata !34), !dbg !94, !phasar.instruction.id !95

getSummaryFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !44, !phasar.instruction.id !45

getNormalFlowFunction()
  %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47

Got GEP instruction
getNormalFlowFunction()
  %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49

Got GEP instruction
getNormalFlowFunction()
  %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50

Got GEP instruction
getNormalFlowFunction()
  %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52

Got GEP instruction
getNormalFlowFunction()
  store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54

Got store instruction
getNormalFlowFunction()
  %s22 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56

Got GEP instruction
getNormalFlowFunction()
  store %struct.s2* %s2, %struct.s2** %s22, align 8, !dbg !57, !phasar.instruction.id !58

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52
[TRACK] Destination:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s22 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52
getNormalFlowFunction()
  %s23 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !59, !phasar.instruction.id !60

Got GEP instruction
getNormalFlowFunction()
  %0 = load %struct.s2*, %struct.s2** %s23, align 8, !dbg !59, !phasar.instruction.id !61

Got load instruction
getSummaryFlowFunction()
  call void @foo(%struct.s2* %0), !dbg !62, !phasar.instruction.id !63

getCallFlowFunction()
  call void @foo(%struct.s2* %0), !dbg !62, !phasar.instruction.id !63

getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @foo(%struct.s2* %0), !dbg !62, !phasar.instruction.id !63

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s22 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52
[TRACK] Destination:
[TRACK] %struct.s2* %s2
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52
getNormalFlowFunction()
  %s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %t1 = alloca i8*, align 8, !phasar.instruction.id !29

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %ut1 = alloca i32*, align 8, !phasar.instruction.id !30

Got operands checking instruction (alloca)
getNormalFlowFunction()
  %ut2 = alloca i8*, align 8, !phasar.instruction.id !31

Got operands checking instruction (alloca)
getNormalFlowFunction()
  store %struct.s2* %s2, %struct.s2** %s2.addr, align 8, !phasar.instruction.id !32

Got store instruction
[TRACK] Patched memory location (arg/store)
[TRACK] Source:
[TRACK] %struct.s2* %s2
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52
[TRACK] Destination:
[TRACK]   %s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s2** %s2.addr, metadata !33, metadata !34), !dbg !35, !phasar.instruction.id !36

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %t1, metadata !37, metadata !34), !dbg !38, !phasar.instruction.id !39

getNormalFlowFunction()
  %0 = load %struct.s2*, %struct.s2** %s2.addr, align 8, !dbg !40, !phasar.instruction.id !41

Got load instruction
getNormalFlowFunction()
  %s3 = getelementptr inbounds %struct.s2, %struct.s2* %0, i32 0, i32 1, !dbg !42, !phasar.instruction.id !43

Got GEP instruction
getNormalFlowFunction()
  %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !40, !phasar.instruction.id !44

Got GEP instruction
getNormalFlowFunction()
  %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !40, !phasar.instruction.id !45

Got GEP instruction
getNormalFlowFunction()
  %t12 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !46, !phasar.instruction.id !47

Got GEP instruction
getNormalFlowFunction()
  %1 = load i8*, i8** %t12, align 8, !dbg !46, !phasar.instruction.id !48

Got load instruction
getNormalFlowFunction()
  store i8* %1, i8** %t1, align 8, !dbg !38, !phasar.instruction.id !49

Got store instruction
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52
[TRACK] Destination:
[TRACK]   %t1 = alloca i8*, align 8, !phasar.instruction.id !29
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32** %ut1, metadata !50, metadata !34), !dbg !51, !phasar.instruction.id !52

getNormalFlowFunction()
  %2 = load %struct.s2*, %struct.s2** %s2.addr, align 8, !dbg !53, !phasar.instruction.id !54

Got load instruction
getNormalFlowFunction()
  %s33 = getelementptr inbounds %struct.s2, %struct.s2* %2, i32 0, i32 1, !dbg !55, !phasar.instruction.id !56

Got GEP instruction
getNormalFlowFunction()
  %arrayidx4 = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s33, i64 0, i64 0, !dbg !53, !phasar.instruction.id !57

Got GEP instruction
getNormalFlowFunction()
  %arrayidx5 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx4, i64 0, i64 0, !dbg !53, !phasar.instruction.id !58

Got GEP instruction
getNormalFlowFunction()
  %a = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx5, i32 0, i32 0, !dbg !59, !phasar.instruction.id !60

Got GEP instruction
getNormalFlowFunction()
  %3 = load i32*, i32** %a, align 8, !dbg !59, !phasar.instruction.id !61

Got load instruction
getNormalFlowFunction()
  store i32* %3, i32** %ut1, align 8, !dbg !51, !phasar.instruction.id !62

Got store instruction
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %ut2, metadata !63, metadata !34), !dbg !64, !phasar.instruction.id !65

getNormalFlowFunction()
  %4 = load %struct.s2*, %struct.s2** %s2.addr, align 8, !dbg !66, !phasar.instruction.id !67

Got load instruction
getNormalFlowFunction()
  %s36 = getelementptr inbounds %struct.s2, %struct.s2* %4, i32 0, i32 1, !dbg !68, !phasar.instruction.id !69

Got GEP instruction
getNormalFlowFunction()
  %arrayidx7 = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s36, i64 0, i64 0, !dbg !66, !phasar.instruction.id !70

Got GEP instruction
getNormalFlowFunction()
  %arrayidx8 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx7, i64 0, i64 0, !dbg !66, !phasar.instruction.id !71

Got GEP instruction
getNormalFlowFunction()
  %t19 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx8, i32 0, i32 2, !dbg !72, !phasar.instruction.id !73

Got GEP instruction
getNormalFlowFunction()
  %5 = load i8*, i8** %t19, align 8, !dbg !72, !phasar.instruction.id !74

Got load instruction
getNormalFlowFunction()
  store i8* %5, i8** %ut2, align 8, !dbg !64, !phasar.instruction.id !75

Got store instruction
getCallToRetFlowFunction()
getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32** %ut1, metadata !50, metadata !34), !dbg !51, !phasar.instruction.id !52

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %ut2, metadata !63, metadata !34), !dbg !64, !phasar.instruction.id !65

getCallToRetFlowFunction()
getCallToRetFlowFunction()
getRetFlowFunction()
getCallToRetFlowFunction()
getSummaryFlowFunction()
  call void @foo(%struct.s2* %0), !dbg !62, !phasar.instruction.id !63

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s2** %s2.addr, metadata !33, metadata !34), !dbg !35, !phasar.instruction.id !36

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %t1, metadata !37, metadata !34), !dbg !38, !phasar.instruction.id !39

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i32** %ut1, metadata !50, metadata !34), !dbg !51, !phasar.instruction.id !52

getSummaryFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %ut2, metadata !63, metadata !34), !dbg !64, !phasar.instruction.id !65

getCallToRetFlowFunction()
getCallToRetFlowFunction()
getCallFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !85, metadata !34), !dbg !91, !phasar.instruction.id !92

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s2* %s2, metadata !93, metadata !34), !dbg !94, !phasar.instruction.id !95

getCallFlowFunction()
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !44, !phasar.instruction.id !45

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata %struct.s2** %s2.addr, metadata !33, metadata !34), !dbg !35, !phasar.instruction.id !36

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %t1, metadata !37, metadata !34), !dbg !38, !phasar.instruction.id !39

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i32** %ut1, metadata !50, metadata !34), !dbg !51, !phasar.instruction.id !52

getCallFlowFunction()
  call void @llvm.dbg.declare(metadata i8** %ut2, metadata !63, metadata !34), !dbg !64, !phasar.instruction.id !65

[TRACK] Added patchable memory location (caller -> callee)
[TRACK] Source:
[TRACK]   %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13
[TRACK]   %s22 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52
[TRACK] Destination:
[TRACK] %struct.s2* %s2
[TRACK]   %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47
[TRACK]   %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49
[TRACK]   %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50
[TRACK]   %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s2* %s2, ID: foo.0
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %ut2 = alloca i8*, align 8, !phasar.instruction.id !31, ID: 4 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s2* %s2, ID: foo.0
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s2* %s2, ID: foo.0
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %ut1 = alloca i32*, align 8, !phasar.instruction.id !30, ID: 3 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s2* %s2, ID: foo.0
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 35 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %5, i8** %ut2, align 8, !dbg !64, !phasar.instruction.id !75, ID: 30 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s2** %s2.addr, metadata !33, metadata !34), !dbg !35, !phasar.instruction.id !36, ID: 6 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: store i32* %3, i32** %ut1, align 8, !dbg !51, !phasar.instruction.id !62, ID: 22 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: store i8* %1, i8** %t1, align 8, !dbg !38, !phasar.instruction.id !49, ID: 14 in function: foo
D:	%1 = load i8*, i8** %t12, align 8, !dbg !46, !phasar.instruction.id !48, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store %struct.s2* %s2, %struct.s2** %s2.addr, align 8, !phasar.instruction.id !32, ID: 5 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%struct.s2* %s2, ID: foo.0
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %t1, metadata !37, metadata !34), !dbg !38, !phasar.instruction.id !39, ID: 7 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 32 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load %struct.s2*, %struct.s2** %s2.addr, align 8, !dbg !40, !phasar.instruction.id !41, ID: 8 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %s3 = getelementptr inbounds %struct.s2, %struct.s2* %0, i32 0, i32 1, !dbg !42, !phasar.instruction.id !43, ID: 9 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !40, !phasar.instruction.id !44, ID: 10 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !40, !phasar.instruction.id !45, ID: 11 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %t12 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !46, !phasar.instruction.id !47, ID: 12 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %1 = load i8*, i8** %t12, align 8, !dbg !46, !phasar.instruction.id !48, ID: 13 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32** %ut1, metadata !50, metadata !34), !dbg !51, !phasar.instruction.id !52, ID: 15 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %2 = load %struct.s2*, %struct.s2** %s2.addr, align 8, !dbg !53, !phasar.instruction.id !54, ID: 16 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %s33 = getelementptr inbounds %struct.s2, %struct.s2* %2, i32 0, i32 1, !dbg !55, !phasar.instruction.id !56, ID: 17 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

--- IFDS START RESULT RECORD ---
N: %arrayidx4 = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s33, i64 0, i64 0, !dbg !53, !phasar.instruction.id !57, ID: 18 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %arrayidx5 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx4, i64 0, i64 0, !dbg !53, !phasar.instruction.id !58, ID: 19 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %a = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx5, i32 0, i32 0, !dbg !59, !phasar.instruction.id !60, ID: 20 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %3 = load i32*, i32** %a, align 8, !dbg !59, !phasar.instruction.id !61, ID: 21 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %ut2, metadata !63, metadata !34), !dbg !64, !phasar.instruction.id !65, ID: 23 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

--- IFDS START RESULT RECORD ---
N: %4 = load %struct.s2*, %struct.s2** %s2.addr, align 8, !dbg !66, !phasar.instruction.id !67, ID: 24 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %s36 = getelementptr inbounds %struct.s2, %struct.s2* %4, i32 0, i32 1, !dbg !68, !phasar.instruction.id !69, ID: 25 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %arrayidx7 = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s36, i64 0, i64 0, !dbg !66, !phasar.instruction.id !70, ID: 26 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %arrayidx8 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx7, i64 0, i64 0, !dbg !66, !phasar.instruction.id !71, ID: 27 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %t19 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx8, i32 0, i32 2, !dbg !72, !phasar.instruction.id !73, ID: 28 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

--- IFDS START RESULT RECORD ---
N: %5 = load i8*, i8** %t19, align 8, !dbg !72, !phasar.instruction.id !74, ID: 29 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: ret void, !dbg !76, !phasar.instruction.id !77, ID: 31 in function: foo
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%t1 = alloca i8*, align 8, !phasar.instruction.id !29, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1
A:	%s2.addr = alloca %struct.s2*, align 8, !phasar.instruction.id !28, ID: 1
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 33 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 34 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s1* %s1, metadata !85, metadata !34), !dbg !91, !phasar.instruction.id !92, ID: 36 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata %struct.s2* %s2, metadata !93, metadata !34), !dbg !94, !phasar.instruction.id !95, ID: 37 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !44, !phasar.instruction.id !45, ID: 38 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !44, !phasar.instruction.id !45, ID: 38

--- IFDS START RESULT RECORD ---
N: %arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !44, !phasar.instruction.id !45, ID: 38

--- IFDS START RESULT RECORD ---
N: %arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !44, !phasar.instruction.id !45, ID: 38

--- IFDS START RESULT RECORD ---
N: %t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !44, !phasar.instruction.id !45, ID: 38

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !44, !phasar.instruction.id !45, ID: 38

--- IFDS START RESULT RECORD ---
N: %s22 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56, ID: 44 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 34
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: store %struct.s2* %s2, %struct.s2** %s22, align 8, !dbg !57, !phasar.instruction.id !58, ID: 45 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 34
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %s23 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !59, !phasar.instruction.id !60, ID: 46 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 34
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 33
A:	%s22 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56, ID: 44
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: %0 = load %struct.s2*, %struct.s2** %s23, align 8, !dbg !59, !phasar.instruction.id !61, ID: 47 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 34
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 33
A:	%s22 = getelementptr inbounds %struct.s1,
 %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56, ID: 44
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: call void @foo(%struct.s2* %0), !dbg !62, !phasar.instruction.id !63, ID: 48 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 34
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 33
A:	%s22 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56, ID: 44
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

--- IFDS START RESULT RECORD ---
N: ret i32 0, !dbg !64, !phasar.instruction.id !65, ID: 49 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s2 = alloca %struct.s2, align 8, !phasar.instruction.id !14, ID: 34
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42

D:	store i8* %call, i8** %t1, align 8, !dbg !53, !phasar.instruction.id !54, ID: 43
A:	%s1 = alloca %struct.s1, align 8, !phasar.instruction.id !13, ID: 33
A:	%s22 = getelementptr inbounds %struct.s1, %struct.s1* %s1, i32 0, i32 2, !dbg !55, !phasar.instruction.id !56, ID: 44
A:	%s3 = getelementptr inbounds %struct.s2, %struct.s2* %s2, i32 0, i32 1, !dbg !46, !phasar.instruction.id !47, ID: 39
A:	%arrayidx = getelementptr inbounds [2 x [2 x %struct.s3]], [2 x [2 x %struct.s3]]* %s3, i64 0, i64 0, !dbg !48, !phasar.instruction.id !49, ID: 40
A:	%arrayidx1 = getelementptr inbounds [2 x %struct.s3], [2 x %struct.s3]* %arrayidx, i64 0, i64 1, !dbg !48, !phasar.instruction.id !50, ID: 41
A:	%t1 = getelementptr inbounds %struct.s3, %struct.s3* %arrayidx1, i32 0, i32 2, !dbg !51, !phasar.instruction.id !52, ID: 42


No IFDS report available!