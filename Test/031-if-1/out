PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
[TRACK] Checking end of branch bb for: entry
[TRACK] End of branch bb: if.end
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %a = alloca i32, align 4, !phasar.instruction.id !17
[TRACK] Destination:
[TRACK]   %ret = alloca i32, align 4, !phasar.instruction.id !16### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i8** %taint, metadata !19, metadata !22), !dbg !23, !phasar.instruction.id !24, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !17, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !14, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !18, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %ret, metadata !28, metadata !22), !dbg !29, !phasar.instruction.id !30, ID: 9 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8 in function: main
D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %ret = alloca i32, align 4, !phasar.instruction.id !16, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12 in function: main
D:	%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

--- IFDS START RESULT RECORD ---
N: %cmp = icmp ne i8* %0, null, !dbg !34, !phasar.instruction.id !35, ID: 11 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13

D:	store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
A:	%a = alloca i32, align 4, !phasar.instruction.id !17, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50, ID: 18 in function: main
D:	store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46, ID: 16
A:	%ret = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
A:	%ret = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

D:	store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
A:	%a = alloca i32, align 4, !phasar.instruction.id !17, ID: 4

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13

D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
A:	%a = alloca i32, align 4, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	store i8* %call, i8** %taint, align 8, !dbg !
[TRACK] Checking end of branch bb for: entry
[TRACK] End of branch bb: if.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549967413-trace.txt
23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%1 = load i32, i32* %a, align 4, !dbg !43, !phasar.instruction.id !44, ID: 15

--- IFDS START RESULT RECORD ---
N: br label %if.end, !dbg !47, !phasar.instruction.id !48, ID: 17 in function: main
D:	store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46, ID: 16
A:	%ret = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
A:	%ret = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

D:	store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
A:	%a = alloca i32, align 4, !phasar.instruction.id !17, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !36, !phasar.instruction.id !37, ID: 12

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

--- IFDS START RESULT RECORD ---
N: ret i32 %2, !dbg !51, !phasar.instruction.id !52, ID: 19 in function: main
D:	store i8* %call, i8** %taint, align 8, !dbg !23, !phasar.instruction.id !27, ID: 8
A:	%taint = alloca i8*, align 8, !phasar.instruction.id !15, ID: 2

D:	%call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !25, !phasar.instruction.id !26, ID: 7

D:	%0 = load i8*, i8** %taint, align 8, !dbg !31, !phasar.instruction.id !33, ID: 10

D:	%2 = load i32, i32* %ret, align 4, !dbg !49, !phasar.instruction.id !50, ID: 18

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !38, metadata !22), !dbg !40, !phasar.instruction.id !41, ID: 13

D:	store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
A:	%a = alloca i32, align 4, !phasar.instruction.id !17, ID: 4

D:	store i32 42, i32* %a, align 4, !dbg !40, !phasar.instruction.id !42, ID: 14
A:	%ret = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

D:	store i32 %1, i32* %ret, align 4, !dbg !45, !phasar.instruction.id !46, ID: 16
A:	%ret = alloca i32, align 4, !phasar.instruction.id !16, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1


