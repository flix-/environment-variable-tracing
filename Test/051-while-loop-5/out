PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %while.cond, !dbg !20, !phasar.instruction.id !21, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !24, ID: 8 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %cmp = icmp eq i32 %0, 0, !dbg !30, !phasar.instruction.id !31, ID: 11 in function: main
D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

D:	%0 = load i32, i32* %rc, align 4, !dbg !26, !phasar.instruction.id !29, ID: 10

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46, ID: 18 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %rc, align 4, !dbg !26, !phasar.instruction.id !29, ID: 10 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9 in function: main
D:	%tobool = icmp ne i32 %call, 0, !dbg !20, !phasar.instruction.id !24, ID: 8

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %cmp, label %if.then, label %if.end, !dbg !32, !phasar.instruction.id !33, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%0 = load i32, i32* %rc, align 4, !dbg !26, !phasar.instruction.id !29, ID: 10

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	%cmp = icmp eq i32 %0, 0, !dbg !30, !phasar.instruction.id !31, ID: 11

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

--- IFDS START RESULT RECORD ---
N: br label %while.end, !dbg !34, !phasar.instruction.id !35, ID: 13 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	%0 = load i32, i32* %rc, align 4, !dbg !26, !phasar.instruction.id !29, ID: 10

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !32, !phasar.instruction.id !33, ID: 12
L:	if.end

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %while.cond, !dbg !20, !llvm.loop !38, !phasar.instruction.id !40, ID: 15 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14 in function: main
D:	br i1 %cmp, label %if.then, label %if.end, !dbg !32, !phasar.instruction.id !33, ID: 12
L:	if.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

D:	%0 = load i32, i32* %rc, align 4, !dbg !26, !phasar.instruction.id !29, ID: 10

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %ut, metadata !41, metadata !17), !dbg !42, !phasar.instruction.id !43, ID: 16 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	%0 = load i32, i32* %rc, align 4, !dbg !26, !phasar.instruction.id !29, ID: 10

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !20, !phasar.instruction.id !25, ID: 9
L:	while.end

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: [TRACK] Checking end of branch bb for: while.cond
[TRACK] End of branch bb: while.end
[TRACK] Succ: while.end
[TRACK] Checking end of branch bb for: while.body
[TRACK] End of branch bb: if.end
[TRACK] Loop blocks: while.cond
[TRACK] Loop blocks: while.body
[TRACK] Loop blocks: if.end
[TRACK] Succ: if.end
[TRACK] Succ: if.then
[TRACK] Succ: while.end
[TRACK] Checking end of branch bb for: while.body
[TRACK] End of branch bb: if.end
[TRACK] Loop blocks: while.cond
[TRACK] Loop blocks: while.body
[TRACK] Loop blocks: if.end
[TRACK] Succ: if.end
[TRACK] Succ: if.then
[TRACK] Succ: while.end
[TRACK] Checking end of branch bb for: while.cond
[TRACK] End of branch bb: while.end
[TRACK] Succ: while.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549913757-trace.txt
14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %ut, align 4, !dbg !42, !phasar.instruction.id !44, ID: 17 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	%0 = load i32, i32* %rc, align 4, !dbg !26, !phasar.instruction.id !29, ID: 10

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: ret i32 %1, !dbg !47, !phasar.instruction.id !48, ID: 19 in function: main
D:	%1 = load i32, i32* %rc, align 4, !dbg !45, !phasar.instruction.id !46, ID: 18

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !22, !phasar.instruction.id !23, ID: 7

D:	store i32 100, i32* %rc, align 4, !dbg !36, !phasar.instruction.id !37, ID: 14
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1


