PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !19, metadata !20), !dbg !21, !phasar.instruction.id !22, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a4 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !23, !phasar.instruction.id !27, ID: 11 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10 in function: main
D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !18, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %rc, align 4, !dbg !29, !phasar.instruction.id !32, ID: 13 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %cmp1 = icmp slt i32 %1, 10, !dbg !58, !phasar.instruction.id !59, ID: 25 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %i, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %while.cond, !dbg !23, !phasar.instruction.id !24, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12 in function: main
D:	%tobool = icmp ne i32 %call, 0, !dbg !23, !phasar.instruction.id !27, ID: 11

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	%0 = load i32, i32* %rc, align 4, !dbg !29, !phasar.instruction.id !32, ID: 13

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

D:	%cmp = icmp eq i32 %0, 0, !dbg !33, !phasar.instruction.id !34, ID: 14

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %cmp = icmp eq i32 %0, 0, !dbg !33, !phasar.instruction.id !34, ID: 14 in function: main
D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%0 = load i32, i32* %rc, align 4, !dbg !29, !phasar.instruction.id !32, ID: 13

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

--- IFDS START RESULT RECORD ---
N: br label %while.end, !dbg !37, !phasar.instruction.id !38, ID: 16 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	%0 = load i32, i32* %rc, align 4, !dbg !29, !phasar.instruction.id !32, ID: 13

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %while.cond, !dbg !23, !llvm.loop !41, !phasar.instruction.id !43, ID: 18 in function: main
D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

--- IFDS START RESULT RECORD ---
N: store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	%0 = load i32, i32* %rc, align 4, !dbg !29, !phasar.instruction.id !32, ID: 13

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	%0 = load i32, i32* %rc, align 4, !dbg !29, !phasar.instruction.id !32, ID: 13

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	br i1 %tobool, label %while.body, label %while.end, !dbg !23, !phasar.instruction.id !28, ID: 12
L:	while.end

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	%0 = load i32, i32* %rc, align 4, !dbg !29, !phasar.instruction.id !32, ID: 13

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21 in function: main
D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %i, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

--- IFDS START RESULT RECORD ---
N: br label %for.cond, !dbg !53, !phasar.instruction.id !54, ID: 23 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

--- IFDS START RESULT RECORD ---
N: br label %while.body3, !dbg !62, !llvm.loop !70, !phasar.instruction.id !72, ID: 30 in function: main
D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 0, i32* %a, align 4, !dbg !67, !phasar.instruction.id !69, ID: 29
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !65, metadata !20), !dbg !67, !phasar.instruction.id !68, ID: 28

D:	br i1 %cmp1, label %for.body, label %for.end, !dbg !60, !phasar.instruction.id !61, ID: 26
L:	for.end

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

--- IFDS START RESULT RECORD ---
N: %3 = load i32, i32* %rc, align 4, !dbg !81, !phasar.instruction.id !82, ID: 35 in function: main
D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %cmp1, label %for.body, label %for.end, !dbg !60, !phasar.instruction.id !61, ID: 26
L:	for.end

D:	%1 = load i32, i32* %i, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

--- IFDS START RESULT RECORD ---
N: br i1 %cmp1, label %for.body, label %for.end, !dbg !60, !phasar.instruction.id !61, ID: 26 in function: main
D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %i, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	%cmp1 = icmp slt i32 %1, 10, !dbg !58, !phasar.instruction.id !59, ID: 25

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

--- IFDS START RESULT RECORD ---
N: br label %while.body3, !dbg !62, !phasar.instruction.id !64, ID: 27 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %cmp1, label %for.body, label %for.end, !dbg !60, !phasar.instruction.id !61, ID: 26
L:	for.end

D:	%1 = load i32, i32* %i, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !65, metadata !20), !dbg !67, !phasar.instruction.id !68, ID: 28 in function: main
D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 0, i32* %a, align 4, !dbg !67, !phasar.instruction.id !69, ID: 29
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !65, metadata !20), !dbg !67, !phasar.instruction.id !68,[TRACK] Checking end of branch bb for: while.cond
[TRACK] End of branch bb: while.end
[TRACK] Checking end of branch bb for: while.body
[TRACK] End of branch bb: if.end
[TRACK] Checking end of branch bb for: for.cond
[TRACK] End of branch bb: for.end
[TRACK] Checking end of branch bb for: for.cond
[TRACK] End of branch bb: for.end
[TRACK] Checking end of branch bb for: while.body
[TRACK] End of branch bb: if.end
[TRACK] Checking end of branch bb for: while.cond
[TRACK] End of branch bb: while.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549838124-trace.txt
 ID: 28

D:	br i1 %cmp1, label %for.body, label %for.end, !dbg !60, !phasar.instruction.id !61, ID: 26
L:	for.end

D:	%1 = load i32, i32* %i, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %a, align 4, !dbg !67, !phasar.instruction.id !69, ID: 29 in function: main
D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 0, i32* %a, align 4, !dbg !67, !phasar.instruction.id !69, ID: 29
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !65, metadata !20), !dbg !67, !phasar.instruction.id !68, ID: 28

D:	br i1 %cmp1, label %for.body, label %for.end, !dbg !60, !phasar.instruction.id !61, ID: 26
L:	for.end

D:	%1 = load i32, i32* %i, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

--- IFDS START RESULT RECORD ---
N: ret i32 %3, !dbg !83, !phasar.instruction.id !84, ID: 36 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !25, !phasar.instruction.id !26, ID: 10

D:	br i1 %cmp, label %if.then, label %if.end, !dbg !35, !phasar.instruction.id !36, ID: 15
L:	if.end

D:	store i32 100, i32* %rc, align 4, !dbg !39, !phasar.instruction.id !40, ID: 17
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	call void @llvm.dbg.declare(metadata i32* %ut, metadata !44, metadata !20), !dbg !45, !phasar.instruction.id !46, ID: 19

D:	store i32 0, i32* %ut, align 4, !dbg !45, !phasar.instruction.id !47, ID: 20
A:	%ut = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	call void @llvm.dbg.declare(metadata i32* %i, metadata !48, metadata !20), !dbg !50, !phasar.instruction.id !51, ID: 21

D:	store i32 0, i32* %i, align 4, !dbg !50, !phasar.instruction.id !52, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%1 = load i32, i32* %i, align 4, !dbg !55, !phasar.instruction.id !57, ID: 24

D:	%3 = load i32, i32* %rc, align 4, !dbg !81, !phasar.instruction.id !82, ID: 35

D:	@zero_value = constant i2 0, align 4, ID: -1


