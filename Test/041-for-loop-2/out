PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Release/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
[TRACK] Checking end of branch label for: for.cond
[TRACK] End of branch label: land.end
[TRACK] Checking end of branch label for: land.end
[TRACK] End of branch label: for.end
[TRACK] Relocated memory location (store)
[TRACK] Source:
[TRACK]   %i = alloca i32, align 4, !phasar.instruction.id !14
[TRACK] Destination:
[TRACK]   %rc = alloca i32, align 4, !phasar.instruction.id !13### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !16, metadata !17), !dbg !18, !phasar.instruction.id !19, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %for.cond, !dbg !25, !phasar.instruction.id !26, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %i, align 4, !dbg !22, !phasar.instruction.id !24, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !17), !dbg !22, !phasar.instruction.id !23, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9 in function: main
D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

--- IFDS START RESULT RECORD ---
N: %i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	%tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %call, 0, !dbg !27, !phasar.instruction.id !30, ID: 10 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

--- IFDS START RESULT RECORD ---
N: %call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
L:	land.end

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
L:	land.end

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %land.end, !phasar.instruction.id !36, ID: 14 in function: main
D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
L:	land.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

--- IFDS START RESULT RECORD ---
N: %0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15 in function: main
D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
L:	land.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

--- IFDS START RESULT RECORD ---
N: %3 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13

--- IFDS START RESULT RECORD ---
N: br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	br i1 %tobool, label %land.rhs, label %land.end, !dbg !31, !phasar.instruction.id !32, ID: 11
L:	land.end

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13

D:	%0 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ], !phasar.instruction.id !37, ID: 15

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18 in function: main
D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%1 = load i32, i32* %i, align 4, !dbg !40, !phasar.instruction.id !42, ID: 17

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

--- IFDS START RESULT RECORD ---
N: %2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %for.inc, !dbg !45, !phasar.instruction.id !46, ID: 19 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22 in function: main
D:	store i32 %inc, i32* %i, align 4, !
[TRACK] Checking end of branch label for: land.end
[TRACK] End of branch label: for.end
[TRACK] Checking end of branch label for: for.cond
[TRACK] End of branch label: land.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549795347-trace.txt
dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%inc = add nsw i32 %2, 1, !dbg !47, !phasar.instruction.id !49, ID: 21

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	%2 = load i32, i32* %i, align 4, !dbg !47, !phasar.instruction.id !48, ID: 20

--- IFDS START RESULT RECORD ---
N: br label %for.cond, !dbg !51, !llvm.loop !52, !phasar.instruction.id !54, ID: 23 in function: main
D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %0, label %for.body, label %for.end, !dbg !38, !phasar.instruction.id !39, ID: 16
L:	for.end

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

--- IFDS START RESULT RECORD ---
N: ret i32 %3, !dbg !57, !phasar.instruction.id !58, ID: 25 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !27, !phasar.instruction.id !29, ID: 9

D:	%call1 = call i32 (...) @foo(), !dbg !33, !phasar.instruction.id !34, ID: 12

D:	%tobool2 = icmp ne i32 %call1, 0, !dbg !31, !phasar.instruction.id !35, ID: 13

D:	%3 = load i32, i32* %rc, align 4, !dbg !55, !phasar.instruction.id !56, ID: 24

D:	store i32 %1, i32* %rc, align 4, !dbg !43, !phasar.instruction.id !44, ID: 18
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%i = alloca i32, align 4, !phasar.instruction.id !14, ID: 3

D:	store i32 %inc, i32* %i, align 4, !dbg !47, !phasar.instruction.id !50, ID: 22
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1


