; ModuleID = 'main.c'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"gude\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @main() #0 !dbg !9 {
entry:
  %retval = alloca i32, align 4
  %tainted = alloca i8*, align 8
  %ploink = alloca i32, align 4
  %rc = alloca i32, align 4
  %a = alloca i32, align 4
  %t1 = alloca i8*, align 8
  %no_taint = alloca i32, align 4
  %t2 = alloca i32, align 4
  %t3 = alloca i32, align 4
  %t4 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i8** %tainted, metadata !13, metadata !16), !dbg !17
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)) #3, !dbg !18
  store i8* %call, i8** %tainted, align 8, !dbg !17
  call void @llvm.dbg.declare(metadata i32* %ploink, metadata !19, metadata !16), !dbg !20
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !21, metadata !16), !dbg !22
  %0 = load i32, i32* %rc, align 4, !dbg !23
  %cmp = icmp ne i32 %0, 0, !dbg !25
  br i1 %cmp, label %if.then, label %if.else7, !dbg !26

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %tainted, align 8, !dbg !27
  %cmp1 = icmp ne i8* %1, null, !dbg !30
  br i1 %cmp1, label %if.then2, label %if.else5, !dbg !31

if.then2:                                         ; preds = %if.then
  %2 = load i8*, i8** %tainted, align 8, !dbg !32
  %cmp3 = icmp ne i8* %2, null, !dbg !35
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !36

if.then4:                                         ; preds = %if.then2
  br label %do.body, !dbg !37, !llvm.loop !39

do.body:                                          ; preds = %if.then4
  call void @llvm.dbg.declare(metadata i32* %a, metadata !41, metadata !16), !dbg !43
  store i32 0, i32* %a, align 4, !dbg !43
  br label %do.end, !dbg !44

do.end:                                           ; preds = %do.body
  br label %if.end, !dbg !45

if.else:                                          ; preds = %if.then2
  store i32 -1, i32* %retval, align 4, !dbg !46
  br label %return, !dbg !46

if.end:                                           ; preds = %do.end
  store i32 1, i32* %rc, align 4, !dbg !48
  br label %if.end6, !dbg !49

if.else5:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !50
  br label %return, !dbg !50

if.end6:                                          ; preds = %if.end
  br label %if.end11, !dbg !52

if.else7:                                         ; preds = %entry
  %3 = load i32, i32* %rc, align 4, !dbg !53
  %cmp8 = icmp eq i32 %3, 1, !dbg !56
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !57

if.then9:                                         ; preds = %if.else7
  store i32 -1, i32* %retval, align 4, !dbg !58
  br label %return, !dbg !58

if.end10:                                         ; preds = %if.else7
  call void @llvm.dbg.declare(metadata i8** %t1, metadata !60, metadata !16), !dbg !61
  %4 = load i8*, i8** %tainted, align 8, !dbg !62
  store i8* %4, i8** %t1, align 8, !dbg !61
  call void @llvm.dbg.declare(metadata i32* %no_taint, metadata !63, metadata !16), !dbg !64
  store i32 0, i32* %no_taint, align 4, !dbg !64
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.end6
  %5 = load i32, i32* %ploink, align 4, !dbg !65
  %tobool = icmp ne i32 %5, 0, !dbg !65
  br i1 %tobool, label %if.then12, label %if.else13, !dbg !67

if.then12:                                        ; preds = %if.end11
  call void @llvm.dbg.declare(metadata i32* %t2, metadata !68, metadata !16), !dbg !70
  store i32 1, i32* %t2, align 4, !dbg !70
  br label %if.end14, !dbg !71

if.else13:                                        ; preds = %if.end11
  call void @llvm.dbg.declare(metadata i32* %t3, metadata !72, metadata !16), !dbg !74
  store i32 2, i32* %t3, align 4, !dbg !74
  br label %if.end14

if.end14:                                         ; preds = %if.else13, %if.then12
  call void @llvm.dbg.declare(metadata i32* %t4, metadata !75, metadata !16), !dbg !76
  store i32 1, i32* %t4, align 4, !dbg !76
  %6 = load i32, i32* %rc, align 4, !dbg !77
  store i32 %6, i32* %retval, align 4, !dbg !78
  br label %return, !dbg !78

return:                                           ; preds = %if.end14, %if.then9, %if.else5, %if.else
  %7 = load i32, i32* %retval, align 4, !dbg !79
  %__IFDSENVIRONMENTVARIABLETRACING_DUMMY_BEFORE_RET__0 = urem i4711 4711, 4711
  ret i32 %7, !dbg !79
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i8* @getenv(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 5.0.1 (tags/RELEASE_501/final 348479)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "main.c", directory: "/home/sebastian/.qt-creator-workspace/Phasar/Test/031-if-18")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!5 = !{i32 2, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{!"clang version 5.0.1 (tags/RELEASE_501/final 348479)"}
!9 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 5, type: !10, isLocal: false, isDefinition: true, scopeLine: 5, isOptimized: false, unit: !0, variables: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !DILocalVariable(name: "tainted", scope: !9, file: !1, line: 6, type: !14)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!16 = !DIExpression()
!17 = !DILocation(line: 6, column: 11, scope: !9)
!18 = !DILocation(line: 6, column: 21, scope: !9)
!19 = !DILocalVariable(name: "ploink", scope: !9, file: !1, line: 8, type: !12)
!20 = !DILocation(line: 8, column: 9, scope: !9)
!21 = !DILocalVariable(name: "rc", scope: !9, file: !1, line: 10, type: !12)
!22 = !DILocation(line: 10, column: 9, scope: !9)
!23 = !DILocation(line: 11, column: 9, scope: !24)
!24 = distinct !DILexicalBlock(scope: !9, file: !1, line: 11, column: 9)
!25 = !DILocation(line: 11, column: 12, scope: !24)
!26 = !DILocation(line: 11, column: 9, scope: !9)
!27 = !DILocation(line: 12, column: 13, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !1, line: 12, column: 13)
!29 = distinct !DILexicalBlock(scope: !24, file: !1, line: 11, column: 18)
!30 = !DILocation(line: 12, column: 21, scope: !28)
!31 = !DILocation(line: 12, column: 13, scope: !29)
!32 = !DILocation(line: 13, column: 17, scope: !33)
!33 = distinct !DILexicalBlock(scope: !34, file: !1, line: 13, column: 17)
!34 = distinct !DILexicalBlock(scope: !28, file: !1, line: 12, column: 30)
!35 = !DILocation(line: 13, column: 25, scope: !33)
!36 = !DILocation(line: 13, column: 17, scope: !34)
!37 = !DILocation(line: 14, column: 17, scope: !38)
!38 = distinct !DILexicalBlock(scope: !33, file: !1, line: 13, column: 34)
!39 = distinct !{!39, !37, !40}
!40 = !DILocation(line: 16, column: 27, scope: !38)
!41 = !DILocalVariable(name: "a", scope: !42, file: !1, line: 15, type: !12)
!42 = distinct !DILexicalBlock(scope: !38, file: !1, line: 14, column: 20)
!43 = !DILocation(line: 15, column: 25, scope: !42)
!44 = !DILocation(line: 16, column: 17, scope: !42)
!45 = !DILocation(line: 17, column: 13, scope: !38)
!46 = !DILocation(line: 18, column: 17, scope: !47)
!47 = distinct !DILexicalBlock(scope: !33, file: !1, line: 17, column: 20)
!48 = !DILocation(line: 20, column: 16, scope: !34)
!49 = !DILocation(line: 21, column: 9, scope: !34)
!50 = !DILocation(line: 22, column: 13, scope: !51)
!51 = distinct !DILexicalBlock(scope: !28, file: !1, line: 21, column: 16)
!52 = !DILocation(line: 24, column: 5, scope: !29)
!53 = !DILocation(line: 25, column: 13, scope: !54)
!54 = distinct !DILexicalBlock(scope: !55, file: !1, line: 25, column: 13)
!55 = distinct !DILexicalBlock(scope: !24, file: !1, line: 24, column: 12)
!56 = !DILocation(line: 25, column: 16, scope: !54)
!57 = !DILocation(line: 25, column: 13, scope: !55)
!58 = !DILocation(line: 26, column: 13, scope: !59)
!59 = distinct !DILexicalBlock(scope: !54, file: !1, line: 25, column: 22)
!60 = !DILocalVariable(name: "t1", scope: !55, file: !1, line: 28, type: !14)
!61 = !DILocation(line: 28, column: 15, scope: !55)
!62 = !DILocation(line: 28, column: 20, scope: !55)
!63 = !DILocalVariable(name: "no_taint", scope: !55, file: !1, line: 30, type: !12)
!64 = !DILocation(line: 30, column: 13, scope: !55)
!65 = !DILocation(line: 33, column: 9, scope: !66)
!66 = distinct !DILexicalBlock(scope: !9, file: !1, line: 33, column: 9)
!67 = !DILocation(line: 33, column: 9, scope: !9)
!68 = !DILocalVariable(name: "t2", scope: !69, file: !1, line: 34, type: !12)
!69 = distinct !DILexicalBlock(scope: !66, file: !1, line: 33, column: 17)
!70 = !DILocation(line: 34, column: 13, scope: !69)
!71 = !DILocation(line: 35, column: 5, scope: !69)
!72 = !DILocalVariable(name: "t3", scope: !73, file: !1, line: 36, type: !12)
!73 = distinct !DILexicalBlock(scope: !66, file: !1, line: 35, column: 12)
!74 = !DILocation(line: 36, column: 13, scope: !73)
!75 = !DILocalVariable(name: "t4", scope: !9, file: !1, line: 39, type: !12)
!76 = !DILocation(line: 39, column: 9, scope: !9)
!77 = !DILocation(line: 41, column: 12, scope: !9)
!78 = !DILocation(line: 41, column: 5, scope: !9)
!79 = !DILocation(line: 42, column: 1, scope: !9)
