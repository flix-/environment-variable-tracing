PhASAR v1218
A LLVM-based static analysis framework

--- Configuration ---
Project ID: myphasarproject
Graph ID: 123456
Module(s): main.ll 
Data-flow analysis: plugin 
WPA: 1
Mem2reg: 0
Print edge recorder: 0
Analysis plugin(s): 
/home/sebastian/.qt-creator-workspace/build-Phasar-Desktop-Debug/IFDSEnvironmentVariableTracing/libIFDSEnvironmentVariableTracing.so
Output: results.json
All modules loaded
PTG construction ...
PTG construction ended
DONE
### DUMP LLVMIFDSSolver results
--- IFDS START RESULT RECORD ---
N: %a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %retval = alloca i32, align 4, !phasar.instruction.id !12, ID: 1 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61, ID: 27
L:	sw.epilog

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

--- IFDS START RESULT RECORD ---
N: store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %rc, metadata !22, metadata !23), !dbg !24, !phasar.instruction.id !25, ID: 11 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a13 = alloca i32, align 4, !phasar.instruction.id !20, ID: 9 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %retval, align 4, !phasar.instruction.id !21, ID: 10 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %untainted, metadata !26, metadata !23), !dbg !27, !phasar.instruction.id !28, ID: 12 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %a8 = alloca i32, align 4, !phasar.instruction.id !19, ID: 8 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %untainted = alloca i32, align 4, !phasar.instruction.id !14, ID: 3 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %u = alloca i32, align 4, !phasar.instruction.id !18, ID: 7 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %taint, metadata !29, metadata !23), !dbg !30, !phasar.instruction.id !31, ID: 13 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %0 = load i32, i32* %rc, align 4, !dbg !35, !phasar.instruction.id !37, ID: 16 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

--- IFDS START RESULT RECORD ---
N: %tobool = icmp ne i32 %0, 0, !dbg !35, !phasar.instruction.id !38, ID: 17 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %4 = load i32, i32* %untainted, align 4, !dbg !91, !phasar.instruction.id !93, ID: 42 in function: main
D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool, label %if.then, label %if.end7, !dbg !39, !phasar.instruction.id !40, ID: 18 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

--- IFDS START RESULT RECORD ---
N: %2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

--- IFDS START RESULT RECORD ---
N: br label %if.end7, !dbg !85, !phasar.instruction.id !86, ID: 39 in function: main
D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	%tobool1 = icmp ne i32 %1, 0, !dbg !41, !phasar.instruction.id !45, ID: 20

--- IFDS START RESULT RECORD ---
N: br label %sw.bb, !dbg !56, !phasar.instruction.id !57, ID: 25 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

--- IFDS START RESULT RECORD ---
N: switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	%2 = load i32, i32* %rc, align 4, !dbg !48, !phasar.instruction.id !50, ID: 22

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

--- IFDS START RESULT RECORD ---
N: br label %sw.bb4, !dbg !65, !phasar.instruction.id !66, ID: 29 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61, ID: 27
L:	sw.epilog

--- IFDS START RESULT RECORD ---
N: br label %if.end, !dbg !79, !phasar.instruction.id !80, ID: 36 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61, ID: 27 in function: main
D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	%3 = load i32, i32* %rc, align 4, !dbg !58, !phasar.instruction.id !59, ID: 26

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30 in function: main
D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61, ID: 27
L:	sw.epilog

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61, ID: 27
L:	sw.epilog

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %sw.epilog, !dbg !71, !phasar.instruction.id !72, ID: 32 in function: main
D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61, ID: 27
L:	sw.epilog

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33 in function: main
D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	switch i32 %3, label %sw.default3 [
    i32 0, label %sw.bb4
  ], !dbg !60, !phasar.instruction.id !61, ID: 27
L:	sw.epilog

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34 in function: main
D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %sw.epilog6, !dbg !77, !phasar.instruction.id !78, ID: 35 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
  ], !dbg !51, !phasar.instruction.id !52, ID: 23
L:	sw.epilog6

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %u, metadata !81, metadata !23), !dbg !82, !phasar.instruction.id !83, ID: 37 in function: main
D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	br i1 %tobool1, label %if.then2, label %if.end, !dbg !46, !phasar.instruction.id !47, ID: 21
L:	if.end

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %u, align 4, !dbg !82, !phasar.instruction.id !84, ID: 38 in function: main
D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	%1 = load i32, i32* %taint, align 4, !dbg !41, !phasar.instruction.id !44, ID: 19

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a8, metadata !87, metadata !23), !dbg !88, !phasar.instruction.id !89, ID: 40 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %a8, align 4, !dbg !88, !phasar.instruction.id !90, ID: 41 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: %tobool9 = icmp ne i32 %4, 0, !dbg !91, !phasar.instruction.id !94, ID: 43 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %5 = load i32, i32* %untainted, align 4, !dbg !106, !phasar.instruction.id !107, ID: 49 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %if.end11, !phasar.instruction.id !105, ID: 48 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br i1 %tobool9, label %if.then10, label %if.else, !dbg !95, !phasar.instruction.id !96, ID: 44 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: store i32 1, i32* %a8, align 4, !dbg !97, !phasar.instruction.id !99, ID: 45 in function: main
D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: br label %if.end11, !dbg !100, !phasar.instruction.id !101, ID: 46 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: store i32 2, i32* %a8, align 4, !dbg !102, !phasar.instruction.id !104, ID: 47 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: %6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118, ID: 54 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: br label %sw.epilog14, !dbg !115, !phasar.instruction.id !116, ID: 53 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: switch i32 %5, label %sw.epilog14 [
    i32 0, label %sw.bb12
  ], !dbg !108, !phasar.instruction.id !109, ID: 50 in function: main
D:	@zero_value = constant i2 0, align 4, ID: -1

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: call void @llvm.dbg.declare(metadata i32* %a13, metadata !110, metadata !23), !dbg !112, !phasar.instruction.id !113, ID: 51 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, [TRACK] Checking end of branch label for: if.then
[TRACK] End of branch label: if.end
[TRACK] Checking end of switch label for: if.then2
[TRACK] End of switch label: sw.epilog6
[TRACK] Checking end of switch label for: sw.bb
[TRACK] End of switch label: sw.epilog
[TRACK] Checking end of switch label for: sw.bb
[TRACK] End of switch label: sw.epilog
[TRACK] Checking end of switch label for: if.then2
[TRACK] End of switch label: sw.epilog6
[TRACK] Checking end of branch label for: if.then
[TRACK] End of branch label: if.end
Writing simple report to: line-numbers.txt
Writing lcov trace to: static-main-1549710494-trace.txt
ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	@zero_value = constant i2 0, align 4, ID: -1

--- IFDS START RESULT RECORD ---
N: store i32 0, i32* %a13, align 4, !dbg !112, !phasar.instruction.id !114, ID: 52 in function: main
D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

--- IFDS START RESULT RECORD ---
N: ret i32 %6, !dbg !119, !phasar.instruction.id !120, ID: 55 in function: main
D:	store i32 1, i32* %rc, align 4, !dbg !62, !phasar.instruction.id !64, ID: 28
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 1, i32* %rc, align 4, !dbg !53, !phasar.instruction.id !55, ID: 24
A:	%rc = alloca i32, align 4, !phasar.instruction.id !13, ID: 2

D:	store i32 %call, i32* %taint, align 4, !dbg !30, !phasar.instruction.id !34, ID: 15
A:	%taint = alloca i32, align 4, !phasar.instruction.id !15, ID: 4

D:	%call = call i32 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0)), !dbg !32, !phasar.instruction.id !33, ID: 14

D:	@zero_value = constant i2 0, align 4, ID: -1

D:	call void @llvm.dbg.declare(metadata i32* %a, metadata !67, metadata !23), !dbg !68, !phasar.instruction.id !69, ID: 30

D:	store i32 1, i32* %a, align 4, !dbg !68, !phasar.instruction.id !70, ID: 31
A:	%a = alloca i32, align 4, !phasar.instruction.id !16, ID: 5

D:	call void @llvm.dbg.declare(metadata i32* %a5, metadata !73, metadata !23), !dbg !74, !phasar.instruction.id !75, ID: 33

D:	store i32 1, i32* %a5, align 4, !dbg !74, !phasar.instruction.id !76, ID: 34
A:	%a5 = alloca i32, align 4, !phasar.instruction.id !17, ID: 6

D:	%6 = load i32, i32* %rc, align 4, !dbg !117, !phasar.instruction.id !118, ID: 54


